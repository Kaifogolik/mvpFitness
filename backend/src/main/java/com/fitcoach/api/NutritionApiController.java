package com.fitcoach.api;

import com.fitcoach.infrastructure.nutrition.NutritionApiService;
import com.fitcoach.infrastructure.nutrition.NutritionInfo;
import com.fitcoach.infrastructure.nutrition.NutritionNotFoundException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.Map;

/**
 * API –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Nutrition API Service
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —ç–∫–æ–Ω–æ–º–∏—é $290/–º–µ—Å—è—Ü —á–µ—Ä–µ–∑ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ API –ø–∏—Ç–∞–Ω–∏—è
 */
@RestController
@RequestMapping("/api/v2/nutrition")
public class NutritionApiController {
    
    private static final Logger log = LoggerFactory.getLogger(NutritionApiController.class);
    
    private final NutritionApiService nutritionApiService;
    
    public NutritionApiController(NutritionApiService nutritionApiService) {
        this.nutritionApiService = nutritionApiService;
    }
    
    /**
     * –ü–æ–∏—Å–∫ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
     * 
     * @param foodName –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
     * @param weight –≤–µ—Å –ø–æ—Ä—Ü–∏–∏ –≤ –≥—Ä–∞–º–º–∞—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100–≥)
     * @return –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
     */
    @GetMapping("/search")
    public ResponseEntity<Map<String, Object>> searchNutrition(
            @RequestParam String foodName,
            @RequestParam(defaultValue = "100") double weight) {
        
        try {
            log.info("üîç API: –ü–æ–∏—Å–∫ –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è '{}' ({}–≥)", foodName, weight);
            
            NutritionInfo nutrition = nutritionApiService.getNutrition(foodName, weight);
            
            return ResponseEntity.ok(Map.of(
                    "success", true,
                    "nutrition", createNutritionResponse(nutrition),
                    "source", nutrition.getSource(),
                    "message", "–ü–∏—Ç–∞—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞"
            ));
            
        } catch (NutritionNotFoundException e) {
            log.warn("‚ùå –ü—Ä–æ–¥—É–∫—Ç '{}' –Ω–µ –Ω–∞–π–¥–µ–Ω", foodName);
            return ResponseEntity.status(404).body(Map.of(
                    "success", false,
                    "error", "NOT_FOUND",
                    "message", "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: " + foodName,
                    "suggestion", "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ"
            ));
            
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è '{}': {}", foodName, e.getMessage());
            return ResponseEntity.internalServerError().body(Map.of(
                    "success", false,
                    "error", "INTERNAL_ERROR",
                    "message", "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"
            ));
        }
    }
    
    /**
     * –ü–∞–∫–µ—Ç–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
     */
    @PostMapping("/batch-search")
    public ResponseEntity<Map<String, Object>> batchSearch(@RequestBody Map<String, Object> request) {
        try {
            @SuppressWarnings("unchecked")
            java.util.List<Map<String, Object>> foods = (java.util.List<Map<String, Object>>) request.get("foods");
            
            java.util.List<Map<String, Object>> results = new java.util.ArrayList<>();
            int found = 0;
            int notFound = 0;
            
            for (Map<String, Object> food : foods) {
                String foodName = (String) food.get("name");
                double weight = food.containsKey("weight") ? 
                              ((Number) food.get("weight")).doubleValue() : 100.0;
                
                try {
                    NutritionInfo nutrition = nutritionApiService.getNutrition(foodName, weight);
                    results.add(Map.of(
                            "name", foodName,
                            "success", true,
                            "nutrition", createNutritionResponse(nutrition),
                            "source", nutrition.getSource()
                    ));
                    found++;
                    
                } catch (NutritionNotFoundException e) {
                    results.add(Map.of(
                            "name", foodName,
                            "success", false,
                            "error", "NOT_FOUND"
                    ));
                    notFound++;
                }
            }
            
            return ResponseEntity.ok(Map.of(
                    "success", true,
                    "results", results,
                    "summary", Map.of(
                            "total", foods.size(),
                            "found", found,
                            "notFound", notFound
                    )
            ));
            
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: {}", e.getMessage());
            return ResponseEntity.badRequest().body(Map.of(
                    "success", false,
                    "error", "INVALID_REQUEST",
                    "message", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞"
            ));
        }
    }
    
    /**
     * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö API –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–∏—Ç–∞–Ω–∏—è
     */
    @GetMapping("/statistics")
    public ResponseEntity<Map<String, Object>> getStatistics() {
        try {
            NutritionApiService.NutritionApiStats stats = nutritionApiService.getStatistics();
            
            return ResponseEntity.ok(Map.of(
                    "success", true,
                    "statistics", Map.of(
                            "sources", Map.of(
                                    "fatSecret", Map.of(
                                            "available", stats.isFatSecretAvailable(),
                                            "details", stats.getFatSecretStats()
                                    ),
                                    "usda", Map.of(
                                            "available", stats.isUsdaAvailable(),
                                            "details", "TODO: Implement USDA FDC"
                                    ),
                                    "edamam", Map.of(
                                            "available", stats.isEdamamAvailable(),
                                            "details", "TODO: Implement Edamam"
                                    ),
                                    "localDb", Map.of(
                                            "available", stats.isLocalDbAvailable(),
                                            "details", "TODO: Implement Local Database"
                                    )
                            ),
                            "performance", Map.of(
                                    "totalRequests", stats.getTotalRequests(),
                                    "cacheHitRate", String.format("%.1f%%", stats.getCacheHitRate() * 100),
                                    "averageResponseTime", stats.getAverageResponseTime() + "ms"
                            ),
                            "economics", Map.of(
                                    "monthlySavings", "$" + stats.getMonthlySavings(),
                                    "yearlyProjection", "$" + (stats.getMonthlySavings() * 12),
                                    "costPerRequest", "$0 (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ API)",
                                    "vsCommercialApis", "97% —ç–∫–æ–Ω–æ–º–∏—è"
                            )
                    ),
                    "anySourceAvailable", nutritionApiService.isAnySourceAvailable()
            ));
            
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {}", e.getMessage());
            return ResponseEntity.internalServerError().body(Map.of(
                    "success", false,
                    "error", "STATS_ERROR",
                    "message", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
            ));
        }
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫—ç—à–µ–π –ø–∏—Ç–∞–Ω–∏—è
     */
    @DeleteMapping("/cache")
    public ResponseEntity<Map<String, Object>> clearCaches() {
        try {
            nutritionApiService.clearAllCaches();
            
            return ResponseEntity.ok(Map.of(
                    "success", true,
                    "message", "–í—Å–µ –∫—ç—à–∏ –ø–∏—Ç–∞–Ω–∏—è –æ—á–∏—â–µ–Ω—ã",
                    "action", "cache_cleared"
            ));
            
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–µ–π: {}", e.getMessage());
            return ResponseEntity.internalServerError().body(Map.of(
                    "success", false,
                    "error", "CACHE_ERROR",
                    "message", "–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–µ–π"
            ));
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
     */
    @GetMapping("/health")
    public ResponseEntity<Map<String, Object>> healthCheck() {
        try {
            boolean anyAvailable = nutritionApiService.isAnySourceAvailable();
            
            return ResponseEntity.ok(Map.of(
                    "success", true,
                    "healthy", anyAvailable,
                    "status", anyAvailable ? "OK" : "DEGRADED",
                    "message", anyAvailable ? 
                              "–•–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–µ–Ω" : 
                              "–í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–∏—Ç–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
                    "timestamp", java.time.LocalDateTime.now().toString()
            ));
            
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {}", e.getMessage());
            return ResponseEntity.internalServerError().body(Map.of(
                    "success", false,
                    "healthy", false,
                    "status", "ERROR",
                    "message", "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤"
            ));
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ JSON –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
     */
    private Map<String, Object> createNutritionResponse(NutritionInfo nutrition) {
        return Map.of(
                "name", nutrition.getName(),
                "weight", nutrition.getWeight(),
                "calories", nutrition.getCalories(),
                "macros", Map.of(
                        "protein", nutrition.getProtein(),
                        "carbohydrates", nutrition.getCarbohydrates(),
                        "fat", nutrition.getFat()
                ),
                "additional", Map.of(
                        "fiber", nutrition.getFiber(),
                        "sugar", nutrition.getSugar(),
                        "sodium", nutrition.getSodium()
                ),
                "vitamins", Map.of(
                        "vitaminC", nutrition.getVitaminC(),
                        "calcium", nutrition.getCalcium(),
                        "iron", nutrition.getIron(),
                        "potassium", nutrition.getPotassium()
                ),
                "metadata", Map.of(
                        "source", nutrition.getSource(),
                        "fetchedAt", nutrition.getFetchedAt().toString(),
                        "valid", nutrition.isValid()
                )
        );
    }
} 