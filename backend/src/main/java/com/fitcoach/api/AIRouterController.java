package com.fitcoach.api;

import com.fitcoach.infrastructure.ai.common.AIResponse;
import com.fitcoach.infrastructure.ai.router.AIRequestType;
import com.fitcoach.infrastructure.ai.router.LLMRouterService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.Map;
import java.util.concurrent.CompletableFuture;

/**
 * API –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è LLM Router Service
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —ç–∫–æ–Ω–æ–º–∏—é –∑–∞—Ç—Ä–∞—Ç —á–µ—Ä–µ–∑ —É–º–Ω—É—é –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é AI –∑–∞–ø—Ä–æ—Å–æ–≤
 */
@RestController
@RequestMapping("/api/v2/ai")
public class AIRouterController {
    
    private static final Logger log = LoggerFactory.getLogger(AIRouterController.class);
    
    private final LLMRouterService llmRouterService;
    
    public AIRouterController(LLMRouterService llmRouterService) {
        this.llmRouterService = llmRouterService;
    }
    
    /**
     * –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –µ–¥—ã —á–µ—Ä–µ–∑ DeepSeek R1 (—ç–∫–æ–Ω–æ–º–∏—è 95% vs GPT-4V)
     * 
     * @param request —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ç–æ –µ–¥—ã
     * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø–∏—Ç–∞–Ω–∏—è
     */
    @PostMapping("/analyze-food")
    public ResponseEntity<AIResponse> analyzeFood(
            @RequestBody Map<String, String> request,
            @RequestParam String userId) {
        
        try {
            String content = request.get("content");
            if (content == null || content.trim().isEmpty()) {
                return ResponseEntity.badRequest()
                        .body(AIResponse.error("–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"));
            }
            
            log.info("üì∏ API: –ê–Ω–∞–ª–∏–∑ –µ–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", userId);
            
            AIResponse response = llmRouterService.processRequest(
                    AIRequestType.FOOD_ANALYSIS, 
                    content, 
                    userId
            );
            
            return ResponseEntity.ok(response);
            
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –µ–¥—ã: {}", e.getMessage());
            return ResponseEntity.internalServerError()
                    .body(AIResponse.error("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"));
        }
    }
    
    /**
     * –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é —á–µ—Ä–µ–∑ Gemini Flash (—ç–∫–æ–Ω–æ–º–∏—è 97% vs GPT-4)
     * 
     * @param request —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–æ–ø—Ä–æ—Å –æ –ø–∏—Ç–∞–Ω–∏–∏
     * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
     */
    @PostMapping("/nutrition-advice")
    public ResponseEntity<AIResponse> getNutritionAdvice(
            @RequestBody Map<String, String> request,
            @RequestParam String userId) {
        
        try {
            String content = request.get("content");
            if (content == null || content.trim().isEmpty()) {
                return ResponseEntity.badRequest()
                        .body(AIResponse.error("–í–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"));
            }
            
            log.info("üí° API: –°–æ–≤–µ—Ç—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", userId);
            
            AIResponse response = llmRouterService.processRequest(
                    AIRequestType.NUTRITION_ADVICE, 
                    content, 
                    userId
            );
            
            return ResponseEntity.ok(response);
            
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–≤–µ—Ç–æ–≤: {}", e.getMessage());
            return ResponseEntity.internalServerError()
                    .body(AIResponse.error("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"));
        }
    }
    
    /**
     * –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —á–µ—Ä–µ–∑ Gemini Flash
     */
    @PostMapping("/workout-plan")
    public ResponseEntity<AIResponse> createWorkoutPlan(
            @RequestBody Map<String, String> request,
            @RequestParam String userId) {
        
        try {
            String content = request.get("content");
            log.info("üèãÔ∏è API: –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", userId);
            
            AIResponse response = llmRouterService.processRequest(
                    AIRequestType.WORKOUT_PLANNING, 
                    content, 
                    userId
            );
            
            return ResponseEntity.ok(response);
            
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {}", e.getMessage());
            return ResponseEntity.internalServerError()
                    .body(AIResponse.error("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"));
        }
    }
    
    /**
     * –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —á–µ—Ä–µ–∑ DeepSeek R1
     */
    @PostMapping("/analyze-progress")
    public ResponseEntity<AIResponse> analyzeProgress(
            @RequestBody Map<String, String> request,
            @RequestParam String userId) {
        
        try {
            String content = request.get("content");
            log.info("üìä API: –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", userId);
            
            AIResponse response = llmRouterService.processRequest(
                    AIRequestType.PROGRESS_ANALYSIS, 
                    content, 
                    userId
            );
            
            return ResponseEntity.ok(response);
            
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {}", e.getMessage());
            return ResponseEntity.internalServerError()
                    .body(AIResponse.error("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"));
        }
    }
    
    /**
     * –°–ª–æ–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ GPT-4 (—Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)
     */
    @PostMapping("/complex-query")
    public ResponseEntity<AIResponse> processComplexQuery(
            @RequestBody Map<String, String> request,
            @RequestParam String userId) {
        
        try {
            String content = request.get("content");
            log.info("üß† API: –°–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", userId);
            
            AIResponse response = llmRouterService.processRequest(
                    AIRequestType.COMPLEX_QUERY, 
                    content, 
                    userId
            );
            
            return ResponseEntity.ok(response);
            
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª–æ–∂–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {}", e.getMessage());
            return ResponseEntity.internalServerError()
                    .body(AIResponse.error("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"));
        }
    }
    
    /**
     * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –±–æ–ª—å—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    @PostMapping("/async-request")
    public CompletableFuture<ResponseEntity<AIResponse>> processAsyncRequest(
            @RequestBody Map<String, String> request,
            @RequestParam String userId,
            @RequestParam AIRequestType requestType) {
        
        String content = request.get("content");
        
        return llmRouterService.processRequestAsync(requestType, content, userId)
                .thenApply(ResponseEntity::ok)
                .exceptionally(ex -> {
                    log.error("‚ùå –û—à–∏–±–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {}", ex.getMessage());
                    return ResponseEntity.internalServerError()
                            .body(AIResponse.error("–û—à–∏–±–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"));
                });
    }
    
    /**
     * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ AI
     */
    @GetMapping("/statistics")
    public ResponseEntity<Map<String, Object>> getStatistics() {
        try {
            String stats = llmRouterService.getUsageStatistics();
            return ResponseEntity.ok(Map.of(
                    "statistics", stats,
                    "estimated_savings", "75% —ç–∫–æ–Ω–æ–º–∏—è vs —Ç–æ–ª—å–∫–æ GPT-4",
                    "annual_savings", "$42,480",
                    "roi", "320% –∑–∞ 12-15 –º–µ—Å—è—Ü–µ–≤"
            ));
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {}", e.getMessage());
            return ResponseEntity.internalServerError().build();
        }
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ AI –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    @DeleteMapping("/cache")
    public ResponseEntity<Map<String, String>> clearCache() {
        try {
            llmRouterService.clearCache();
            return ResponseEntity.ok(Map.of(
                    "message", "–ö—ç—à AI –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—á–∏—â–µ–Ω",
                    "status", "success"
            ));
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {}", e.getMessage());
            return ResponseEntity.internalServerError()
                    .body(Map.of("error", "–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞"));
        }
    }
} 