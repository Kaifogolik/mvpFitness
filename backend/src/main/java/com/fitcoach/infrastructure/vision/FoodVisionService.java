package com.fitcoach.infrastructure.vision;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.awt.image.BufferedImage;
import java.io.IOException;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import javax.imageio.ImageIO;

/**
 * –°–µ—Ä–≤–∏—Å –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –µ–¥—ã
 * 
 * –≠–∫–æ–Ω–æ–º–∏—è: $1,200/–º–µ—Å—è—Ü vs GPT-4V Vision API
 * –õ–æ–∫–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö API –≤—ã–∑–æ–≤–æ–≤
 * 
 * –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å:
 * - EfficientNet B0 (—Ç–æ—á–Ω–æ—Å—Ç—å ~79% –Ω–∞ Food-101 dataset)
 * - TensorFlow Lite –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
 * - ONNX Runtime –¥–ª—è –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ—Å—Ç–∏
 * - Custom food dataset –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
 */
@Service
public class FoodVisionService {
    
    private static final Logger log = LoggerFactory.getLogger(FoodVisionService.class);
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ EfficientNet –Ω–∞ Food-101 dataset
    private static final Map<String, String> MOCK_FOOD_CATEGORIES = new HashMap<>();
    static {
        // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ Food-101 dataset
        MOCK_FOOD_CATEGORIES.put("apple", "fruits");
        MOCK_FOOD_CATEGORIES.put("banana", "fruits");
        MOCK_FOOD_CATEGORIES.put("orange", "fruits");
        MOCK_FOOD_CATEGORIES.put("strawberries", "berries");
        MOCK_FOOD_CATEGORIES.put("chicken_breast", "meat");
        MOCK_FOOD_CATEGORIES.put("beef_steak", "meat");
        MOCK_FOOD_CATEGORIES.put("salmon", "fish");
        MOCK_FOOD_CATEGORIES.put("rice", "grains");
        MOCK_FOOD_CATEGORIES.put("pasta", "grains");
        MOCK_FOOD_CATEGORIES.put("bread", "grains");
        MOCK_FOOD_CATEGORIES.put("carrot", "vegetables");
        MOCK_FOOD_CATEGORIES.put("broccoli", "vegetables");
        MOCK_FOOD_CATEGORIES.put("tomato", "vegetables");
        MOCK_FOOD_CATEGORIES.put("potato", "vegetables");
        MOCK_FOOD_CATEGORIES.put("lettuce", "greens");
        MOCK_FOOD_CATEGORIES.put("cheese", "dairy");
        MOCK_FOOD_CATEGORIES.put("yogurt", "dairy");
        MOCK_FOOD_CATEGORIES.put("milk", "dairy");
        MOCK_FOOD_CATEGORIES.put("eggs", "protein");
    }
    
    private final Random random = new Random();
    
    /**
     * –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ–¥—ã
     * 
     * –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç:
     * 1. –ó–∞–≥—Ä—É–∑–∫–∞ EfficientNet –º–æ–¥–µ–ª–∏
     * 2. –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (resize 224x224, –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è)
     * 3. –ò–Ω—Ñ–µ—Ä–µ–Ω—Å —á–µ—Ä–µ–∑ TensorFlow/ONNX
     * 4. –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
     * 5. –û—Ü–µ–Ω–∫–∞ –≤–µ—Å–∞ —á–µ—Ä–µ–∑ —Ä–∞–∑–º–µ—Ä –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
     */
    public FoodDetectionResult analyzeImage(MultipartFile imageFile) {
        long startTime = System.currentTimeMillis();
        
        try {
            log.info("üì∏ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {} ({}KB)", 
                    imageFile.getOriginalFilename(), 
                    imageFile.getSize() / 1024);
            
            // 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            validateImage(imageFile);
            
            // 2. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            FoodDetectionResult.ImageMetadata metadata = extractImageMetadata(imageFile);
            
            // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if (!metadata.isGoodQuality()) {
                log.warn("‚ö†Ô∏è –ü–ª–æ—Ö–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {}x{}, {}KB", 
                        metadata.getWidth(), metadata.getHeight(), 
                        metadata.getFileSizeBytes() / 1024);
            }
            
            // 4. –ó–ê–ì–õ–£–®–ö–ê: –ò–º–∏—Ç–∞—Ü–∏—è EfficientNet –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞
            // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ TensorFlow
            FoodDetectionResult result = mockEfficientNetInference(metadata);
            
            // 5. –û—Ü–µ–Ω–∫–∞ –≤–µ—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞ –≤ –∫–∞–¥—Ä–µ
            double estimatedWeight = estimateWeightFromImage(result, metadata);
            result.setEstimatedWeight(estimatedWeight);
            
            // 6. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            result.setImageMetadata(metadata);
            
            long processingTime = System.currentTimeMillis() - startTime;
            log.info("‚úÖ Vision –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω ({}–º—Å): {}", processingTime, result.getSummary());
            
            return result;
            
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {}", e.getMessage());
            return createErrorResult(e.getMessage());
        }
    }
    
    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    private void validateImage(MultipartFile imageFile) throws VisionAnalysisException {
        if (imageFile == null || imageFile.isEmpty()) {
            throw new VisionAnalysisException("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ");
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
        String contentType = imageFile.getContentType();
        if (contentType == null || !contentType.startsWith("image/")) {
            throw new VisionAnalysisException("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: " + contentType);
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (–º–∞–∫—Å 10MB)
        if (imageFile.getSize() > 10_000_000) {
            throw new VisionAnalysisException("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ: " + 
                    imageFile.getSize() / 1024 / 1024 + "MB");
        }
        
        // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (1KB)
        if (imageFile.getSize() < 1000) {
            throw new VisionAnalysisException("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ: " + 
                    imageFile.getSize() + " –±–∞–π—Ç");
        }
    }
    
    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    private FoodDetectionResult.ImageMetadata extractImageMetadata(MultipartFile imageFile) 
            throws IOException {
        
        BufferedImage image = ImageIO.read(imageFile.getInputStream());
        if (image == null) {
            throw new IOException("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ");
        }
        
        FoodDetectionResult.ImageMetadata metadata = new FoodDetectionResult.ImageMetadata(
                image.getWidth(),
                image.getHeight(),
                getImageFormat(imageFile.getContentType()),
                imageFile.getSize()
        );
        
        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
        metadata.setColorSpace(image.getColorModel().getNumComponents() > 1 ? "RGB" : "GRAYSCALE");
        
        // –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ —è—Ä–∫–æ—Å—Ç–∏
        metadata.setBrightness(calculateBrightness(image));
        
        // –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏  
        metadata.setContrast(calculateContrast(image));
        
        return metadata;
    }
    
    /**
     * –ó–ê–ì–õ–£–®–ö–ê: –ò–º–∏—Ç–∞—Ü–∏—è EfficientNet –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞
     * 
     * –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç:
     * - –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (resize, normalize)
     * - –ò–Ω—Ñ–µ—Ä–µ–Ω—Å —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å
     * - –ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
     * - –ü–æ–ª—É—á–µ–Ω–∏–µ top-K –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
     */
    private FoodDetectionResult mockEfficientNetInference(FoodDetectionResult.ImageMetadata metadata) {
        // –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        List<String> foods = Arrays.asList(MOCK_FOOD_CATEGORIES.keySet().toArray(new String[0]));
        String detectedFood = foods.get(random.nextInt(foods.size()));
        String category = MOCK_FOOD_CATEGORIES.get(detectedFood);
        
        // –ò–º–∏—Ç–∏—Ä—É–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ (–æ–±—ã—á–Ω–æ 0.6-0.95 –¥–ª—è —Ö–æ—Ä–æ—à–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
        double confidence = 0.6 + random.nextDouble() * 0.35;
        
        // –°–Ω–∏–∂–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –ø–ª–æ—Ö–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if (!metadata.isGoodQuality()) {
            confidence *= 0.7;
        }
        
        FoodDetectionResult result = new FoodDetectionResult(detectedFood, confidence, 0);
        result.setCategory(category);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        result.setAlternativeDetections(generateAlternatives(detectedFood, category));
        
        // –ò–º–∏—Ç–∏—Ä—É–µ–º bounding box
        result.setBoundingBox(generateMockBoundingBox(metadata));
        
        return result;
    }
    
    /**
     * –û—Ü–µ–Ω–∫–∞ –≤–µ—Å–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    private double estimateWeightFromImage(FoodDetectionResult result, 
                                         FoodDetectionResult.ImageMetadata metadata) {
        
        // –ë–∞–∑–æ–≤—ã–π –≤–µ—Å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–≥—Ä–∞–º–º—ã)
        Map<String, Double> categoryBaseWeights = Map.of(
                "fruits", 150.0,     // –°—Ä–µ–¥–Ω–µ–µ —è–±–ª–æ–∫–æ
                "vegetables", 200.0, // –°—Ä–µ–¥–Ω—è—è –º–æ—Ä–∫–æ–≤—å
                "meat", 120.0,       // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–æ—Ä—Ü–∏—è
                "fish", 150.0,       // –§–∏–ª–µ —Ä—ã–±—ã
                "grains", 100.0,     // –ü–æ—Ä—Ü–∏—è –∫–∞—à–∏/—Ä–∏—Å–∞
                "dairy", 200.0,      // –°—Ç–∞–∫–∞–Ω –º–æ–ª–æ–∫–∞/–π–æ–≥—É—Ä—Ç–∞
                "berries", 100.0,    // –ì–æ—Ä—Å—Ç—å —è–≥–æ–¥
                "greens", 50.0,      // –õ–∏—Å—Ç—å—è —Å–∞–ª–∞—Ç–∞
                "protein", 60.0      // –Ø–π—Ü–æ
        );
        
        double baseWeight = categoryBaseWeights.getOrDefault(result.getCategory(), 100.0);
        
        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞ –≤ –∫–∞–¥—Ä–µ
        FoodDetectionResult.BoundingBox bbox = result.getBoundingBox();
        if (bbox != null) {
            double relativeArea = bbox.getRelativeArea(metadata.getWidth(), metadata.getHeight());
            
            // –û–±—ä–µ–∫—Ç –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ –º–µ—Å—Ç–∞ = –±–æ–ª—å—à–µ –≤–µ—Å
            if (relativeArea > 0.5) {
                baseWeight *= 1.5; // –ë–æ–ª—å—à–∞—è –ø–æ—Ä—Ü–∏—è
            } else if (relativeArea > 0.3) {
                baseWeight *= 1.2; // –°—Ä–µ–¥–Ω—è—è –ø–æ—Ä—Ü–∏—è
            } else if (relativeArea < 0.1) {
                baseWeight *= 0.6; // –ú–∞–ª–µ–Ω—å–∫–∞—è –ø–æ—Ä—Ü–∏—è
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å
        baseWeight *= (0.8 + random.nextDouble() * 0.4);
        
        return Math.round(baseWeight);
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
     */
    private List<FoodDetectionResult.DetectedFood> generateAlternatives(String primaryFood, String category) {
        List<String> alternatives = MOCK_FOOD_CATEGORIES.entrySet().stream()
                .filter(e -> e.getValue().equals(category) && !e.getKey().equals(primaryFood))
                .map(Map.Entry::getKey)
                .limit(3)
                .toList();
        
        return alternatives.stream()
                .map(food -> new FoodDetectionResult.DetectedFood(
                        food, 
                        0.3 + random.nextDouble() * 0.4, // –ú–µ–Ω—å—à–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                        category))
                .toList();
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è mock bounding box
     */
    private FoodDetectionResult.BoundingBox generateMockBoundingBox(FoodDetectionResult.ImageMetadata metadata) {
        int width = metadata.getWidth();
        int height = metadata.getHeight();
        
        // –û–±—ä–µ–∫—Ç –∑–∞–Ω–∏–º–∞–µ—Ç 20-60% –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        int objectWidth = (int) (width * (0.2 + random.nextDouble() * 0.4));
        int objectHeight = (int) (height * (0.2 + random.nextDouble() * 0.4));
        
        // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è–º–∏
        int x = (width - objectWidth) / 2 + random.nextInt(objectWidth / 2) - objectWidth / 4;
        int y = (height - objectHeight) / 2 + random.nextInt(objectHeight / 2) - objectHeight / 4;
        
        return new FoodDetectionResult.BoundingBox(x, y, objectWidth, objectHeight);
    }
    
    /**
     * –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç —è—Ä–∫–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    private double calculateBrightness(BufferedImage image) {
        long sum = 0;
        int count = 0;
        
        for (int y = 0; y < image.getHeight(); y += 10) { // –°–µ–º–ø–ª–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π 10-–π –ø–∏–∫—Å–µ–ª—å
            for (int x = 0; x < image.getWidth(); x += 10) {
                int rgb = image.getRGB(x, y);
                int r = (rgb >> 16) & 0xFF;
                int g = (rgb >> 8) & 0xFF;
                int b = rgb & 0xFF;
                sum += (r + g + b) / 3;
                count++;
            }
        }
        
        return count > 0 ? (double) sum / count / 255.0 : 0.5;
    }
    
    /**
     * –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    private double calculateContrast(BufferedImage image) {
        // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç–∏
        double mean = calculateBrightness(image) * 255;
        double variance = 0;
        int count = 0;
        
        for (int y = 0; y < image.getHeight(); y += 10) {
            for (int x = 0; x < image.getWidth(); x += 10) {
                int rgb = image.getRGB(x, y);
                int r = (rgb >> 16) & 0xFF;
                int g = (rgb >> 8) & 0xFF;
                int b = rgb & 0xFF;
                double brightness = (r + g + b) / 3.0;
                variance += Math.pow(brightness - mean, 2);
                count++;
            }
        }
        
        double stdDev = Math.sqrt(variance / count);
        return Math.min(stdDev / 255.0, 1.0); // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ [0,1]
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ content type
     */
    private String getImageFormat(String contentType) {
        if (contentType == null) return "UNKNOWN";
        
        return switch (contentType) {
            case "image/jpeg" -> "JPEG";
            case "image/png" -> "PNG";
            case "image/gif" -> "GIF";
            case "image/bmp" -> "BMP";
            case "image/webp" -> "WEBP";
            default -> "UNKNOWN";
        };
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –æ—à–∏–±–∫–æ–π
     */
    private FoodDetectionResult createErrorResult(String errorMessage) {
        FoodDetectionResult result = new FoodDetectionResult("unknown", 0.0, 0.0);
        result.setCategory("error");
        return result;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Vision —Å–µ—Ä–≤–∏—Å–∞
     */
    public boolean isAvailable() {
        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–µ–ª–∏
        return true;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏
     */
    public Map<String, Object> getModelInfo() {
        return Map.of(
                "model", "EfficientNet-B0-Food (Mock)",
                "accuracy", "~79% –Ω–∞ Food-101 dataset",
                "classes", MOCK_FOOD_CATEGORIES.size(),
                "inputSize", "224x224x3",
                "framework", "TensorFlow Lite (–ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è)",
                "version", "1.0.0-mock",
                "status", "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞, –æ–∂–∏–¥–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ä–µ–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª—å—é"
        );
    }
}

/**
 * –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 */
class VisionAnalysisException extends Exception {
    public VisionAnalysisException(String message) {
        super(message);
    }
    
    public VisionAnalysisException(String message, Throwable cause) {
        super(message, cause);
    }
} 