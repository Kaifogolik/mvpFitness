package com.fitcoach.infrastructure.nutrition.fatsecret;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fitcoach.infrastructure.nutrition.NutritionInfo;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestTemplate;

import java.time.Duration;
import java.time.LocalDateTime;
import java.util.Base64;
import java.util.Optional;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å FatSecret API
 * 
 * –≠–∫–æ–Ω–æ–º–∏—è: $290/–º–µ—Å—è—Ü vs –ø–ª–∞—Ç–Ω—ã–µ Nutrition APIs
 * 
 * FatSecret –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–∏—Ç–∞–Ω–∏—è
 * –¥–æ 500 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å —Å OAuth 2.0 Client Credentials flow
 */
@Service
public class FatSecretService {
    
    private static final Logger log = LoggerFactory.getLogger(FatSecretService.class);
    
    private static final String FATSECRET_BASE_URL = "https://platform.fatsecret.com/rest/server.api";
    private static final String OAUTH_TOKEN_URL = "https://oauth.fatsecret.com/connect/token";
    
    @Value("${app.nutrition.fatsecret.client-id:}")
    private String clientId;
    
    @Value("${app.nutrition.fatsecret.client-secret:}")
    private String clientSecret;
    
    private final RestTemplate restTemplate;
    private final RedisTemplate<String, String> redisTemplate;
    private final ObjectMapper objectMapper;
    
    public FatSecretService(RestTemplate restTemplate, 
                           RedisTemplate<String, String> redisTemplate,
                           ObjectMapper objectMapper) {
        this.restTemplate = restTemplate;
        this.redisTemplate = redisTemplate;
        this.objectMapper = objectMapper;
    }
    
    /**
     * –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
     * 
     * @param foodName –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
     * @param weight –≤–µ—Å –ø–æ—Ä—Ü–∏–∏ –≤ –≥—Ä–∞–º–º–∞—Ö
     * @return –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–ª–∏ –ø—É—Å—Ç–æ–π Optional
     */
    public Optional<NutritionInfo> search(String foodName, double weight) {
        try {
            log.info("üîç FatSecret –ø–æ–∏—Å–∫: '{}' ({}–≥)", foodName, weight);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            String cacheKey = "fatsecret:search:" + foodName.toLowerCase();
            String cachedResult = getCachedResult(cacheKey);
            if (cachedResult != null) {
                log.info("‚úÖ –ù–∞–π–¥–µ–Ω –∫—ç—à –¥–ª—è '{}'", foodName);
                NutritionInfo cached = NutritionInfo.fromJson(cachedResult);
                return Optional.of(cached.scaleToWeight(weight));
            }
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞
            String accessToken = getAccessToken();
            if (accessToken == null) {
                log.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω FatSecret");
                return Optional.empty();
            }
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            Optional<FatSecretFood> foodResult = searchFood(accessToken, foodName);
            if (foodResult.isEmpty()) {
                log.warn("‚ö†Ô∏è –ü—Ä–æ–¥—É–∫—Ç '{}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ FatSecret", foodName);
                return Optional.empty();
            }
            
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ NutritionInfo
            FatSecretFood food = foodResult.get();
            NutritionInfo nutritionInfo = convertToNutritionInfo(food, weight);
            
            // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ 24 —á–∞—Å–∞
            cacheResult(cacheKey, nutritionInfo.scaleToWeight(100)); // –ö—ç—à–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é –ø–æ—Ä—Ü–∏—é 100–≥
            
            log.info("‚úÖ FatSecret —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {}", nutritionInfo.getSummary());
            return Optional.of(nutritionInfo);
            
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ FatSecret API –¥–ª—è '{}': {}", foodName, e.getMessage());
            return Optional.empty();
        }
    }
    
    /**
     * –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–∞ —á–µ—Ä–µ–∑ FatSecret API
     */
    private Optional<FatSecretFood> searchFood(String accessToken, String foodName) {
        try {
            String url = FATSECRET_BASE_URL + "?method=foods.search&search_expression=" + 
                        foodName.replace(" ", "%20") + "&format=json&max_results=1";
            
            HttpHeaders headers = new HttpHeaders();
            headers.setBearerAuth(accessToken);
            headers.setContentType(MediaType.APPLICATION_JSON);
            
            HttpEntity<String> entity = new HttpEntity<>(headers);
            
            log.debug("üåê FatSecret –∑–∞–ø—Ä–æ—Å: {}", url);
            
            ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.GET, entity, String.class);
            
            if (response.getStatusCode() == HttpStatus.OK && response.getBody() != null) {
                FatSecretSearchResponse searchResponse = objectMapper.readValue(
                    response.getBody(), FatSecretSearchResponse.class);
                
                return searchResponse.getFirstFood();
            }
            
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ FatSecret: {}", e.getMessage());
        }
        
        return Optional.empty();
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ OAuth 2.0 —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞
     */
    private String getAccessToken() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à —Ç–æ–∫–µ–Ω–∞
        String cachedToken = getCachedResult("fatsecret:token");
        if (cachedToken != null) {
            return cachedToken;
        }
        
        try {
            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º Basic Auth –∑–∞–≥–æ–ª–æ–≤–æ–∫
            String credentials = clientId + ":" + clientSecret;
            String encodedCredentials = Base64.getEncoder().encodeToString(credentials.getBytes());
            
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);
            headers.set("Authorization", "Basic " + encodedCredentials);
            
            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
            MultiValueMap<String, String> body = new LinkedMultiValueMap<>();
            body.add("grant_type", "client_credentials");
            body.add("scope", "basic");
            
            HttpEntity<MultiValueMap<String, String>> entity = new HttpEntity<>(body, headers);
            
            log.debug("üîê –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ FatSecret OAuth 2.0");
            
            ResponseEntity<String> response = restTemplate.postForEntity(OAUTH_TOKEN_URL, entity, String.class);
            
            if (response.getStatusCode() == HttpStatus.OK && response.getBody() != null) {
                JsonNode tokenResponse = objectMapper.readTree(response.getBody());
                String accessToken = tokenResponse.get("access_token").asText();
                int expiresIn = tokenResponse.get("expires_in").asInt();
                
                // –ö—ç—à–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ –≤—Ä–µ–º—è –µ–≥–æ –∂–∏–∑–Ω–∏ (–º–∏–Ω—É—Å 5 –º–∏–Ω—É—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
                cacheResult("fatsecret:token", accessToken, Duration.ofSeconds(expiresIn - 300));
                
                log.info("‚úÖ –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω FatSecret, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω {} —Å–µ–∫—É–Ω–¥", expiresIn);
                return accessToken;
            }
            
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ FatSecret: {}", e.getMessage());
        }
        
        return null;
    }
    
    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è FatSecretFood –≤ NutritionInfo
     */
    private NutritionInfo convertToNutritionInfo(FatSecretFood food, double weight) {
        double baseWeight = food.getBaseWeight(); // –û–±—ã—á–Ω–æ 100–≥
        double calories = food.extractCalories();
        double protein = food.extractProtein();
        double fat = food.extractFat();
        double carbs = food.extractCarbs();
        
        // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ 100–≥, –∑–∞—Ç–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º
        NutritionInfo baseInfo = NutritionInfo.builder()
                .name(food.getFoodName())
                .calories(calories)
                .protein(protein)
                .carbohydrates(carbs)
                .fat(fat)
                .weight(baseWeight)
                .source("FatSecret")
                .build();
        
        // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –Ω–∞ –Ω—É–∂–Ω—ã–π –≤–µ—Å
        return baseInfo.scaleToWeight(weight);
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–∑ –∫—ç—à–∞
     */
    private String getCachedResult(String key) {
        if (redisTemplate != null) {
            try {
                return redisTemplate.opsForValue().get(key);
            } catch (Exception e) {
                log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—ç—à—É: {}", e.getMessage());
            }
        }
        return null;
    }
    
    /**
     * –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
     */
    private void cacheResult(String key, Object value) {
        cacheResult(key, value, Duration.ofHours(24));
    }
    
    private void cacheResult(String key, Object value, Duration ttl) {
        if (redisTemplate != null) {
            try {
                String json = value instanceof String ? (String) value : 
                             value instanceof NutritionInfo ? ((NutritionInfo) value).toJson() : 
                             objectMapper.writeValueAsString(value);
                redisTemplate.opsForValue().set(key, json, ttl);
                log.debug("üì¶ –ó–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {} –Ω–∞ {}", key, ttl);
            } catch (Exception e) {
                log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è: {}", e.getMessage());
            }
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ FatSecret API
     */
    public boolean isAvailable() {
        if (clientId == null || clientId.trim().isEmpty() || 
            clientSecret == null || clientSecret.trim().isEmpty()) {
            log.warn("‚ö†Ô∏è FatSecret API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ)");
            return false;
        }
        
        try {
            String token = getAccessToken();
            boolean available = token != null;
            log.info("üîç FatSecret API –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: {}", available ? "‚úÖ" : "‚ùå");
            return available;
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ FatSecret: {}", e.getMessage());
            return false;
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
     */
    public String getUsageStats() {
        try {
            // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            return String.format("FatSecret API: —Å—Ç–∞—Ç—É—Å=%s, requests_today=unknown", 
                    isAvailable() ? "–∞–∫—Ç–∏–≤–µ–Ω" : "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
        } catch (Exception e) {
            return "FatSecret API: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏";
        }
    }
} 