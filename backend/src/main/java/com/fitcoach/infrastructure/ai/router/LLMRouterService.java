package com.fitcoach.infrastructure.ai.router;

import com.fitcoach.infrastructure.ai.common.AIResponse;
import com.fitcoach.infrastructure.ai.deepseek.DeepSeekService;
import com.fitcoach.infrastructure.ai.gemini.GeminiFlashService;
import com.fitcoach.infrastructure.ai.OpenAIService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.data.redis.core.RedisTemplate;

import java.time.Duration;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

/**
 * –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ AI –∑–∞–ø—Ä–æ—Å–æ–≤
 * 
 * –≠–∫–æ–Ω–æ–º–∏—è –∑–∞—Ç—Ä–∞—Ç —á–µ—Ä–µ–∑ —É–º–Ω—É—é –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é:
 * - DeepSeek R1: $0.14/1M —Ç–æ–∫–µ–Ω–æ–≤ (95% —ç–∫–æ–Ω–æ–º–∏—è vs GPT-4V)
 * - Gemini 2.5 Flash: $0.075/1M —Ç–æ–∫–µ–Ω–æ–≤ (97% —ç–∫–æ–Ω–æ–º–∏—è vs GPT-4)
 * - GPT-4: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
 * 
 * –û–∂–∏–¥–∞–µ–º–∞—è —ç–∫–æ–Ω–æ–º–∏—è: $42,480/–≥–æ–¥ –ø—Ä–∏ ROI 320%
 */
@Service
public class LLMRouterService {
    
    private static final Logger log = LoggerFactory.getLogger(LLMRouterService.class);
    
    private final DeepSeekService deepSeekService;
    private final GeminiFlashService geminiFlashService;
    private final OpenAIService openAIService;
    private final RedisTemplate<String, String> redisTemplate;
    private final ExecutorService executorService;
    
    public LLMRouterService(DeepSeekService deepSeekService, 
                           GeminiFlashService geminiFlashService,
                           OpenAIService openAIService,
                           RedisTemplate<String, String> redisTemplate) {
        this.deepSeekService = deepSeekService;
        this.geminiFlashService = geminiFlashService;
        this.openAIService = openAIService;
        this.redisTemplate = redisTemplate;
        this.executorService = Executors.newCachedThreadPool();
        
        log.info("üöÄ LLM Router Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:");
        log.info("   - DeepSeek: {}", deepSeekService != null ? "‚úÖ" : "‚ùå");
        log.info("   - Gemini: {}", geminiFlashService != null ? "‚úÖ" : "‚ùå");
        log.info("   - OpenAI: {}", openAIService != null ? "‚úÖ" : "‚ùå");
        log.info("   - Redis: {}", redisTemplate != null ? "‚úÖ" : "‚ùå");
    }
    
    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ AI –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —É–º–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–µ–π
     */
    public AIResponse processRequest(AIRequestType requestType, String content, String userId) {
        long startTime = System.currentTimeMillis();
        
        try {
            log.info("ü§ñ AI –∑–∞–ø—Ä–æ—Å: —Ç–∏–ø={}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å={}, –¥–ª–∏–Ω–∞={}", 
                    requestType, userId, content.length());
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –¥–ª—è —á–∞—Å—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ Redis –¥–æ—Å—Ç—É–ø–µ–Ω)
            String cacheKey = buildCacheKey(requestType, content);
            if (redisTemplate != null) {
                try {
                    String cachedResult = redisTemplate.opsForValue().get(cacheKey);
                    if (cachedResult != null) {
                        log.info("‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –∏–∑ –∫—ç—à–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", userId);
                        AIResponse response = AIResponse.fromJson(cachedResult);
                        return response.withProcessingTime(System.currentTimeMillis() - startTime);
                    }
                } catch (Exception e) {
                    log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—ç—à—É Redis: {}", e.getMessage());
                }
            }
            
            // –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–º—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É
            AIResponse response = routeRequest(requestType, content, userId);
            
            // –ö—ç—à–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (–µ—Å–ª–∏ Redis –¥–æ—Å—Ç—É–ø–µ–Ω)
            if (response.isSuccessful() && redisTemplate != null) {
                cacheSuccessfulResponse(cacheKey, response, requestType);
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            response.withProcessingTime(System.currentTimeMillis() - startTime);
            
            log.info("‚úÖ AI –æ—Ç–≤–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {}", response.getLogSummary());
            
            return response;
            
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ AI –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}, —Ç–∏–ø {}: {}", 
                    userId, requestType, e.getMessage());
            
            return AIResponse.error("–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    .withProcessingTime(System.currentTimeMillis() - startTime);
        }
    }
    
    /**
     * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    public CompletableFuture<AIResponse> processRequestAsync(AIRequestType requestType, String content, String userId) {
        return CompletableFuture.supplyAsync(() -> processRequest(requestType, content, userId), executorService);
    }
    
    /**
     * –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–º—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É
     */
    private AIResponse routeRequest(AIRequestType requestType, String content, String userId) {
        return switch (requestType) {
            case FOOD_ANALYSIS -> {
                log.info("üì∏ –†–æ—É—Ç–∏–Ω–≥ –≤ DeepSeek –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –µ–¥—ã, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {}", userId);
                yield routeToDeepSeek(content, "–ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –µ–¥—ã");
            }
            
            case NUTRITION_ADVICE, CHAT_RESPONSE, WORKOUT_PLANNING -> {
                log.info("üí° –†–æ—É—Ç–∏–Ω–≥ –≤ Gemini Flash –¥–ª—è —Å–æ–≤–µ—Ç–æ–≤, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {}", userId);
                yield routeToGemini(content, "–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã");
            }
            
            case PROGRESS_ANALYSIS -> {
                log.info("üìä –†–æ—É—Ç–∏–Ω–≥ –≤ DeepSeek –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {}", userId);
                yield routeToDeepSeek(content, "–ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞");
            }
            
            case COMPLEX_QUERY -> {
                log.info("üß† –†–æ—É—Ç–∏–Ω–≥ –≤ GPT-4 –¥–ª—è —Å–ª–æ–∂–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {}", userId);
                yield routeToOpenAI(content, "–°–ª–æ–∂–Ω—ã–π –∞–Ω–∞–ª–∏–∑");
            }
            
            default -> {
                log.warn("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞: {}, –∏—Å–ø–æ–ª—å–∑—É–µ–º Gemini –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", requestType);
                yield routeToGemini(content, "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç");
            }
        };
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ DeepSeek R1 (—ç–∫–æ–Ω–æ–º–∏—è 95% vs GPT-4V)
     */
    private AIResponse routeToDeepSeek(String content, String context) {
        try {
            if (deepSeekService != null) {
                return deepSeekService.analyze(content, context);
            } else {
                log.warn("DeepSeek —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, fallback –Ω–∞ Gemini");
                return routeToGemini(content, context);
            }
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ DeepSeek: {}, fallback –Ω–∞ Gemini", e.getMessage());
            return routeToGemini(content, context);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ Gemini 2.5 Flash (—ç–∫–æ–Ω–æ–º–∏—è 97% vs GPT-4)
     */
    private AIResponse routeToGemini(String content, String context) {
        try {
            if (geminiFlashService != null) {
                return geminiFlashService.generateAdvice(content, context);
            } else {
                log.warn("Gemini —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, fallback –Ω–∞ OpenAI");
                return routeToOpenAI(content, context);
            }
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ Gemini: {}, fallback –Ω–∞ OpenAI", e.getMessage());
            return routeToOpenAI(content, context);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ OpenAI GPT-4 (–¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ª—É—á–∞–µ–≤)
     */
    private AIResponse routeToOpenAI(String content, String context) {
        try {
            return openAIService.processText(content, context);
        } catch (Exception e) {
            log.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - –≤—Å–µ AI —Å–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {}", e.getMessage());
            return AIResponse.error("–í—Å–µ AI —Å–µ—Ä–≤–∏—Å—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã", "system");
        }
    }
    
    /**
     * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–ª—é—á–∞ –∫—ç—à–∞
     */
    private String buildCacheKey(AIRequestType requestType, String content) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—ç—à –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞
        int contentHash = content.hashCode();
        return String.format("ai:cache:%s:%d", requestType.name().toLowerCase(), contentHash);
    }
    
    /**
     * –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Å —Ä–∞–∑–Ω—ã–º TTL
     */
    private void cacheSuccessfulResponse(String cacheKey, AIResponse response, AIRequestType requestType) {
        try {
            Duration ttl = getCacheTTL(requestType);
            redisTemplate.opsForValue().set(cacheKey, response.toJson(), ttl);
            log.debug("–û—Ç–≤–µ—Ç –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω –Ω–∞ {}", ttl);
        } catch (Exception e) {
            log.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç: {}", e.getMessage());
        }
    }
    
    /**
     * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ –∫—ç—à–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
     */
    private Duration getCacheTTL(AIRequestType requestType) {
        return switch (requestType) {
            case FOOD_ANALYSIS -> Duration.ofMinutes(30);  // –ï–¥–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è —á–∞—Å—Ç–æ
            case NUTRITION_ADVICE -> Duration.ofHours(2);  // –°–æ–≤–µ—Ç—ã –º–µ–Ω–µ–µ –¥–∏–Ω–∞–º–∏—á–Ω—ã
            case PROGRESS_ANALYSIS -> Duration.ofMinutes(15); // –ü—Ä–æ–≥—Ä–µ—Å—Å –º–µ–Ω—è–µ—Ç—Å—è –±—ã—Å—Ç—Ä–æ
            case WORKOUT_PLANNING -> Duration.ofHours(6);   // –ü–ª–∞–Ω—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å—Ç–∞–±–∏–ª—å–Ω—ã
            case CHAT_RESPONSE -> Duration.ofMinutes(5);    // –ß–∞—Ç –æ—Ç–≤–µ—Ç—ã –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã
            case COMPLEX_QUERY -> Duration.ofMinutes(60);   // –°–ª–æ–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å—Ç–æ—è—Ç –¥–æ—Ä–æ–≥–æ
        };
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
     */
    public String getUsageStatistics() {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º
        return "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞";
    }
    
    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
     */
    public void clearCache() {
        if (redisTemplate != null) {
            try {
                redisTemplate.delete("ai:cache:*");
                log.info("–ö—ç—à AI –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—á–∏—â–µ–Ω");
            } catch (Exception e) {
                log.error("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {}", e.getMessage());
            }
        } else {
            log.warn("Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∫—ç—à –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—á–∏—â–µ–Ω");
        }
    }
} 