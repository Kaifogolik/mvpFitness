package com.fitcoach.service;

import com.fitcoach.infrastructure.ai.NutritionAnalysis;
import com.fitcoach.infrastructure.ai.NutritionAnalysis.DetectedFood;
import com.fitcoach.model.NutritionEntry;
import com.fitcoach.model.User;
import com.fitcoach.model.UserProfile;
import com.fitcoach.repository.NutritionEntryRepository;
import com.fitcoach.repository.UserProfileRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.Collectors;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∏—Ç–∞–Ω–∏–µ–º –∏ –∏—Å—Ç–æ—Ä–∏–µ–π
 */
@Service
@Transactional
public class NutritionService {
    
    private static final Logger logger = LoggerFactory.getLogger(NutritionService.class);
    
    @Autowired
    private NutritionEntryRepository nutritionEntryRepository;
    
    @Autowired
    private UserProfileRepository userProfileRepository;
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –ø–∏—Ç–∞–Ω–∏—è –æ—Ç –ò–ò
     */
    public List<NutritionEntry> saveNutritionAnalysis(User user, NutritionAnalysis analysis, String imageBase64) {
        List<NutritionEntry> entries = new ArrayList<>();
        
        if (analysis.getDetectedFoods() != null && !analysis.getDetectedFoods().isEmpty()) {
            for (DetectedFood food : analysis.getDetectedFoods()) {
                NutritionEntry entry = NutritionEntry.fromAIAnalysis(
                    user,
                    food.getFoodName(),
                    food.getQuantity(),
                    food.getCalories(),
                    food.getProteins(),
                    food.getFats(),
                    food.getCarbs(),
                    food.getConfidence(),
                    analysis.getAnalysisNotes()
                );
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
                if (entries.isEmpty() && imageBase64 != null) {
                    entry.setImageBase64(imageBase64);
                }
                
                entries.add(nutritionEntryRepository.save(entry));
            }
        } else {
            // –ï—Å–ª–∏ –ò–ò –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–µ–ª, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å –Ω—É–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            NutritionEntry entry = NutritionEntry.fromAIAnalysis(
                user,
                "–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –µ–¥–∞",
                "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                0.0, 0.0, 0.0, 0.0,
                0.0,
                analysis.getAnalysisNotes() != null ? analysis.getAnalysisNotes() : "–ò–ò –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –µ–¥—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"
            );
            entries.add(nutritionEntryRepository.save(entry));
        }
        
        logger.info("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {} –∑–∞–ø–∏—Å–µ–π –æ –ø–∏—Ç–∞–Ω–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", 
                   entries.size(), user.getUsername());
        
        return entries;
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∏—Ç–∞–Ω–∏—è
     */
    @Transactional(readOnly = true)
    public DailyNutritionStats getDailyStats(User user, LocalDate date) {
        List<NutritionEntry> entries = nutritionEntryRepository.findByUserAndDateOrderByTimestamp(user, date);
        
        double totalCalories = entries.stream().mapToDouble(NutritionEntry::getCalories).sum();
        double totalProteins = entries.stream().mapToDouble(NutritionEntry::getProteins).sum();
        double totalFats = entries.stream().mapToDouble(NutritionEntry::getFats).sum();
        double totalCarbs = entries.stream().mapToDouble(NutritionEntry::getCarbs).sum();
        
        // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        Optional<UserProfile> profileOpt = userProfileRepository.findByUser(user);
        UserProfile profile = profileOpt.orElse(null);
        
        return new DailyNutritionStats(
            date, entries, totalCalories, totalProteins, totalFats, totalCarbs, profile
        );
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –Ω–µ–¥–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
     */
    @Transactional(readOnly = true)
    public WeeklyNutritionStats getWeeklyStats(User user, LocalDate startDate) {
        LocalDate endDate = startDate.plusDays(6);
        List<Object[]> dailyStats = nutritionEntryRepository.getDailyStatistics(user, startDate, endDate);
        
        Map<LocalDate, DailyNutritionStats> statsMap = new HashMap<>();
        
        for (Object[] row : dailyStats) {
            LocalDate date = (LocalDate) row[0];
            double calories = ((Number) row[1]).doubleValue();
            double proteins = ((Number) row[2]).doubleValue();
            double fats = ((Number) row[3]).doubleValue();
            double carbs = ((Number) row[4]).doubleValue();
            long entriesCount = ((Number) row[5]).longValue();
            
            // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
            List<NutritionEntry> entries = nutritionEntryRepository.findByUserAndDateOrderByTimestamp(user, date);
            
            Optional<UserProfile> profileOpt = userProfileRepository.findByUser(user);
            UserProfile profile = profileOpt.orElse(null);
            
            statsMap.put(date, new DailyNutritionStats(date, entries, calories, proteins, fats, carbs, profile));
        }
        
        return new WeeklyNutritionStats(startDate, endDate, statsMap);
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @Transactional(readOnly = true)
    public List<NutritionEntry> getRecentEntries(User user, int limit) {
        return nutritionEntryRepository.findRecentEntries(user, PageRequest.of(0, limit));
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ª—é–±–∏–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @Transactional(readOnly = true)
    public List<FavoriteFood> getFavoriteProducts(User user) {
        List<Object[]> results = nutritionEntryRepository.getFavoriteProducts(user);
        
        return results.stream()
                .map(row -> new FavoriteFood(
                    (String) row[0], 
                    ((Number) row[1]).intValue(),
                    ((Number) row[2]).doubleValue()
                ))
                .collect(Collectors.toList());
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ü–µ–ª—è–º
     */
    @Transactional(readOnly = true)
    public ProgressReport getProgressReport(User user, LocalDate date) {
        DailyNutritionStats todayStats = getDailyStats(user, date);
        
        Optional<UserProfile> profileOpt = userProfileRepository.findByUser(user);
        if (profileOpt.isEmpty()) {
            return new ProgressReport(todayStats, null, false);
        }
        
        UserProfile profile = profileOpt.get();
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ü–µ–ª—è–º
        boolean onTrack = true;
        StringBuilder feedback = new StringBuilder();
        
        if (profile.getDailyCaloriesGoal() != null) {
            double caloriesProgress = todayStats.getTotalCalories() / profile.getDailyCaloriesGoal();
            if (caloriesProgress < 0.8) {
                onTrack = false;
                feedback.append("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞–ª–æ—Ä–∏–π. ");
            } else if (caloriesProgress > 1.2) {
                onTrack = false;
                feedback.append("–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π. ");
            }
        }
        
        if (profile.getDailyProteinsGoal() != null) {
            double proteinsProgress = todayStats.getTotalProteins() / profile.getDailyProteinsGoal();
            if (proteinsProgress < 0.8) {
                feedback.append("–ú–∞–ª–æ –±–µ–ª–∫–∞. ");
            }
        }
        
        return new ProgressReport(todayStats, profile, onTrack, feedback.toString());
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–∏—Ç–∞–Ω–∏—è
     */
    @Transactional(readOnly = true)
    public List<String> getNutritionRecommendations(User user) {
        List<String> recommendations = new ArrayList<>();
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        LocalDate weekAgo = LocalDate.now().minusDays(7);
        List<Object[]> weeklyStats = nutritionEntryRepository.getDailyStatistics(user, weekAgo, LocalDate.now());
        
        if (weeklyStats.isEmpty()) {
            recommendations.add("–ù–∞—á–Ω–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–∏—Ç–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π");
            return recommendations;
        }
        
        // –ê–Ω–∞–ª–∏–∑ —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        double avgCalories = weeklyStats.stream()
                .mapToDouble(row -> ((Number) row[1]).doubleValue())
                .average().orElse(0);
        
        double avgProteins = weeklyStats.stream()
                .mapToDouble(row -> ((Number) row[2]).doubleValue())
                .average().orElse(0);
        
        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å —Ü–µ–ª—è–º–∏
        Optional<UserProfile> profileOpt = userProfileRepository.findByUser(user);
        if (profileOpt.isPresent()) {
            UserProfile profile = profileOpt.get();
            
            if (profile.getDailyCaloriesGoal() != null && avgCalories < profile.getDailyCaloriesGoal() * 0.8) {
                recommendations.add("–£–≤–µ–ª–∏—á—å—Ç–µ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å —Ä–∞—Ü–∏–æ–Ω–∞ - –≤—ã –Ω–µ–¥–æ–µ–¥–∞–µ—Ç–µ");
            }
            
            if (profile.getDailyProteinsGoal() != null && avgProteins < profile.getDailyProteinsGoal() * 0.8) {
                recommendations.add("–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –±–µ–ª–∫–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ —Ä–∞—Ü–∏–æ–Ω");
            }
            
            if (profile.getFitnessGoal() == UserProfile.FitnessGoal.LOSE_WEIGHT) {
                recommendations.add("–î–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –æ–≤–æ—â–∞—Ö –∏ –Ω–µ–∂–∏—Ä–Ω—ã—Ö –±–µ–ª–∫–∞—Ö");
            } else if (profile.getFitnessGoal() == UserProfile.FitnessGoal.BUILD_MUSCLE) {
                recommendations.add("–î–ª—è –Ω–∞–±–æ—Ä–∞ –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã —É–≤–µ–ª–∏—á—å—Ç–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –±–µ–ª–∫–∞ –∏ —Å–ª–æ–∂–Ω—ã—Ö —É–≥–ª–µ–≤–æ–¥–æ–≤");
            }
        }
        
        // –ê–Ω–∞–ª–∏–∑ –ª—é–±–∏–º—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        List<FavoriteFood> favorites = getFavoriteProducts(user);
        if (!favorites.isEmpty()) {
            double avgCaloriesPerFood = favorites.stream()
                    .mapToDouble(FavoriteFood::getAverageCalories)
                    .average().orElse(0);
            
            if (avgCaloriesPerFood > 400) {
                recommendations.add("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å –≤—ã—Å–æ–∫–æ–∫–∞–ª–æ—Ä–∏–π–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –±–æ–ª–µ–µ –∑–¥–æ—Ä–æ–≤—ã–º–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞–º–∏");
            }
        }
        
        return recommendations;
    }
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã
    
    /**
     * –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è
     */
    public static class DailyNutritionStats {
        private final LocalDate date;
        private final List<NutritionEntry> entries;
        private final double totalCalories;
        private final double totalProteins;
        private final double totalFats;
        private final double totalCarbs;
        private final UserProfile profile;
        
        public DailyNutritionStats(LocalDate date, List<NutritionEntry> entries,
                                  double totalCalories, double totalProteins, 
                                  double totalFats, double totalCarbs, UserProfile profile) {
            this.date = date;
            this.entries = entries;
            this.totalCalories = totalCalories;
            this.totalProteins = totalProteins;
            this.totalFats = totalFats;
            this.totalCarbs = totalCarbs;
            this.profile = profile;
        }
        
        // Getters
        public LocalDate getDate() { return date; }
        public List<NutritionEntry> getEntries() { return entries; }
        public double getTotalCalories() { return totalCalories; }
        public double getTotalProteins() { return totalProteins; }
        public double getTotalFats() { return totalFats; }
        public double getTotalCarbs() { return totalCarbs; }
        public UserProfile getProfile() { return profile; }
        
        // –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ü–µ–ª—è–º (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
        public double getCaloriesProgress() {
            return profile != null && profile.getDailyCaloriesGoal() != null ? 
                   (totalCalories / profile.getDailyCaloriesGoal()) * 100 : 0;
        }
        
        public double getProteinsProgress() {
            return profile != null && profile.getDailyProteinsGoal() != null ? 
                   (totalProteins / profile.getDailyProteinsGoal()) * 100 : 0;
        }
        
        public double getFatsProgress() {
            return profile != null && profile.getDailyFatsGoal() != null ? 
                   (totalFats / profile.getDailyFatsGoal()) * 100 : 0;
        }
        
        public double getCarbsProgress() {
            return profile != null && profile.getDailyCarbsGoal() != null ? 
                   (totalCarbs / profile.getDailyCarbsGoal()) * 100 : 0;
        }
    }
    
    /**
     * –ù–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è
     */
    public static class WeeklyNutritionStats {
        private final LocalDate startDate;
        private final LocalDate endDate;
        private final Map<LocalDate, DailyNutritionStats> dailyStats;
        
        public WeeklyNutritionStats(LocalDate startDate, LocalDate endDate, 
                                   Map<LocalDate, DailyNutritionStats> dailyStats) {
            this.startDate = startDate;
            this.endDate = endDate;
            this.dailyStats = dailyStats;
        }
        
        public LocalDate getStartDate() { return startDate; }
        public LocalDate getEndDate() { return endDate; }
        public Map<LocalDate, DailyNutritionStats> getDailyStats() { return dailyStats; }
        
        public double getAverageCalories() {
            return dailyStats.values().stream()
                    .mapToDouble(DailyNutritionStats::getTotalCalories)
                    .average().orElse(0);
        }
        
        public double getTotalCalories() {
            return dailyStats.values().stream()
                    .mapToDouble(DailyNutritionStats::getTotalCalories)
                    .sum();
        }
    }
    
    /**
     * –õ—é–±–∏–º–∞—è –µ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public static class FavoriteFood {
        private final String foodName;
        private final int count;
        private final double averageCalories;
        
        public FavoriteFood(String foodName, int count, double averageCalories) {
            this.foodName = foodName;
            this.count = count;
            this.averageCalories = averageCalories;
        }
        
        public String getFoodName() { return foodName; }
        public int getCount() { return count; }
        public double getAverageCalories() { return averageCalories; }
    }
    
    /**
     * –û—Ç—á–µ—Ç –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
     */
    public static class ProgressReport {
        private final DailyNutritionStats todayStats;
        private final UserProfile profile;
        private final boolean onTrack;
        private final String feedback;
        
        public ProgressReport(DailyNutritionStats todayStats, UserProfile profile, boolean onTrack) {
            this(todayStats, profile, onTrack, "");
        }
        
        public ProgressReport(DailyNutritionStats todayStats, UserProfile profile, boolean onTrack, String feedback) {
            this.todayStats = todayStats;
            this.profile = profile;
            this.onTrack = onTrack;
            this.feedback = feedback;
        }
        
        public DailyNutritionStats getTodayStats() { return todayStats; }
        public UserProfile getProfile() { return profile; }
        public boolean isOnTrack() { return onTrack; }
        public String getFeedback() { return feedback; }
    }
} 