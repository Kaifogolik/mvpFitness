version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: fitness_postgres
    environment:
      POSTGRES_DB: fitness_app
      POSTGRES_USER: fitness_user
      POSTGRES_PASSWORD: fitness_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - fitness_network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: fitness_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - fitness_network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Spring Boot Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fitness_app
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/fitness_app
      - SPRING_DATASOURCE_USERNAME=fitness_user
      - SPRING_DATASOURCE_PASSWORD=fitness_pass
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_BOT_USERNAME=${TELEGRAM_BOT_USERNAME}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - JWT_SECRET=${JWT_SECRET:-default-secret-key-change-in-production}
    ports:
      - "8080:8080"
    depends_on:
      - postgres
      - redis
    networks:
      - fitness_network
    restart: unless-stopped
    volumes:
      - app_logs:/app/logs
      - app_uploads:/app/uploads

  # pgAdmin for database management (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: fitness_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@fitcoach.ai
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - fitness_network
    restart: unless-stopped
    volumes:
      - pgadmin_data:/var/lib/pgadmin

  # Nginx reverse proxy (for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: fitness_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - fitness_network
    restart: unless-stopped

networks:
  fitness_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local
  app_logs:
    driver: local
  app_uploads:
    driver: local
  nginx_logs:
    driver: local 