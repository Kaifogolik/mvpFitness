// FitCoach AI - Telegram Mini App JavaScript
class FitCoachApp {
    constructor() {
        this.tg = window.Telegram.WebApp;
        this.apiBaseUrl = window.location.origin;
        this.currentUser = null;
        this.currentTab = 'dashboard';
        
        this.init();
    }

    init() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
        this.initTelegramWebApp();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI
        this.initUI();
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.loadUserData();
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        this.loadDashboardData();
        
        console.log('üöÄ FitCoach AI Mini App –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    initTelegramWebApp() {
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram WebApp
        if (window.Telegram && window.Telegram.WebApp) {
            this.tg.ready();
            this.tg.expand();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
            this.applyTelegramTheme();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
            this.tg.MainButton.setText('–î–æ–±–∞–≤–∏—Ç—å –ø–∏—Ç–∞–Ω–∏–µ');
            this.tg.MainButton.onClick(() => this.addFood());
            
            // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
            const user = this.tg.initDataUnsafe?.user;
            if (user) {
                this.telegramId = user.id.toString();
                this.currentUser = {
                    id: user.id,
                    firstName: user.first_name,
                    lastName: user.last_name,
                    username: user.username,
                    languageCode: user.language_code
                };
                
                console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram:', this.currentUser);
            } else {
                // Fallback –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
                this.telegramId = 'test_user';
                this.currentUser = {
                    id: 'test_user',
                    firstName: 'Test',
                    lastName: 'User',
                    username: 'test_user',
                    languageCode: 'ru'
                };
                console.log('üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º test_user');
            }
        } else {
            // –ü–æ–ª–Ω—ã–π fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞ –±–µ–∑ Telegram
            this.telegramId = 'test_user';
            this.currentUser = {
                id: 'test_user',
                firstName: 'Test',
                lastName: 'User',
                username: 'test_user',
                languageCode: 'ru'
            };
            console.log('üåê –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º test_user');
        }
    }

    applyTelegramTheme() {
        // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã Telegram
        const root = document.documentElement;
        
        if (this.tg.colorScheme === 'dark') {
            root.style.setProperty('--tg-theme-bg-color', this.tg.themeParams.bg_color || '#1a1a1a');
            root.style.setProperty('--tg-theme-text-color', this.tg.themeParams.text_color || '#ffffff');
            root.style.setProperty('--tg-theme-secondary-bg-color', this.tg.themeParams.secondary_bg_color || '#2a2a2a');
            root.style.setProperty('--tg-theme-hint-color', this.tg.themeParams.hint_color || '#8e8e93');
        }
    }

    initUI() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        this.initTabNavigation();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
        this.initEventHandlers();
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ UI
        this.updateUserUI();
    }

    initTabNavigation() {
        const navTabs = document.querySelectorAll('.nav-tab');
        const tabContents = document.querySelectorAll('.tab-content');

        navTabs.forEach(tab => {
            tab.addEventListener('click', () => {
                const targetTab = tab.dataset.tab;
                
                // –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö —Ç–∞–±–æ–≤
                navTabs.forEach(t => t.classList.remove('active'));
                tabContents.forEach(content => content.classList.remove('active'));
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç–∞–±—É
                tab.classList.add('active');
                document.getElementById(targetTab).classList.add('active');
                
                this.currentTab = targetTab;
                this.onTabChange(targetTab);
            });
        });
    }

    initEventHandlers() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–µ—Ä–∏–æ–¥–∞ –≤ Progress —Ç–∞–±–µ
        const periodBtns = document.querySelectorAll('.period-btn');
        periodBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                periodBtns.forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
                this.loadProgressData(btn.dataset.period);
            });
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ pull-to-refresh
        if (this.tg.isVersionAtLeast('6.2')) {
            this.tg.onEvent('reloadPage', () => {
                this.refreshData();
            });
        }
    }

    updateUserUI() {
        if (this.currentUser) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userNameElement = document.getElementById('userName');
            const profileNameElement = document.getElementById('profileName');
            const avatarTextElement = document.getElementById('avatarText');
            
            const fullName = `${this.currentUser.firstName} ${this.currentUser.lastName || ''}`.trim();
            
            if (userNameElement) userNameElement.textContent = fullName;
            if (profileNameElement) profileNameElement.textContent = fullName;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä (–ø–µ—Ä–≤—ã–µ –±—É–∫–≤—ã –∏–º–µ–Ω–∏)
            if (avatarTextElement && this.currentUser.firstName) {
                const initials = this.currentUser.firstName.charAt(0) + 
                               (this.currentUser.lastName ? this.currentUser.lastName.charAt(0) : '');
                avatarTextElement.textContent = initials.toUpperCase();
            }
        }
    }

    onTabChange(tabName) {
        // –õ–æ–≥–∏–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–∞–±–∞
        switch(tabName) {
            case 'dashboard':
                this.loadDashboardData();
                this.tg.MainButton.setText('–î–æ–±–∞–≤–∏—Ç—å –ø–∏—Ç–∞–Ω–∏–µ');
                this.tg.MainButton.show();
                break;
            case 'nutrition':
                this.loadNutritionData();
                this.tg.MainButton.setText('–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–µ–º –ø–∏—â–∏');
                this.tg.MainButton.show();
                break;
            case 'progress':
                this.loadProgressData('week');
                this.tg.MainButton.hide();
                break;
            case 'profile':
                this.loadProfileData();
                this.tg.MainButton.hide();
                break;
        }
    }

    // API –º–µ—Ç–æ–¥—ã
    async apiCall(endpoint, method = 'GET', data = null) {
        const url = `${this.apiBaseUrl}${endpoint}`;
        const options = {
            method,
            headers: {
                'Content-Type': 'application/json',
            }
        };

        if (data) {
            options.body = JSON.stringify(data);
        }

        try {
            const response = await fetch(url, options);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return await response.json();
        } catch (error) {
            console.error('‚ùå API Error:', error);
            this.showError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
            throw error;
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    async loadUserData() {
        try {
            console.log(`üë§ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${this.telegramId}`);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Mock API
            const userProfile = await this.apiCall(`/api/users/${this.telegramId}/profile`);
            
            if (userProfile.success) {
                this.currentUserProfile = userProfile.profile;
                this.updateProfileUI(userProfile);
                console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω:', userProfile);
            } else {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
                this.showProfileCreationForm();
                this.showWarning('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.');
                console.log('üìù –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
        }
    }

    async loadDashboardData() {
        try {
            console.log(`üìä –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–∞—à–±–æ—Ä–¥–∞ –¥–ª—è: ${this.telegramId}`);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            this.showLoading('todayCalories', true);
            this.showLoading('dailyGoal', true);
            this.showLoading('streakDays', true);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ Mock API
            const dailyStats = await this.apiCall(`/api/nutrition/${this.telegramId}/daily`);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–¥–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ Mock API  
            const weeklyStats = await this.apiCall(`/api/nutrition/${this.telegramId}/weekly`);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑ Mock API
            const recommendations = await this.apiCall(`/api/nutrition/${this.telegramId}/recommendations`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            this.updateDashboardStats(dailyStats, weeklyStats, recommendations);
            
            // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∑–∞–≥—Ä—É–∑–∫–∏
            this.showLoading('todayCalories', false);
            this.showLoading('dailyGoal', false);
            this.showLoading('streakDays', false);
            
            console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞:', error);
            this.showLoading('todayCalories', false);
            this.showLoading('dailyGoal', false);
            this.showLoading('streakDays', false);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.');
        }
    }

    updateDashboardUI(data) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
        document.getElementById('todayCalories').textContent = data.todayCalories;
        document.getElementById('currentWeight').textContent = data.currentWeight;
        document.getElementById('dailyGoal').textContent = data.dailyGoal;
        document.getElementById('streakDays').textContent = data.streakDays;

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–ª–æ—Ä–∏–π –≤ –ø–∏—Ç–∞–Ω–∏–∏
        document.getElementById('consumedCalories').textContent = data.todayCalories;
        document.getElementById('remainingCalories').textContent = Math.max(0, data.dailyGoal - data.todayCalories);
    }

    updateProfileUI(userProfileData) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ UI
        const profile = userProfileData.profile;
        const user = userProfileData.user;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        if (user && user.firstName) {
            this.currentUser.firstName = user.firstName;
            this.currentUser.lastName = user.lastName;
            this.updateUserUI();
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
        if (profile) {
            const goalElement = document.getElementById('currentGoal');
            const weightElement = document.getElementById('currentWeight');
            const heightElement = document.getElementById('currentHeight');
            
            if (goalElement) goalElement.textContent = this.translateGoal(profile.goal);
            if (weightElement) weightElement.textContent = `${profile.currentWeight} –∫–≥`;
            if (heightElement) heightElement.textContent = `${profile.height} —Å–º`;
        }
        
        console.log('‚úÖ UI –ø—Ä–æ—Ñ–∏–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω');
    }
    
    updateDashboardStats(dailyStats, weeklyStats, recommendations) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–∞—à–±–æ—Ä–¥–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ –∞–Ω–∏–º–∞—Ü–∏—è–º–∏
        if (dailyStats && dailyStats.success) {
            // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π
            this.animateValue('todayCalories', 0, Math.round(dailyStats.total_calories), 1000);
            this.animateValue('dailyGoal', 0, dailyStats.goal_calories, 800);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–ª–æ—Ä–∏–π
            const caloriesProgress = (dailyStats.total_calories / dailyStats.goal_calories) * 100;
            setTimeout(() => this.updateProgressBar('caloriesProgress', caloriesProgress), 500);
            
            // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
            const consumedElement = document.getElementById('consumedCalories');
            const remainingElement = document.getElementById('remainingCalories');
            
            if (consumedElement) consumedElement.textContent = Math.round(dailyStats.total_calories);
            if (remainingElement) remainingElement.textContent = Math.round(dailyStats.remaining_calories);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ë–ñ–£ –µ—Å–ª–∏ –µ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã
            const proteinElement = document.getElementById('todayProtein'); 
            const carbsElement = document.getElementById('todayCarbs');
            const fatElement = document.getElementById('todayFat');
            
            if (proteinElement) proteinElement.textContent = `${Math.round(dailyStats.total_protein)}–≥`;
            if (carbsElement) carbsElement.textContent = `${Math.round(dailyStats.total_carbs)}–≥`;
            if (fatElement) fatElement.textContent = `${Math.round(dailyStats.total_fat)}–≥`;
        }
        
        if (weeklyStats && weeklyStats.success) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            this.animateValue('streakDays', 0, weeklyStats.days_tracked, 600);
            
            // –ü—Ä–æ–≥—Ä–µ—Å—Å streak (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ 7 –¥–Ω–µ–π)
            const streakProgress = (weeklyStats.days_tracked / 7) * 100;
            setTimeout(() => this.updateProgressBar('streakProgress', streakProgress), 800);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–∏ –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            const weeklyAvgElement = document.getElementById('weeklyAvgCalories');
            if (weeklyAvgElement) {
                this.animateValue('weeklyAvgCalories', 0, Math.round(weeklyStats.average_daily_calories), 1200);
            }
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –µ—Å–ª–∏ –º–µ—Ç–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (recommendations && recommendations.success && this.displayRecommendations) {
            setTimeout(() => this.displayRecommendations(recommendations.recommendations), 1000);
        }
        
        console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å –∞–Ω–∏–º–∞—Ü–∏—è–º–∏');
    }
    
    animateValue(elementId, start, end, duration) {
        // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        const element = document.getElementById(elementId);
        if (!element) return;
        
        const range = end - start;
        const startTime = Date.now();
        
        const timer = setInterval(() => {
            const elapsed = Date.now() - startTime;
            const progress = Math.min(elapsed / duration, 1);
            
            // Easing function –¥–ª—è –ø–ª–∞–≤–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
            const easedProgress = 1 - Math.pow(1 - progress, 3);
            const current = Math.round(start + (range * easedProgress));
            
            element.textContent = current;
            
            if (progress >= 1) {
                clearInterval(timer);
                element.textContent = end; // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ—á–Ω–æ–µ
            }
        }, 16); // ~60fps
    }
    
    showProfileCreationForm() {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        console.log('üìù –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è');
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ç–∞–± Profile
        const profileTab = document.querySelector('[data-tab="profile"]');
        const profileContent = document.getElementById('profile');
        
        if (profileTab && profileContent) {
            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–∞–± –ø—Ä–æ—Ñ–∏–ª—è  
            document.querySelectorAll('.nav-tab').forEach(tab => tab.classList.remove('active'));
            document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
            
            profileTab.classList.add('active');
            profileContent.classList.add('active');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
            const messageDiv = document.createElement('div');
            messageDiv.className = 'profile-setup-message';
            messageDiv.innerHTML = `
                <h3>üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è</h3>
                <p>–î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å</p>
            `;
            
            profileContent.insertBefore(messageDiv, profileContent.firstChild);
        }
    }
    
    showError(message) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        console.error('‚ùå –û—à–∏–±–∫–∞:', message);
        this.showNotification(message, 'error');
    }
    
    showSuccess(message) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        console.log('‚úÖ –£—Å–ø–µ—Ö:', message);
        this.showNotification(message, 'success');
    }
    
    showWarning(message) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        console.warn('‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:', message);
        this.showNotification(message, 'warning');
    }
    
    showNotification(message, type = 'info') {
        // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        const icons = {
            success: '‚úÖ',
            error: '‚ùå', 
            warning: '‚ö†Ô∏è',
            info: 'üí°'
        };
        
        notification.innerHTML = `${icons[type] || icons.info} ${message}`;
        document.body.appendChild(notification);
        
        // –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        setTimeout(() => {
            notification.style.animation = 'slideOutUp 0.3s ease-in';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 300);
        }, 4000);
    }
    
    showLoading(elementId, show = true) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        const element = document.getElementById(elementId);
        if (!element) return;
        
        if (show) {
            element.classList.add('loading');
            // –î–æ–±–∞–≤–ª—è–µ–º spinner –µ—Å–ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞
            if (element.tagName === 'BUTTON') {
                const spinner = document.createElement('span');
                spinner.className = 'loading-spinner';
                element.insertBefore(spinner, element.firstChild);
            }
        } else {
            element.classList.remove('loading');
            // –£–±–∏—Ä–∞–µ–º spinner
            const spinner = element.querySelector('.loading-spinner');
            if (spinner) {
                spinner.remove();
            }
        }
    }
    
    showSkeleton(containerSelector) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º skeleton loader
        const container = document.querySelector(containerSelector);
        if (!container) return;
        
        const skeleton = document.createElement('div');
        skeleton.className = 'skeleton';
        skeleton.style.height = '60px';
        skeleton.style.width = '100%';
        skeleton.style.marginBottom = '16px';
        
        container.innerHTML = '';
        for (let i = 0; i < 3; i++) {
            container.appendChild(skeleton.cloneNode());
        }
    }
    
    updateProgressBar(elementId, percentage) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        const progressBar = document.getElementById(elementId);
        if (!progressBar) return;
        
        const fill = progressBar.querySelector('.progress-fill') || 
                    progressBar.appendChild(document.createElement('div'));
        fill.className = 'progress-fill';
        fill.style.width = `${Math.min(100, Math.max(0, percentage))}%`;
    }
    
    displayRecommendations(recommendations) {
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ UI
        const recommendationsContainer = document.getElementById('recommendationsList');
        if (recommendationsContainer && recommendations) {
            recommendationsContainer.innerHTML = recommendations
                .map(rec => `<div class="recommendation-item">${rec}</div>`)
                .join('');
        }
    }
    
    translateGoal(goal) {
        // –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ü–µ–ª—å –Ω–∞ —Ä—É—Å—Å–∫–∏–π
        const goals = {
            'WEIGHT_LOSS': '–ü–æ—Ö—É–¥–µ–Ω–∏–µ',
            'WEIGHT_GAIN': '–ù–∞–±–æ—Ä –º–∞—Å—Å—ã', 
            'MAINTENANCE': '–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞',
            'MUSCLE_GAIN': '–ù–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã'
        };
        return goals[goal] || goal;
    }

    async loadNutritionData() {
        // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–∏—Ç–∞–Ω–∏–∏
        console.log('üçé –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–∏—Ç–∞–Ω–∏–∏...');
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –ø–∏—Ç–∞–Ω–∏—è –∏–∑ API
    }

    async loadProgressData(period) {
        // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        console.log(`üìà –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞: ${period}`);
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–∑ API
    }

    async loadProfileData() {
        // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è
        console.log('üë§ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è...');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Ñ–∏–ª—è
        document.getElementById('totalDays').textContent = Math.floor(Math.random() * 100) + 1;
        document.getElementById('totalMeals').textContent = Math.floor(Math.random() * 200);
        document.getElementById('totalWorkouts').textContent = Math.floor(Math.random() * 50);
    }

    // –£—Ç–∏–ª–∏—Ç—ã
    showLoading() {
        document.getElementById('loadingOverlay').classList.add('show');
    }

    hideLoading() {
        document.getElementById('loadingOverlay').classList.remove('show');
    }

    async refreshData() {
        this.showLoading();
        try {
            await this.loadUserData();
            await this.loadDashboardData();
            this.showSuccess('–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!');
        } catch (error) {
            this.showError('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
        } finally {
            this.hideLoading();
        }
    }

    // AI —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è Mini App
    async analyzePhotoFromGallery() {
        try {
            // –°–æ–∑–¥–∞–µ–º —Å–∫—Ä—ã—Ç—ã–π input –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
            const input = document.createElement('input');
            input.type = 'file';
            input.accept = 'image/*';
            input.style.display = 'none';
            
            return new Promise((resolve, reject) => {
                input.onchange = async (event) => {
                    const file = event.target.files[0];
                    if (!file) {
                        reject(new Error('–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'));
                        return;
                    }
                    
                    this.showLoading();
                    
                    try {
                        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
                        const base64 = await this.fileToBase64(file);
                        
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∞–Ω–∞–ª–∏–∑
                        const analysis = await this.apiCall('/api/ai/analyze-food-base64', 'POST', {
                            imageBase64: base64.split(',')[1], // –£–±–∏—Ä–∞–µ–º data:image/jpeg;base64,
                            mealType: 'OTHER'
                        });
                        
                        if (analysis.success) {
                            this.showFoodAnalysisResult(analysis);
                            resolve(analysis);
                        } else {
                            throw new Error(analysis.message || '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞');
                        }
                        
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ:', error);
                        this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞.');
                        reject(error);
                    } finally {
                        this.hideLoading();
                    }
                };
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—ã–±–æ—Ä —Ñ–∞–π–ª–∞
                input.click();
            });
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ç–æ:', error);
            this.showError('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –≥–∞–ª–µ—Ä–µ–µ');
        }
    }

    fileToBase64(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.readAsDataURL(file);
            reader.onload = () => resolve(reader.result);
            reader.onerror = error => reject(error);
        });
    }

    showFoodAnalysisResult(analysis) {
        const foods = analysis.detectedFoods || [];
        const totalCalories = analysis.totalCalories || 0;
        
        let message = `üçΩÔ∏è –ê–ù–ê–õ–ò–ó –ü–ò–¢–ê–ù–ò–Ø\n\n`;
        message += `üìä –û–±—â–∏–µ –∫–∞–ª–æ—Ä–∏–∏: ${totalCalories} –∫–∫–∞–ª\n`;
        message += `ü•Ñ –û–±—â–∏–µ –ë–ñ–£: –ë${analysis.totalProteins || 0}–≥, –ñ${analysis.totalFats || 0}–≥, –£${analysis.totalCarbs || 0}–≥\n\n`;
        
        if (foods.length > 0) {
            message += `üçé –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –ü–†–û–î–£–ö–¢–´:\n`;
            foods.forEach((food, index) => {
                message += `${index + 1}. ${food.name}\n`;
                message += `   –ö–∞–ª–æ—Ä–∏–∏: ${food.calories} –∫–∫–∞–ª\n`;
                message += `   –ë–ñ–£: –ë${food.proteins}–≥, –ñ${food.fats}–≥, –£${food.carbs}–≥\n\n`;
            });
        }
        
        if (analysis.recommendations) {
            message += `üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n${analysis.recommendations}`;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (this.tg.showAlert) {
            this.tg.showAlert(message);
        } else {
            alert(message);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ª–æ—Ä–∏–∏ –Ω–∞ –¥–∞—à–±–æ—Ä–¥–µ (–¥–µ–º–æ)
        const currentCalories = parseInt(document.getElementById('todayCalories').textContent) || 0;
        const newCalories = currentCalories + totalCalories;
        document.getElementById('todayCalories').textContent = newCalories;
        document.getElementById('consumedCalories').textContent = newCalories;
        
        const dailyGoal = parseInt(document.getElementById('dailyGoal').textContent) || 2000;
        const remaining = Math.max(0, dailyGoal - newCalories);
        document.getElementById('remainingCalories').textContent = remaining;
    }

    async askAIQuestion(question = null) {
        try {
            // –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            let userQuestion = question;
            if (!userQuestion) {
                if (this.tg.showPopup) {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram WebApp popup
                    return new Promise((resolve) => {
                        this.tg.showPopup({
                            title: 'ü§ñ AI –ü–æ–º–æ—â–Ω–∏–∫',
                            message: '–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –ø–∏—Ç–∞–Ω–∏–∏, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö –∏–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ:',
                            buttons: [
                                {id: 'nutrition', type: 'default', text: 'üçé –û –ø–∏—Ç–∞–Ω–∏–∏'},
                                {id: 'workout', type: 'default', text: 'üí™ –û —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö'},
                                {id: 'custom', type: 'default', text: '‚úçÔ∏è –°–≤–æ–π –≤–æ–ø—Ä–æ—Å'},
                                {id: 'cancel', type: 'cancel', text: '–û—Ç–º–µ–Ω–∞'}
                            ]
                        }, (buttonId) => {
                            if (buttonId === 'nutrition') {
                                this.askAIQuestion('–î–∞–π —Å–æ–≤–µ—Ç –ø–æ –∑–¥–æ—Ä–æ–≤–æ–º—É –ø–∏—Ç–∞–Ω–∏—é –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ñ–æ—Ä–º—ã');
                            } else if (buttonId === 'workout') {
                                this.askAIQuestion('–ö–∞–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ª—É—á—à–µ –¥–µ–ª–∞—Ç—å –¥–ª—è –æ–±—â–µ–π —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π —Ñ–æ—Ä–º—ã?');
                            } else if (buttonId === 'custom') {
                                const customQuestion = prompt('ü§ñ –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:');
                                if (customQuestion) {
                                    this.askAIQuestion(customQuestion);
                                }
                            }
                            resolve();
                        });
                    });
                } else {
                    // Fallback –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
                    userQuestion = prompt('ü§ñ –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å AI –ø–æ–º–æ—â–Ω–∏–∫—É:');
                    if (!userQuestion) return;
                }
            }
            
            this.showLoading();
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å AI
            const response = await this.apiCall('/api/ai/chat', 'POST', {
                message: userQuestion,
                userId: this.currentUser?.id || 'webapp_user'
            });
            
            this.hideLoading();
            
            if (response.success) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç AI
                const aiMessage = `ü§ñ AI –ü–û–ú–û–©–ù–ò–ö\n\n‚ùì –í–∞—à –≤–æ–ø—Ä–æ—Å:\n${userQuestion}\n\nüí° –û—Ç–≤–µ—Ç:\n${response.response}`;
                
                if (this.tg.showAlert) {
                    this.tg.showAlert(aiMessage);
                } else {
                    alert(aiMessage);
                }
            } else {
                throw new Error(response.message || '–û—à–∏–±–∫–∞ AI —á–∞—Ç–∞');
            }
            
        } catch (error) {
            this.hideLoading();
            console.error('AI Chat Error:', error);
            this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞.');
        }
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏—è —á–µ—Ä–µ–∑ —Ñ–æ—Ç–æ - –º–µ—Ç–æ–¥ –∫–ª–∞—Å—Å–∞
    async addFood() {
        try {
            // –°–æ–∑–¥–∞–µ–º input –¥–ª—è —Ñ–∞–π–ª–∞
            const input = document.createElement('input');
            input.type = 'file';
            input.accept = 'image/*';
            input.capture = 'environment'; // –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –∫–∞–º–µ—Ä–µ
            
            input.onchange = async (event) => {
                const file = event.target.files[0];
                if (!file) return;
                
                this.showLoading('–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...');
                
                try {
                    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω—ã–π API
                    const result = await this.analyzeFood(file);
                    
                    this.hideLoading();
                    
                    if (result.success && result.analysis) {
                        console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω:', result.analysis);
                        this.showFoodAnalysis(result.analysis);
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                        await this.loadDashboardData();
                    } else {
                        throw new Error(result.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
                    }
                } catch (error) {
                    this.hideLoading();
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
                    this.showError('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ' + error.message);
                }
            };
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ñ–∞–π–ª–∞
            input.click();
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∏—Ç–∞–Ω–∏—è:', error);
            this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É');
        }
    }

    // –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ –µ–¥—ã —á–µ—Ä–µ–∑ API
    async analyzeFood(file) {
        const formData = new FormData();
        formData.append('image', file);
        formData.append('telegramId', this.telegramId);

        const response = await fetch(`${this.apiBaseUrl}/api/ai/analyze-food-photo`, {
            method: 'POST',
            body: formData
        });

        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        return await response.json();
    }

    // –ß–∞—Ç —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º —Ç—Ä–µ–Ω–µ—Ä–æ–º
    async sendChatMessage(message) {
        try {
            console.log('üí¨ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä—É:', message);
            
            const response = await fetch(`${this.apiBaseUrl}/api/ai/chat`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    message: message,
                    telegramId: this.telegramId
                })
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            
            if (result.success) {
                console.log('‚úÖ –û—Ç–≤–µ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞ –ø–æ–ª—É—á–µ–Ω:', result.response);
                return result.response;
            } else {
                throw new Error(result.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —á–∞—Ç–∞:', error);
            throw error;
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è HTML
window.addFood = async function() {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∫–ª–∞—Å—Å–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ
    if (window.app) {
        await window.app.addFood();
    } else {
        console.error('‚ùå App –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        alert('–û—à–∏–±–∫–∞: –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –≥–æ—Ç–æ–≤–æ');
    }
};

window.addWeight = function() {
    const weight = prompt('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –≤–µ—Å (–∫–≥):');
    if (weight && !isNaN(weight)) {
        document.getElementById('currentWeight').textContent = `${weight} –∫–≥`;
        app.showSuccess(`–í–µ—Å ${weight} –∫–≥ –∑–∞–ø–∏—Å–∞–Ω!`);
    }
};

window.addWorkout = function() {
    app.showSuccess('–§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (–¥–µ–º–æ)
    const workoutsElement = document.getElementById('totalWorkouts');
    if (workoutsElement) {
        const current = parseInt(workoutsElement.textContent) || 0;
        workoutsElement.textContent = current + 1;
    }
};

window.aiChat = async function() {
    app.showLoading();
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å AI —á–∞—Ç–∞
        const aiStatus = await app.apiCall('/api/ai/status');
        
        if (!aiStatus.success || !aiStatus.features.ai_chat) {
            app.hideLoading();
            app.showError('AI —á–∞—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            return;
        }
        
        app.hideLoading();
        
        // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ —á–∞—Ç–∞
        if (app.tg.showConfirm) {
            app.tg.showConfirm(
                'ü§ñ –ö–∞–∫ –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å AI –ø–æ–º–æ—â–Ω–∏–∫–æ–º?\n\nüí¨ –ó–¥–µ—Å—å - –±—ã—Å—Ç—Ä—ã–π –≤–æ–ø—Ä–æ—Å –ø—Ä—è–º–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏\nüì± –ß–µ—Ä–µ–∑ –±–æ—Ç–∞ - –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —á–∞—Ç –≤ @mvpfitness_bot\n\n–í—ã–±—Ä–∞—Ç—å "–ó–¥–µ—Å—å"?',
                async (chatHere) => {
                    if (chatHere) {
                        // –ß–∞—Ç –ø—Ä—è–º–æ –≤ Mini App
                        try {
                            await app.askAIQuestion();
                        } catch (error) {
                            console.error('Mini App chat error:', error);
                        }
                    } else {
                        // –ü–µ—Ä–µ—Ö–æ–¥ –∫ Telegram –±–æ—Ç—É
                        app.tg.showAlert(`
ü§ñ AI –ß–∞—Ç —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞

1. –û—Ç–∫—Ä–æ–π—Ç–µ @mvpfitness_bot
2. –ù–∞–∂–º–∏—Ç–µ "ü§ñ AI –ß–∞—Ç" –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å
3. –ü–æ–ª—É—á–∏—Ç–µ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π —Å–æ–≤–µ—Ç –ø–æ:
   ‚Ä¢ –ü–∏—Ç–∞–Ω–∏—é –∏ –¥–∏–µ—Ç–∞–º
   ‚Ä¢ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º  
   ‚Ä¢ –ó–¥–æ—Ä–æ–≤–æ–º—É –æ–±—Ä–∞–∑—É –∂–∏–∑–Ω–∏
   ‚Ä¢ –ê–Ω–∞–ª–∏–∑—É –∫–∞–ª–æ—Ä–∏–π

–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —á–∞—Ç —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π!
                        `);
                        
                        if (app.tg.openTelegramLink) {
                            app.tg.openTelegramLink('https://t.me/mvpfitness_bot?start=chat');
                        }
                    }
                }
            );
        } else {
            // Fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–æ–≤ –±–µ–∑ Telegram WebApp
            const chatHere = confirm('ü§ñ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∑–¥–µ—Å—å? (–ù–µ—Ç = –ø–µ—Ä–µ–π—Ç–∏ –∫ Telegram –±–æ—Ç—É)');
            
            if (chatHere) {
                try {
                    await app.askAIQuestion();
                } catch (error) {
                    console.error('Mini App chat error:', error);
                }
            } else {
                alert('–ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ @mvpfitness_bot –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ AI —á–∞—Ç–∞');
                window.open('https://t.me/mvpfitness_bot', '_blank');
            }
        }
        
    } catch (error) {
        app.hideLoading();
        app.showError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AI —á–∞—Ç—É');
        console.error('AI Chat Error:', error);
    }
};

window.editProfile = function() {
    app.showSuccess('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏');
};

window.becomeCoach = function() {
    if (app.tg.showConfirm) {
        app.tg.showConfirm('–•–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä–æ–º? –≠—Ç–æ –¥–∞—Å—Ç –≤–∞–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∞—Ç—å –¥–æ—Ö–æ–¥ –æ—Ç —É—á–µ–Ω–∏–∫–æ–≤.', (confirmed) => {
            if (confirmed) {
                document.getElementById('userStatus').textContent = 'Coach';
                document.getElementById('profileRole').textContent = '–¢—Ä–µ–Ω–µ—Ä';
                app.showSuccess('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢–µ–ø–µ—Ä—å –≤—ã —Ç—Ä–µ–Ω–µ—Ä!');
            }
        });
    } else {
        const confirmed = confirm('–•–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä–æ–º?');
        if (confirmed) {
            document.getElementById('userStatus').textContent = 'Coach';
            document.getElementById('profileRole').textContent = '–¢—Ä–µ–Ω–µ—Ä';
            app.showSuccess('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢–µ–ø–µ—Ä—å –≤—ã —Ç—Ä–µ–Ω–µ—Ä!');
        }
    }
};

window.shareApp = function() {
    const shareUrl = 'https://t.me/mvpfitness_bot';
    const shareText = 'ü§ñ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ FitCoach AI - —É–º–Ω–æ–≥–æ —Ñ–∏—Ç–Ω–µ—Å-–ø–æ–º–æ—â–Ω–∏–∫–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º –ø–∏—Ç–∞–Ω–∏—è!';
    
    if (app.tg.openTelegramLink) {
        app.tg.openTelegramLink(`https://t.me/share/url?url=${encodeURIComponent(shareUrl)}&text=${encodeURIComponent(shareText)}`);
    } else {
        navigator.share({
            title: 'FitCoach AI',
            text: shareText,
            url: shareUrl
        }).catch(() => {
            // Fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–æ–≤ –±–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Web Share API
            const url = `https://t.me/share/url?url=${encodeURIComponent(shareUrl)}&text=${encodeURIComponent(shareText)}`;
            window.open(url, '_blank');
        });
    }
};

window.logout = function() {
    if (app.tg.showConfirm) {
        app.tg.showConfirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?', (confirmed) => {
            if (confirmed) {
                app.tg.close();
            }
        });
    } else {
        const confirmed = confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?');
        if (confirmed) {
            window.close();
        }
    }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
window.addEventListener('error', (event) => {
    console.error('üö® –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', event.error);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–∏—Å–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏
window.addEventListener('unhandledrejection', (event) => {
    console.error('üö® –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–º–∏—Å–∞:', event.reason);
    event.preventDefault();
}); 

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let app;
document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FitCoach AI Mini App...');
    app = new FitCoachApp();
    window.app = app; // –î–µ–ª–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è HTML —Ñ—É–Ω–∫—Ü–∏–π
});