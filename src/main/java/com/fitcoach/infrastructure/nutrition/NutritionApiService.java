package com.fitcoach.infrastructure.nutrition;

import com.fitcoach.infrastructure.nutrition.fatsecret.FatSecretService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;

import java.time.Duration;
import java.util.Optional;

/**
 * –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –ø–∏—Ç–∞–Ω–∏—è
 * 
 * –≠–∫–æ–Ω–æ–º–∏—è: $290/–º–µ—Å—è—Ü –∑–∞ —Å—á–µ—Ç –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö API
 * 
 * –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:
 * 1. FatSecret API (–±–µ—Å–ø–ª–∞—Ç–Ω–æ, 500 –∑–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å)
 * 2. USDA FoodData Central (–±–µ—Å–ø–ª–∞—Ç–Ω–æ, –±–µ–∑ –ª–∏–º–∏—Ç–æ–≤)
 * 3. Edamam Nutrition API (–±–µ—Å–ø–ª–∞—Ç–Ω–æ, 100 –∑–∞–ø—Ä–æ—Å–æ–≤/–º–µ—Å—è—Ü)
 * 4. –õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (fallback)
 */
@Service
public class NutritionApiService {
    
    private static final Logger log = LoggerFactory.getLogger(NutritionApiService.class);
    
    private final FatSecretService fatSecretService;
    private final RedisTemplate<String, String> redisTemplate;
    
    // TODO: –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —Å–µ—Ä–≤–∏—Å—ã –∫–æ–≥–¥–∞ –±—É–¥—É—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã
    // private final USDAFdcService usdaFdcService;
    // private final EdamamService edamamService;
    // private final LocalNutritionDatabase localDatabase;
    
    public NutritionApiService(FatSecretService fatSecretService,
                              RedisTemplate<String, String> redisTemplate) {
        this.fatSecretService = fatSecretService;
        this.redisTemplate = redisTemplate;
        
        log.info("üçé Nutrition API Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:");
        log.info("   - FatSecret: {}", fatSecretService != null ? "‚úÖ" : "‚ùå");
        log.info("   - Redis –∫—ç—à: {}", redisTemplate != null ? "‚úÖ" : "‚ùå");
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å –∫–∞—Å–∫–∞–¥–Ω—ã–º fallback
     * 
     * @param foodName –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
     * @param weight –≤–µ—Å –ø–æ—Ä—Ü–∏–∏ –≤ –≥—Ä–∞–º–º–∞—Ö
     * @return –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
     * @throws NutritionNotFoundException –µ—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤–æ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö
     */
    public NutritionInfo getNutrition(String foodName, double weight) throws NutritionNotFoundException {
        long startTime = System.currentTimeMillis();
        
        try {
            log.info("üîç –ü–æ–∏—Å–∫ –ø–∏—Ç–∞–Ω–∏—è: '{}' ({}–≥)", foodName, weight);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π –∫—ç—à
            String globalCacheKey = "nutrition:global:" + foodName.toLowerCase() + ":" + weight;
            String cachedResult = getCachedResult(globalCacheKey);
            if (cachedResult != null) {
                log.info("‚úÖ –ù–∞–π–¥–µ–Ω –≤ –æ–±—â–µ–º –∫—ç—à–µ: '{}'", foodName);
                return NutritionInfo.fromJson(cachedResult);
            }
            
            // 1. –ü—Ä–æ–±—É–µ–º FatSecret (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç #1)
            Optional<NutritionInfo> result = tryFatSecret(foodName, weight);
            if (result.isPresent()) {
                cacheGlobalResult(globalCacheKey, result.get());
                logSuccess("FatSecret", result.get(), startTime);
                return result.get();
            }
            
            // 2. TODO: –ü—Ä–æ–±—É–µ–º USDA FDC (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç #2)
            // result = tryUSDAFdc(foodName, weight);
            // if (result.isPresent()) {
            //     cacheGlobalResult(globalCacheKey, result.get());
            //     logSuccess("USDA FDC", result.get(), startTime);
            //     return result.get();
            // }
            
            // 3. TODO: –ü—Ä–æ–±—É–µ–º Edamam (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç #3)
            // result = tryEdamam(foodName, weight);
            // if (result.isPresent()) {
            //     cacheGlobalResult(globalCacheKey, result.get());
            //     logSuccess("Edamam", result.get(), startTime);
            //     return result.get();
            // }
            
            // 4. TODO: –ü—Ä–æ–±—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É (fallback)
            // result = tryLocalDatabase(foodName, weight);
            // if (result.isPresent()) {
            //     cacheGlobalResult(globalCacheKey, result.get());
            //     logSuccess("Local DB", result.get(), startTime);
            //     return result.get();
            // }
            
            // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            long duration = System.currentTimeMillis() - startTime;
            log.warn("‚ùå –ü—Ä–æ–¥—É–∫—Ç '{}' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–µ ({}–º—Å)", foodName, duration);
            throw new NutritionNotFoundException("–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: " + foodName);
            
        } catch (NutritionNotFoundException e) {
            throw e;
        } catch (Exception e) {
            log.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è '{}': {}", foodName, e.getMessage());
            throw new NutritionNotFoundException("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –ø–∏—Ç–∞–Ω–∏—è", e);
        }
    }
    
    /**
     * –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ FatSecret API
     */
    private Optional<NutritionInfo> tryFatSecret(String foodName, double weight) {
        try {
            if (fatSecretService == null || !fatSecretService.isAvailable()) {
                log.debug("‚ö†Ô∏è FatSecret –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
                return Optional.empty();
            }
            
            return fatSecretService.search(foodName, weight);
            
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ FatSecret –¥–ª—è '{}': {}", foodName, e.getMessage());
            return Optional.empty();
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–∑ –æ–±—â–µ–≥–æ –∫—ç—à–∞
     */
    private String getCachedResult(String key) {
        if (redisTemplate != null) {
            try {
                return redisTemplate.opsForValue().get(key);
            } catch (Exception e) {
                log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—ç—à—É: {}", e.getMessage());
            }
        }
        return null;
    }
    
    /**
     * –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –æ–±—â–∏–π –∫—ç—à
     */
    private void cacheGlobalResult(String key, NutritionInfo nutritionInfo) {
        if (redisTemplate != null) {
            try {
                redisTemplate.opsForValue().set(key, nutritionInfo.toJson(), Duration.ofHours(24));
                log.debug("üì¶ –ó–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω –≤ –æ–±—â–∏–π –∫—ç—à: {}", key);
            } catch (Exception e) {
                log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è: {}", e.getMessage());
            }
        }
    }
    
    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
     */
    private void logSuccess(String source, NutritionInfo nutrition, long startTime) {
        long duration = System.currentTimeMillis() - startTime;
        log.info("‚úÖ {} —Ä–µ–∑—É–ª—å—Ç–∞—Ç ({}–º—Å): {}", source, duration, nutrition.getSummary());
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
     */
    public NutritionApiStats getStatistics() {
        return NutritionApiStats.builder()
                .fatSecretAvailable(fatSecretService != null && fatSecretService.isAvailable())
                .fatSecretStats(fatSecretService != null ? fatSecretService.getUsageStats() : "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                .usdaAvailable(false) // TODO
                .edamamAvailable(false) // TODO  
                .localDbAvailable(false) // TODO
                .totalRequests(0) // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å—á–µ—Ç—á–∏–∫–∏
                .cacheHitRate(0.0) // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
                .averageResponseTime(0) // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏
                .monthlySavings(290.0) // –≠–∫–æ–Ω–æ–º–∏—è vs –ø–ª–∞—Ç–Ω—ã–µ API
                .build();
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
     */
    public boolean isAnySourceAvailable() {
        return (fatSecretService != null && fatSecretService.isAvailable());
        // TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫—ç—à–µ–π –ø–∏—Ç–∞–Ω–∏—è
     */
    public void clearAllCaches() {
        if (redisTemplate != null) {
            try {
                redisTemplate.delete("nutrition:*");
                redisTemplate.delete("fatsecret:*");
                log.info("üßπ –û—á–∏—â–µ–Ω—ã –≤—Å–µ –∫—ç—à–∏ –ø–∏—Ç–∞–Ω–∏—è");
            } catch (Exception e) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–µ–π: {}", e.getMessage());
            }
        }
    }
    
    /**
     * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API –ø–∏—Ç–∞–Ω–∏—è
     */
    public static class NutritionApiStats {
        private boolean fatSecretAvailable;
        private String fatSecretStats;
        private boolean usdaAvailable;
        private boolean edamamAvailable;
        private boolean localDbAvailable;
        private long totalRequests;
        private double cacheHitRate;
        private long averageResponseTime;
        private double monthlySavings;
        
        public static Builder builder() {
            return new Builder();
        }
        
        public static class Builder {
            private NutritionApiStats stats = new NutritionApiStats();
            
            public Builder fatSecretAvailable(boolean available) {
                stats.fatSecretAvailable = available;
                return this;
            }
            
            public Builder fatSecretStats(String statsString) {
                stats.fatSecretStats = statsString;
                return this;
            }
            
            public Builder usdaAvailable(boolean available) {
                stats.usdaAvailable = available;
                return this;
            }
            
            public Builder edamamAvailable(boolean available) {
                stats.edamamAvailable = available;
                return this;
            }
            
            public Builder localDbAvailable(boolean available) {
                stats.localDbAvailable = available;
                return this;
            }
            
            public Builder totalRequests(long requests) {
                stats.totalRequests = requests;
                return this;
            }
            
            public Builder cacheHitRate(double rate) {
                stats.cacheHitRate = rate;
                return this;
            }
            
            public Builder averageResponseTime(long timeMs) {
                stats.averageResponseTime = timeMs;
                return this;
            }
            
            public Builder monthlySavings(double savings) {
                stats.monthlySavings = savings;
                return this;
            }
            
            public NutritionApiStats build() {
                return stats;
            }
        }
        
        // –ì–µ—Ç—Ç–µ—Ä—ã
        public boolean isFatSecretAvailable() { return fatSecretAvailable; }
        public String getFatSecretStats() { return fatSecretStats; }
        public boolean isUsdaAvailable() { return usdaAvailable; }
        public boolean isEdamamAvailable() { return edamamAvailable; }
        public boolean isLocalDbAvailable() { return localDbAvailable; }
        public long getTotalRequests() { return totalRequests; }
        public double getCacheHitRate() { return cacheHitRate; }
        public long getAverageResponseTime() { return averageResponseTime; }
        public double getMonthlySavings() { return monthlySavings; }
    }
} 