package com.fitcoach.infrastructure.ai;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.theokanning.openai.completion.chat.ChatCompletionRequest;
import com.theokanning.openai.completion.chat.ChatMessage;
import com.theokanning.openai.completion.chat.ChatMessageRole;
import com.theokanning.openai.completion.chat.ChatCompletionResult;
import com.theokanning.openai.image.ImageResult;
import com.theokanning.openai.service.OpenAiService;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.IOException;
import java.time.Duration;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI API
 * –í–∫–ª—é—á–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ –µ–¥—ã –∏ —á–∞—Ç-–±–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
 */
@Service
public class OpenAIService {
    
    private static final Logger logger = LoggerFactory.getLogger(OpenAIService.class);
    
    private final OpenAiService openAiService;
    private final ObjectMapper objectMapper;
    private final ImageProcessor imageProcessor;
    private final String apiKey;
    
    // –¢–æ—á–Ω—ã–π —Ä—É—Å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è OpenAI (v7.0)
    private static final String NUTRITION_ANALYSIS_PROMPT = """
        –¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–∏—Ç–∞–Ω–∏—é. –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ñ–æ—Ç–æ –µ–¥—ã –∏ –¥–∞–π —Ç–æ—á–Ω—É—é –æ—Ü–µ–Ω–∫—É –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏.
        
        –ï—Å–ª–∏ –≤–∏–¥–∏—à—å –µ–¥—É, –æ—Ç–≤–µ—á–∞–π JSON:
        {"detected_foods":[{"food_name":"—Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ","quantity":"—Ä–∞–∑–º–µ—Ä","calories":—Ä–µ–∞–ª—å–Ω–æ–µ_—á–∏—Å–ª–æ,"proteins":–≥—Ä–∞–º–º—ã,"fats":–≥—Ä–∞–º–º—ã,"carbs":–≥—Ä–∞–º–º—ã,"confidence":0.9}],"total_calories":—Ç–æ—á–Ω—ã–µ_–∫–∞–ª–æ—Ä–∏–∏,"total_proteins":–≥—Ä–∞–º–º—ã,"total_fats":–≥—Ä–∞–º–º—ã,"total_carbs":–≥—Ä–∞–º–º—ã,"confidence_level":0.9,"analysis_notes":"—á—Ç–æ –≤–∏–∂—É –Ω–∞ —Ñ–æ—Ç–æ","health_recommendations":["—Å–æ–≤–µ—Ç"]}
        
        –ï—Å–ª–∏ –µ–¥—ã –Ω–µ –≤–∏–¥–Ω–æ:
        {"total_calories":0,"total_proteins":0,"total_fats":0,"total_carbs":0,"confidence_level":0,"analysis_notes":"–ù–µ –º–æ–≥—É —á–µ—Ç–∫–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –µ–¥—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏","health_recommendations":["–ó–∞–≥—Ä—É–∑–∏—Ç–µ –±–æ–ª–µ–µ —á–µ—Ç–∫–æ–µ —Ñ–æ—Ç–æ"]}
        
        –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π —Ä–µ–∞–ª—å–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –Ω–µ –∑–∞–≤—ã—à–∞–π. –¢–û–õ–¨–ö–û JSON –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π!
        """;

    public OpenAIService(@Value("${openai.api-key}") String apiKey, ImageProcessor imageProcessor) {
        this.apiKey = apiKey;
        this.openAiService = new OpenAiService(apiKey, Duration.ofSeconds(60));
        this.objectMapper = new ObjectMapper();
        this.imageProcessor = imageProcessor;
    }

    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–æ—Ç–æ –µ–¥—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
     * –†–µ–∑—É–ª—å—Ç–∞—Ç –∫—ç—à–∏—Ä—É–µ—Ç—Å—è –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    @Cacheable(value = "nutritionAnalysis", key = "#imageBase64.hashCode()")
    public NutritionAnalysis analyzeFoodImage(String imageBase64) {
        try {
            logger.info("–ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ–¥—ã —á–µ—Ä–µ–∑ OpenAI GPT-4V");
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π HTTP –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            String httpResponse = sendImageToOpenAI(imageBase64);
            
            if (httpResponse == null || httpResponse.trim().isEmpty()) {
                logger.warn("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI");
                return createErrorAnalysis("OpenAI –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
            }
            
            // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –∫–∞–∫ ChatCompletion —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            JsonNode jsonResponse = objectMapper.readTree(httpResponse);
            
            // –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å
            if (jsonResponse.has("usage")) {
                JsonNode usage = jsonResponse.get("usage");
                logger.info("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ - –í—Ö–æ–¥—è—â–∏–µ: {}, –ò—Å—Ö–æ–¥—è—â–∏–µ: {}, –í—Å–µ–≥–æ: {}", 
                    usage.get("prompt_tokens").asInt(),
                    usage.get("completion_tokens").asInt(),
                    usage.get("total_tokens").asInt());
            }
            
            if (jsonResponse.has("choices") && jsonResponse.get("choices").size() > 0) {
                String content = jsonResponse.get("choices").get(0).get("message").get("content").asText();
                logger.info("–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç OpenAI: {}", content);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç–∫–∞–∑ OpenAI –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                if (content.contains("I'm sorry") || 
                    content.contains("I can't") || 
                    content.contains("cannot") ||
                    content.contains("unable to") ||
                    content.contains("–ò–∑–≤–∏–Ω–∏—Ç–µ") ||
                    content.contains("–Ω–µ –º–æ–≥—É") ||
                    content.contains("–Ω–µ —Å–º–æ–≥—É")) {
                    logger.warn("OpenAI –æ—Ç–∫–∞–∑–∞–ª—Å—è –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {}", content.substring(0, Math.min(100, content.length())));
                    return createErrorAnalysis("OpenAI –Ω–µ —Å–º–æ–≥ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.");
                }
                
                // –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ JSON –æ—Ç–≤–µ—Ç–∞
                try {
                    // –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å—Ç—ã–π JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
                    String cleanJson = extractJsonFromResponse(content);
                    logger.info("üîç –û—Ç–≤–µ—Ç OpenAI (–ø–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤): {}", content.substring(0, Math.min(300, content.length())));
                    logger.debug("–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π JSON: {}", cleanJson);
                    
                    // –ü–∞—Ä—Å–∏–º JSON
                    NutritionAnalysis analysis = objectMapper.readValue(cleanJson, NutritionAnalysis.class);
                    
                    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    if (isValidAnalysis(analysis)) {
                        logger.info("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –∞–Ω–∞–ª–∏–∑: {} –∫–∫–∞–ª, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {}", 
                            analysis.getTotalCalories(), analysis.getConfidenceLevel());
                        return analysis;
                    } else {
                        logger.warn("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∞–Ω–∞–ª–∏–∑–µ");
                        return createErrorAnalysis("–ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
                    }
                    
                } catch (JsonProcessingException e) {
                    logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {}", e.getMessage());
                    logger.debug("–ü—Ä–æ–±–ª–µ–º–Ω—ã–π –æ—Ç–≤–µ—Ç (–ø–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤): {}", 
                        content.substring(0, Math.min(300, content.length())));
                    return createErrorAnalysis("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
                }
                
            } else {
                logger.warn("OpenAI –Ω–µ –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.");
                return createErrorAnalysis("OpenAI –Ω–µ –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            }
            
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ–¥—ã: {}", e.getMessage(), e);
            
            // FALLBACK: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ
            if (e.getMessage().contains("unsupported_country") || 
                e.getMessage().contains("region") ||
                e.getMessage().contains("Request too large") ||
                e.getMessage().contains("tokens per min") ||
                e.getMessage().contains("maximum context length") ||
                e.getMessage().contains("resulted in") && e.getMessage().contains("tokens") ||
                e.getMessage().contains("Limit") && e.getMessage().contains("Requested") ||
                e.getMessage().contains("input or output tokens must be reduced") ||
                e.getMessage().contains("–Ω–µ –º–æ–≥—É –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è") ||
                e.getMessage().contains("can't analyze") ||
                e.getMessage().contains("can't interpret images") ||
                e.getMessage().contains("Rate limit reached") ||
                e.getMessage().contains("Unrecognized token")) {
                
                logger.warn("‚ö†Ô∏è OpenAI –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤: {}", 
                    e.getMessage().substring(0, Math.min(150, e.getMessage().length())));
                return createErrorAnalysis("üîß –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞.");
            }
            
            return createErrorAnalysis("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: " + e.getMessage());
        }
    }

    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–æ—Ç–æ –µ–¥—ã –∏–∑ —Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    public NutritionAnalysis analyzeFoodImageFromFile(File imageFile) {
        try {
            // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            byte[] imageBytes = java.nio.file.Files.readAllBytes(imageFile.toPath());
            
            return analyzeFoodImageFromBytes(imageBytes, imageFile.getName());
            
        } catch (IOException e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {}", e.getMessage(), e);
            return createErrorAnalysis("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: " + e.getMessage());
        }
    }
    
    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–æ—Ç–æ –µ–¥—ã –∏–∑ –º–∞—Å—Å–∏–≤–∞ –±–∞–π—Ç —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
     */
    public NutritionAnalysis analyzeFoodImageFromBytes(byte[] imageBytes, String fileName) {
        try {
            logger.info("üîç –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {}, —Ä–∞–∑–º–µ—Ä: {} bytes", fileName, imageBytes.length);
            
            // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            ImageProcessor.ImageValidationResult validation = imageProcessor.validateImage(imageBytes, fileName);
            if (!validation.isValid()) {
                logger.warn("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞: {}", validation.getMessage());
                return createErrorAnalysis("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: " + validation.getMessage());
            }
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è OpenAI
            ImageProcessor.ProcessedImage processedImage = imageProcessor.processImageForAI(
                imageBytes, getFileExtension(fileName));
            
            logger.info("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {}x{}, {} bytes, —Å–∂–∞—Ç–∏–µ: {:.1f}%", 
                processedImage.getWidth(), processedImage.getHeight(), 
                processedImage.getFileSize(), processedImage.getCompressionRatio());
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            return analyzeFoodImage(processedImage.getBase64Data());
            
        } catch (Exception e) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {}", e.getMessage(), e);
            return createErrorAnalysis("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: " + e.getMessage());
        }
    }
    
    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
     */
    private String getFileExtension(String fileName) {
        if (fileName == null || !fileName.contains(".")) {
            return "jpg";
        }
        return fileName.substring(fileName.lastIndexOf(".") + 1).toLowerCase();
    }

    /**
     * –ß–∞—Ç-–±–æ—Ç –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –ø–∏—Ç–∞–Ω–∏–∏ –∏ —Ñ–∏—Ç–Ω–µ—Å–µ
     */
    public String chatWithNutritionBot(String userMessage, String userContext) {
        try {
            logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", userMessage);
            
            String systemPrompt = """
                –¢—ã - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å —Ç—Ä–µ–Ω–µ—Ä –∏ –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ FitCoach. –û–±—Ä–∞—â–∞–π—Å—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ "—Ç—ã".
                
                üìã –°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–û–í:
                
                üéØ **–ì–ª–∞–≤–Ω–æ–µ:** [–∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç]
                
                üìä **–î–µ—Ç–∞–ª–∏:**
                ‚Ä¢ –ü—É–Ω–∫—Ç 1
                ‚Ä¢ –ü—É–Ω–∫—Ç 2  
                ‚Ä¢ –ü—É–Ω–∫—Ç 3
                
                üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
                ‚úÖ –ß—Ç–æ –¥–µ–ª–∞—Ç—å
                ‚ùå –ß–µ–≥–æ –∏–∑–±–µ–≥–∞—Ç—å
                
                üöÄ **–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:** [–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ]
                
                –¢–í–û–Ø –†–û–õ–¨ –ö–ê–ö –¢–†–ï–ù–ï–†–ê:
                - –ú–æ—Ç–∏–≤–∏—Ä—É–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π 
                - –î–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–ª–∞–Ω—ã –¥–µ–π—Å—Ç–≤–∏–π
                - –û–±—ä—è—Å–Ω—è–π "–ø–æ—á–µ–º—É" –∑–∞ –∫–∞–∂–¥—ã–º —Å–æ–≤–µ—Ç–æ–º
                - –ê–¥–∞–ø—Ç–∏—Ä—É–π —Å–æ–≤–µ—Ç—ã –ø–æ–¥ —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                - –û—Ç—Å–ª–µ–∂–∏–≤–∞–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π –ø–æ–¥—Ö–æ–¥
                
                –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: """ + (userContext != null ? userContext : "–ù–æ–≤—ã–π –ø–æ–¥–æ–ø–µ—á–Ω—ã–π") + """
                
                –ü–∏—à–∏ –ø–æ-—Ä—É—Å—Å–∫–∏, –±—É–¥—å –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º –Ω–æ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.
                """;

            List<ChatMessage> messages = Arrays.asList(
                new ChatMessage(ChatMessageRole.SYSTEM.value(), systemPrompt),
                new ChatMessage(ChatMessageRole.USER.value(), userMessage)
            );

            ChatCompletionRequest chatRequest = ChatCompletionRequest.builder()
                    .model("gpt-4o-mini") // GPT-4o-mini –¥–ª—è —á–∞—Ç–∞ - –≤ 4 —Ä–∞–∑–∞ –¥–µ—à–µ–≤–ª–µ GPT-4
                    .messages(messages)
                    .maxTokens(400) // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏
                    .temperature(0.7) // –£–º–µ—Ä–µ–Ω–Ω–∞—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å
                    .build();

            var completion = openAiService.createChatCompletion(chatRequest);
            String response = completion.getChoices().get(0).getMessage().getContent();
            
            logger.info("–û—Ç–≤–µ—Ç —á–∞—Ç-–±–æ—Ç–∞: {}", response);
            return response;
            
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –≤ —á–∞—Ç-–±–æ—Ç–µ: {}", e.getMessage(), e);
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é
     */
    public List<String> generateNutritionRecommendations(String userGoals, String currentDiet, String restrictions) {
        try {
            String prompt = String.format("""
                –°–æ–∑–¥–∞–π 3-5 –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –ø–∏—Ç–∞–Ω–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
                
                –¶–µ–ª–∏: %s
                –¢–µ–∫—É—â–∏–π —Ä–∞—Ü–∏–æ–Ω: %s  
                –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: %s
                
                –í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ –∫–æ—Ä–æ—Ç–∫–∏—Ö, –ø—Ä–∞–∫—Ç–∏—á–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
                –ö–∞–∂–¥—ã–π —Å–æ–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ –≤—ã–ø–æ–ª–Ω–∏–º—ã–º.
                """, 
                userGoals != null ? userGoals : "–û–±—â–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è",
                currentDiet != null ? currentDiet : "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞—Ü–∏–æ–Ω",
                restrictions != null ? restrictions : "–ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
            );

            List<ChatMessage> messages = Arrays.asList(
                new ChatMessage(ChatMessageRole.USER.value(), prompt)
            );

            ChatCompletionRequest chatRequest = ChatCompletionRequest.builder()
                    .model("gpt-4o-mini") // –≠–∫–æ–Ω–æ–º–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
                    .messages(messages)
                    .maxTokens(300) // –ö–æ—Ä–æ—Ç–∫–∏–µ, –Ω–æ –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
                    .temperature(0.8)
                    .build();

            var completion = openAiService.createChatCompletion(chatRequest);
            String response = completion.getChoices().get(0).getMessage().getContent();
            
            // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –≤ —Å–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            return Arrays.asList(response.split("\n"));
            
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {}", e.getMessage(), e);
            return Arrays.asList("–ü–µ–π—Ç–µ –±–æ–ª—å—à–µ –≤–æ–¥—ã", "–ï—à—å—Ç–µ –±–æ–ª—å—à–µ –æ–≤–æ—â–µ–π", "–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–π");
        }
    }

    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ OpenAI (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
     */
    private String extractJsonFromResponse(String response) {
        // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–æ–±–µ–ª—ã
        response = response.trim();
        
        // –ò—â–µ–º JSON –±–ª–æ–∫ –≤ –æ—Ç–≤–µ—Ç–µ
        int startIndex = response.indexOf("{");
        int endIndex = response.lastIndexOf("}");
        
        if (startIndex != -1 && endIndex != -1 && endIndex > startIndex) {
            String json = response.substring(startIndex, endIndex + 1);
            
            // –û—á–∏—â–∞–µ–º JSON –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö markdown –±–ª–æ–∫–æ–≤
            json = json.replace("```json", "").replace("```", "").trim();
            
            return json;
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ JSON, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Å—å –æ—Ç–≤–µ—Ç
        return response.replace("```json", "").replace("```", "").trim();
    }
    
    /**
     * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø–∏—Ç–∞–Ω–∏—è
     */
    private boolean isValidAnalysis(NutritionAnalysis analysis) {
        if (analysis == null) {
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
        if (analysis.getTotalCalories() == null || analysis.getTotalCalories() < 0) {
            logger.warn("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏: {}", analysis.getTotalCalories());
            return false;
        }
        
        if (analysis.getTotalCalories() > 5000) {
            logger.warn("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫–∞–ª–æ—Ä–∏–π: {}", analysis.getTotalCalories());
            return false;
        }
        
        if (analysis.getConfidenceLevel() == null || 
            analysis.getConfidenceLevel() < 0 || analysis.getConfidenceLevel() > 1) {
            logger.warn("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {}", analysis.getConfidenceLevel());
            return false;
        }
        
        if (analysis.getDetectedFoods() == null || analysis.getDetectedFoods().isEmpty()) {
            logger.warn("–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –∞–Ω–∞–ª–∏–∑–µ");
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ë–ñ–£
        if (analysis.getTotalProteins() == null || analysis.getTotalProteins() < 0 ||
            analysis.getTotalFats() == null || analysis.getTotalFats() < 0 ||
            analysis.getTotalCarbs() == null || analysis.getTotalCarbs() < 0) {
            logger.warn("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ë–ñ–£: P={}, F={}, C={}", 
                analysis.getTotalProteins(), analysis.getTotalFats(), analysis.getTotalCarbs());
            return false;
        }
        
        return true;
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å –æ—à–∏–±–∫–æ–π
     */
    private NutritionAnalysis createErrorAnalysis(String errorMessage) {
        NutritionAnalysis analysis = new NutritionAnalysis();
        analysis.setTotalCalories(0.0);
        analysis.setTotalProteins(0.0);
        analysis.setTotalFats(0.0);
        analysis.setTotalCarbs(0.0);
        analysis.setConfidenceLevel(0.0);
        analysis.setAnalysisNotes(errorMessage);
        analysis.setDetectedFoods(new ArrayList<>());
        analysis.setHealthRecommendations(Arrays.asList("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑"));
        return analysis;
    }



    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å OpenAI API
     */
    public boolean isApiHealthy() {
        try {
            List<ChatMessage> messages = Arrays.asList(
                new ChatMessage(ChatMessageRole.USER.value(), "Hello")
            );

            ChatCompletionRequest chatRequest = ChatCompletionRequest.builder()
                    .model("gpt-3.5-turbo") // –°–∞–º–∞—è –¥–µ—à–µ–≤–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                    .messages(messages)
                    .maxTokens(5) // –ú–∏–Ω–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞
                    .build();

            openAiService.createChatCompletion(chatRequest);
            return true;
            
        } catch (Exception e) {
            logger.warn("OpenAI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {}", e.getMessage());
            return false;
        }
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ OpenAI GPT-4V —á–µ—Ä–µ–∑ HTTP API (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)
     */
    private String sendImageToOpenAI(String base64Image) {
        try {
            // –°–æ–∑–¥–∞–µ–º JSON –≤—Ä—É—á–Ω—É—é –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            String cleanPrompt = NUTRITION_ANALYSIS_PROMPT.replace("\"", "\\\"").replace("\n", " ");
            
            String requestBody = String.format("""
                {
                  "model": "gpt-4o",
                  "messages": [
                    {
                      "role": "user",
                      "content": [
                        {
                          "type": "text",
                          "text": "%s"
                        },
                        {
                          "type": "image_url",
                          "image_url": {
                            "url": "data:image/jpeg;base64,%s"
                          }
                        }
                      ]
                    }
                  ],
                  "max_tokens": 800,
                  "temperature": 0.1
                }
                """, cleanPrompt, base64Image);
            
            logger.debug("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–π JSON —Ä–∞–∑–º–µ—Ä: {} —Å–∏–º–≤–æ–ª–æ–≤", requestBody.length());
            
            HttpClient client = HttpClient.newHttpClient();
            HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create("https://api.openai.com/v1/chat/completions"))
                .header("Content-Type", "application/json")
                .header("Authorization", "Bearer " + apiKey)
                .POST(HttpRequest.BodyPublishers.ofString(requestBody))
                .build();
            
            logger.info("–û—Ç–ø—Ä–∞–≤–ª—è—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ OpenAI GPT-4V —á–µ—Ä–µ–∑ HTTP API...");
            HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
            
            if (response.statusCode() == 200) {
                logger.info("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI GPT-4V");
                logger.debug("üîç –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç OpenAI: {}", response.body().substring(0, Math.min(500, response.body().length())));
                return response.body();
            } else {
                logger.error("‚ùå OpenAI API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {} - {}", response.statusCode(), response.body());
                return null;
            }
            
        } catch (Exception e) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ HTTP –∑–∞–ø—Ä–æ—Å–∞ –≤ OpenAI: {}", e.getMessage(), e);
            return null;
        }
    }

} 