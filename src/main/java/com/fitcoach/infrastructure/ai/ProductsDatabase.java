package com.fitcoach.infrastructure.ai;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import java.util.*;
import java.util.stream.Collectors;

/**
 * –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –∫—É—Ö–Ω–∏
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ò–ò –∞–Ω–∞–ª–∏–∑–æ–º –∏ fallback
 */
@Service
public class ProductsDatabase {
    
    private static final Logger logger = LoggerFactory.getLogger(ProductsDatabase.class);
    
    private final Map<String, FoodProduct> productsDB;
    private final Map<String, List<String>> categoryKeywords;
    
    public ProductsDatabase() {
        this.productsDB = initializeProductsDatabase();
        this.categoryKeywords = initializeCategoryKeywords();
        logger.info("üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –±–∞–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {} –ø—Ä–æ–¥—É–∫—Ç–æ–≤", productsDB.size());
    }
    
    /**
     * –ò—â–µ—Ç –ø—Ä–æ–¥—É–∫—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–µ—á–µ—Ç–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
     */
    public Optional<FoodProduct> findProduct(String foodName) {
        if (foodName == null || foodName.trim().isEmpty()) {
            return Optional.empty();
        }
        
        String normalizedName = normalizeProductName(foodName);
        
        // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        FoodProduct exactMatch = productsDB.get(normalizedName);
        if (exactMatch != null) {
            logger.debug("–ù–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {}", foodName);
            return Optional.of(exactMatch);
        }
        
        // –ù–µ—á–µ—Ç–∫–∏–π –ø–æ–∏—Å–∫
        Optional<FoodProduct> fuzzyMatch = findFuzzyMatch(normalizedName);
        if (fuzzyMatch.isPresent()) {
            logger.debug("–ù–∞–π–¥–µ–Ω–æ –Ω–µ—á–µ—Ç–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {} -> {}", foodName, fuzzyMatch.get().getName());
            return fuzzyMatch;
        }
        
        return Optional.empty();
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    public List<FoodProduct> getProductsByCategory(String category) {
        List<String> keywords = categoryKeywords.get(category.toLowerCase());
        if (keywords == null || keywords.isEmpty()) {
            return Collections.emptyList();
        }
        
        return productsDB.values().stream()
            .filter(product -> keywords.stream()
                .anyMatch(keyword -> product.getName().toLowerCase().contains(keyword)))
            .collect(Collectors.toList());
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
     */
    public NutritionAnalysis createAnalysisFromProduct(FoodProduct product, String quantity, double weightGrams) {
        NutritionAnalysis analysis = new NutritionAnalysis();
        
        // –í—ã—á–∏—Å–ª—è–µ–º –ø–∏—â–µ–≤—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–µ—Å–∞
        double multiplier = weightGrams / 100.0; // –ë–ñ–£ —É–∫–∞–∑–∞–Ω—ã –Ω–∞ 100–≥
        
        double calories = product.getCalories() * multiplier;
        double proteins = product.getProteins() * multiplier;
        double fats = product.getFats() * multiplier;
        double carbs = product.getCarbs() * multiplier;
        
        analysis.setTotalCalories(calories);
        analysis.setTotalProteins(proteins);
        analysis.setTotalFats(fats);
        analysis.setTotalCarbs(carbs);
        analysis.setConfidenceLevel(0.9); // –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
        // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        NutritionAnalysis.DetectedFood detectedFood = new NutritionAnalysis.DetectedFood(
            product.getName(), quantity, calories, proteins, fats, carbs, 0.9
        );
        analysis.setDetectedFoods(Collections.singletonList(detectedFood));
        
        analysis.setAnalysisNotes(String.format(
            "–î–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è %s (%s)", product.getName(), quantity));
        
        analysis.setHealthRecommendations(generateHealthRecommendations(product));
        
        return analysis;
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤
     */
    private Map<String, FoodProduct> initializeProductsDatabase() {
        Map<String, FoodProduct> db = new HashMap<>();
        
        // –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –±–ª—é–¥–∞
        addProduct(db, "–±–æ—Ä—â", 45, 2.8, 1.8, 6.5, "—Å—É–ø");
        addProduct(db, "—â–∏", 38, 2.1, 1.4, 5.8, "—Å—É–ø");
        addProduct(db, "—Å–æ–ª—è–Ω–∫–∞", 65, 4.2, 3.8, 5.2, "—Å—É–ø");
        addProduct(db, "–æ–∫—Ä–æ—à–∫–∞", 52, 2.8, 1.9, 7.3, "—Å—É–ø");
        
        // –ö–∞—à–∏
        addProduct(db, "–≥—Ä–µ—á–Ω–µ–≤–∞—è –∫–∞—à–∞", 132, 4.5, 2.3, 25.0, "–∫–∞—à–∞");
        addProduct(db, "—Ä–∏—Å–æ–≤–∞—è –∫–∞—à–∞", 116, 2.2, 0.5, 25.8, "–∫–∞—à–∞");
        addProduct(db, "–æ–≤—Å—è–Ω–∞—è –∫–∞—à–∞", 88, 3.0, 1.7, 15.0, "–∫–∞—à–∞");
        addProduct(db, "–º–∞–Ω–Ω–∞—è –∫–∞—à–∞", 98, 3.0, 3.2, 15.3, "–∫–∞—à–∞");
        
        // –ú—è—Å–Ω—ã–µ –±–ª—é–¥–∞
        addProduct(db, "–∫–æ—Ç–ª–µ—Ç—ã", 250, 18.2, 18.4, 5.9, "–º—è—Å–æ");
        addProduct(db, "—à–Ω–∏—Ü–µ–ª—å", 234, 19.8, 15.6, 4.2, "–º—è—Å–æ");
        addProduct(db, "–±–µ—Ñ—Å—Ç—Ä–æ–≥–∞–Ω–æ–≤", 193, 16.7, 11.9, 5.9, "–º—è—Å–æ");
        addProduct(db, "–∂–∞—Ä–µ–Ω–∞—è –∫—É—Ä–∏—Ü–∞", 204, 20.8, 8.8, 6.2, "–ø—Ç–∏—Ü–∞");
        addProduct(db, "–ø–ª–æ–≤", 196, 6.0, 6.7, 30.4, "–≥–∞—Ä–Ω–∏—Ä");
        
        // –†—ã–±–Ω—ã–µ –±–ª—é–¥–∞
        addProduct(db, "–∂–∞—Ä–µ–Ω–∞—è —Ä—ã–±–∞", 145, 19.2, 6.8, 1.8, "—Ä—ã–±–∞");
        addProduct(db, "—Ä—ã–±–Ω—ã–µ –∫–æ—Ç–ª–µ—Ç—ã", 168, 16.4, 8.9, 6.1, "—Ä—ã–±–∞");
        addProduct(db, "—Å–µ–ª–µ–¥–∫–∞ –ø–æ–¥ —à—É–±–æ–π", 208, 8.2, 17.9, 4.1, "—Å–∞–ª–∞—Ç");
        
        // –û–≤–æ—â–Ω—ã–µ –±–ª—é–¥–∞
        addProduct(db, "–≤–∏–Ω–µ–≥—Ä–µ—Ç", 76, 1.6, 4.6, 8.2, "—Å–∞–ª–∞—Ç");
        addProduct(db, "–æ–ª–∏–≤—å–µ", 198, 5.5, 16.5, 7.8, "—Å–∞–ª–∞—Ç");
        addProduct(db, "–≥—Ä–µ—á–µ—Å–∫–∏–π —Å–∞–ª–∞—Ç", 188, 4.2, 17.4, 4.2, "—Å–∞–ª–∞—Ç");
        addProduct(db, "—Ü–µ–∑–∞—Ä—å", 301, 14.8, 16.2, 25.9, "—Å–∞–ª–∞—Ç");
        
        // –í—ã–ø–µ—á–∫–∞ –∏ —Ö–ª–µ–±
        addProduct(db, "—á–µ—Ä–Ω—ã–π —Ö–ª–µ–±", 214, 6.6, 1.2, 40.9, "—Ö–ª–µ–±");
        addProduct(db, "–±–µ–ª—ã–π —Ö–ª–µ–±", 242, 8.1, 1.0, 48.8, "—Ö–ª–µ–±");
        addProduct(db, "–±–ª–∏–Ω—ã", 233, 6.1, 12.3, 26.0, "–≤—ã–ø–µ—á–∫–∞");
        addProduct(db, "–æ–ª–∞–¥—å–∏", 194, 6.2, 3.9, 35.1, "–≤—ã–ø–µ—á–∫–∞");
        addProduct(db, "—Å—ã—Ä–Ω–∏–∫–∏", 220, 18.6, 7.0, 18.4, "–≤—ã–ø–µ—á–∫–∞");
        
        // –ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
        addProduct(db, "—Ç–≤–æ—Ä–æ–≥", 103, 16.7, 0.6, 1.8, "–º–æ–ª–æ—á–Ω–æ–µ");
        addProduct(db, "–∫–µ—Ñ–∏—Ä", 40, 2.8, 0.1, 3.8, "–º–æ–ª–æ—á–Ω–æ–µ");
        addProduct(db, "–π–æ–≥—É—Ä—Ç", 66, 5.0, 3.2, 3.5, "–º–æ–ª–æ—á–Ω–æ–µ");
        addProduct(db, "—Å–º–µ—Ç–∞–Ω–∞", 206, 2.8, 20.0, 3.2, "–º–æ–ª–æ—á–Ω–æ–µ");
        
        // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
        addProduct(db, "–º–∞–∫–∞—Ä–æ–Ω—ã", 112, 3.4, 0.4, 23.2, "–≥–∞—Ä–Ω–∏—Ä");
        addProduct(db, "–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å –æ—Ç–≤–∞—Ä–Ω–æ–π", 82, 2.0, 0.4, 16.1, "–≥–∞—Ä–Ω–∏—Ä");
        addProduct(db, "–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å –∂–∞—Ä–µ–Ω—ã–π", 192, 2.8, 9.5, 23.4, "–≥–∞—Ä–Ω–∏—Ä");
        addProduct(db, "–ø—é—Ä–µ", 106, 2.3, 4.2, 14.3, "–≥–∞—Ä–Ω–∏—Ä");
        
        // –§–∞—Å—Ç—Ñ—É–¥
        addProduct(db, "–±—É—Ä–≥–µ—Ä", 540, 25.0, 31.0, 40.0, "—Ñ–∞—Å—Ç—Ñ—É–¥");
        addProduct(db, "–ø–∏—Ü—Ü–∞", 266, 11.0, 10.4, 33.5, "—Ñ–∞—Å—Ç—Ñ—É–¥");
        addProduct(db, "—à–∞—É—Ä–º–∞", 309, 16.0, 15.0, 30.0, "—Ñ–∞—Å—Ç—Ñ—É–¥");
        
        return db;
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
     */
    private Map<String, List<String>> initializeCategoryKeywords() {
        Map<String, List<String>> keywords = new HashMap<>();
        
        keywords.put("—Å—É–ø", Arrays.asList("–±–æ—Ä—â", "—â–∏", "—Å–æ–ª—è–Ω–∫–∞", "–æ–∫—Ä–æ—à–∫–∞", "—Ö–∞—Ä—á–æ", "—Å—É–ø"));
        keywords.put("–∫–∞—à–∞", Arrays.asList("–∫–∞—à–∞", "–≥—Ä–µ—á–Ω–µ–≤–∞—è", "—Ä–∏—Å–æ–≤–∞—è", "–æ–≤—Å—è–Ω–∞—è", "–º–∞–Ω–Ω–∞—è"));
        keywords.put("–º—è—Å–æ", Arrays.asList("–∫–æ—Ç–ª–µ—Ç—ã", "—à–Ω–∏—Ü–µ–ª—å", "–º—è—Å–æ", "–≥–æ–≤—è–¥–∏–Ω–∞", "—Å–≤–∏–Ω–∏–Ω–∞", "–±–∞—Ä–∞–Ω–∏–Ω–∞"));
        keywords.put("–ø—Ç–∏—Ü–∞", Arrays.asList("–∫—É—Ä–∏—Ü–∞", "–ø—Ç–∏—Ü–∞", "–∏–Ω–¥–µ–π–∫–∞", "—É—Ç–∫–∞"));
        keywords.put("—Ä—ã–±–∞", Arrays.asList("—Ä—ã–±–∞", "—Å–µ–ª–µ–¥–∫–∞", "—Å–µ–º–≥–∞", "—Ç—Ä–µ—Å–∫–∞", "—Å—É–¥–∞–∫"));
        keywords.put("—Å–∞–ª–∞—Ç", Arrays.asList("—Å–∞–ª–∞—Ç", "–≤–∏–Ω–µ–≥—Ä–µ—Ç", "–æ–ª–∏–≤—å–µ", "—Ü–µ–∑–∞—Ä—å", "–≥—Ä–µ—á–µ—Å–∫–∏–π"));
        keywords.put("–º–æ–ª–æ—á–Ω–æ–µ", Arrays.asList("—Ç–≤–æ—Ä–æ–≥", "–∫–µ—Ñ–∏—Ä", "–º–æ–ª–æ–∫–æ", "–π–æ–≥—É—Ä—Ç", "—Å–º–µ—Ç–∞–Ω–∞"));
        keywords.put("–≤—ã–ø–µ—á–∫–∞", Arrays.asList("–±–ª–∏–Ω—ã", "–æ–ª–∞–¥—å–∏", "—Å—ã—Ä–Ω–∏–∫–∏", "–ø–∏—Ä–æ–≥", "–±—É–ª–∫–∞"));
        
        return keywords;
    }
    
    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ–¥—É–∫—Ç –≤ –±–∞–∑—É
     */
    private void addProduct(Map<String, FoodProduct> db, String name, double calories, 
                          double proteins, double fats, double carbs, String category) {
        FoodProduct product = new FoodProduct(name, calories, proteins, fats, carbs, category);
        db.put(normalizeProductName(name), product);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        for (String alt : generateAlternativeNames(name)) {
            db.put(normalizeProductName(alt), product);
        }
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
     */
    private List<String> generateAlternativeNames(String name) {
        List<String> alternatives = new ArrayList<>();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –±–µ–∑ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã—Ö
        if (name.contains(" ")) {
            String[] words = name.split(" ");
            if (words.length == 2) {
                alternatives.add(words[1]); // "–≥—Ä–µ—á–Ω–µ–≤–∞—è –∫–∞—à–∞" -> "–∫–∞—à–∞"
                alternatives.add(words[0]); // "–≥—Ä–µ—á–Ω–µ–≤–∞—è –∫–∞—à–∞" -> "–≥—Ä–µ—á–Ω–µ–≤–∞—è"
            }
        }
        
        return alternatives;
    }
    
    /**
     * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
     */
    private String normalizeProductName(String name) {
        return name.toLowerCase()
            .replaceAll("[^–∞-—è—ë\\s]", "")
            .replaceAll("\\s+", " ")
            .trim();
    }
    
    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–µ—á–µ—Ç–∫–∏–π –ø–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–∞
     */
    private Optional<FoodProduct> findFuzzyMatch(String searchName) {
        return productsDB.entrySet().stream()
            .filter(entry -> {
                String productName = entry.getKey();
                return calculateSimilarity(searchName, productName) > 0.7;
            })
            .map(Map.Entry::getValue)
            .findFirst();
    }
    
    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ö–æ–∂–µ—Å—Ç—å —Å—Ç—Ä–æ–∫ (–ø—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º)
     */
    private double calculateSimilarity(String s1, String s2) {
        String longer = s1.length() > s2.length() ? s1 : s2;
        String shorter = s1.length() > s2.length() ? s2 : s1;
        
        if (longer.length() == 0) {
            return 1.0;
        }
        
        if (longer.contains(shorter) || shorter.contains(longer)) {
            return 0.8;
        }
        
        return (longer.length() - editDistance(longer, shorter)) / (double) longer.length();
    }
    
    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞)
     */
    private int editDistance(String s1, String s2) {
        s1 = s1.toLowerCase();
        s2 = s2.toLowerCase();
        
        int[] costs = new int[s2.length() + 1];
        for (int i = 0; i <= s1.length(); i++) {
            int lastValue = i;
            for (int j = 0; j <= s2.length(); j++) {
                if (i == 0) {
                    costs[j] = j;
                } else {
                    if (j > 0) {
                        int newValue = costs[j - 1];
                        if (s1.charAt(i - 1) != s2.charAt(j - 1)) {
                            newValue = Math.min(Math.min(newValue, lastValue), costs[j]) + 1;
                        }
                        costs[j - 1] = lastValue;
                        lastValue = newValue;
                    }
                }
            }
            if (i > 0) {
                costs[s2.length()] = lastValue;
            }
        }
        return costs[s2.length()];
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞
     */
    private List<String> generateHealthRecommendations(FoodProduct product) {
        List<String> recommendations = new ArrayList<>();
        
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        switch (product.getCategory()) {
            case "–º—è—Å–æ":
                recommendations.add("ü•ó –î–æ–±–∞–≤—å—Ç–µ –æ–≤–æ—â–Ω–æ–π –≥–∞—Ä–Ω–∏—Ä –¥–ª—è –ª—É—á—à–µ–≥–æ —É—Å–≤–æ–µ–Ω–∏—è");
                recommendations.add("üíß –£–≤–µ–ª–∏—á—å—Ç–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–æ–¥—ã –ø—Ä–∏ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏ –º—è—Å–∞");
                break;
            case "–∫–∞—à–∞":
                recommendations.add("üçì –î–æ–±–∞–≤—å—Ç–µ —è–≥–æ–¥—ã –∏–ª–∏ —Ñ—Ä—É–∫—Ç—ã –¥–ª—è –≤–∏—Ç–∞–º–∏–Ω–æ–≤");
                recommendations.add("ü•ú –û—Ä–µ—Ö–∏ –∏–ª–∏ —Å–µ–º–µ–Ω–∞ —É–≤–µ–ª–∏—á–∞—Ç –ø–∏—â–µ–≤—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å");
                break;
            case "—Å–∞–ª–∞—Ç":
                recommendations.add("ü´í –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ –¥–ª—è –∑–∞–ø—Ä–∞–≤–∫–∏");
                recommendations.add("üåø –î–æ–±–∞–≤—å—Ç–µ –∑–µ–ª–µ–Ω—å –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–∏—Ç–∞–º–∏–Ω–æ–≤");
                break;
            default:
                recommendations.add("ü•õ –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ –≤–æ–¥–Ω—ã–π –±–∞–ª–∞–Ω—Å");
                recommendations.add("üö∂ –£–º–µ—Ä–µ–Ω–Ω–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–º–æ–∂–µ—Ç —É—Å–≤–æ–µ–Ω–∏—é");
        }
        
        return recommendations;
    }
    
    /**
     * –ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
     */
    public static class FoodProduct {
        private final String name;
        private final double calories;
        private final double proteins;
        private final double fats;
        private final double carbs;
        private final String category;
        
        public FoodProduct(String name, double calories, double proteins, double fats, 
                          double carbs, String category) {
            this.name = name;
            this.calories = calories;
            this.proteins = proteins;
            this.fats = fats;
            this.carbs = carbs;
            this.category = category;
        }
        
        // Getters
        public String getName() { return name; }
        public double getCalories() { return calories; }
        public double getProteins() { return proteins; }
        public double getFats() { return fats; }
        public double getCarbs() { return carbs; }
        public String getCategory() { return category; }
        
        @Override
        public String toString() {
            return String.format("%s: %.0f –∫–∫–∞–ª (–ë:%.1f –ñ:%.1f –£:%.1f)", 
                name, calories, proteins, fats, carbs);
        }
    }
} 