package com.fitcoach.infrastructure.ai;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import javax.imageio.ImageIO;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Base64;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª–∏–∑–æ–º
 * –í–∫–ª—é—á–∞–µ—Ç —Å–∂–∞—Ç–∏–µ, –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –¥–ª—è OpenAI API
 */
@Service
public class ImageProcessor {
    
    private static final Logger logger = LoggerFactory.getLogger(ImageProcessor.class);
    
    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è OpenAI (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤)
    private static final int MAX_WIDTH = 512;  // –£–º–µ–Ω—å—à–µ–Ω–æ —Å 2048 –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
    private static final int MAX_HEIGHT = 512; // –£–º–µ–Ω—å—à–µ–Ω–æ —Å 2048 –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤  
    private static final long MAX_FILE_SIZE = 512 * 1024; // 512KB –≤–º–µ—Å—Ç–æ 4MB
    private static final float JPEG_QUALITY = 0.6f; // –ë–æ–ª—å—à–µ —Å–∂–∞—Ç–∏–µ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≤ OpenAI
     */
    public ProcessedImage processImageForAI(byte[] imageBytes, String originalFormat) {
        try {
            logger.info("üñºÔ∏è –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {} bytes, —Ñ–æ—Ä–º–∞—Ç: {}", 
                imageBytes.length, originalFormat);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            BufferedImage originalImage = ImageIO.read(new ByteArrayInputStream(imageBytes));
            if (originalImage == null) {
                throw new IllegalArgumentException("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ");
            }
            
            int originalWidth = originalImage.getWidth();
            int originalHeight = originalImage.getHeight();
            logger.debug("–ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {}x{}", originalWidth, originalHeight);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
            BufferedImage processedImage = originalImage;
            boolean wasResized = false;
            
            if (originalWidth > MAX_WIDTH || originalHeight > MAX_HEIGHT) {
                processedImage = resizeImage(originalImage, MAX_WIDTH, MAX_HEIGHT);
                wasResized = true;
                logger.info("üìè –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –¥–æ: {}x{}", 
                    processedImage.getWidth(), processedImage.getHeight());
            }
            
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JPEG –¥–ª—è –ª—É—á—à–µ–≥–æ —Å–∂–∞—Ç–∏—è
            byte[] processedBytes = convertToJPEG(processedImage, JPEG_QUALITY);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if (processedBytes.length > MAX_FILE_SIZE) {
                logger.warn("‚ö†Ô∏è –§–∞–π–ª –≤—Å–µ –µ—â–µ –±–æ–ª—å—à–æ–π –ø–æ—Å–ª–µ —Å–∂–∞—Ç–∏—è: {} bytes", processedBytes.length);
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∂–∞—Ç–∏–µ
                processedBytes = convertToJPEG(processedImage, 0.6f);
            }
            
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
            String base64Image = Base64.getEncoder().encodeToString(processedBytes);
            
            ProcessedImage result = new ProcessedImage(
                base64Image,
                processedImage.getWidth(),
                processedImage.getHeight(),
                processedBytes.length,
                wasResized,
                calculateCompressionRatio(imageBytes.length, processedBytes.length)
            );
            
            logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {}x{}, {} bytes, —Å–∂–∞—Ç–∏–µ: {:.1f}%", 
                result.getWidth(), result.getHeight(), result.getFileSize(), result.getCompressionRatio());
            
            return result;
            
        } catch (Exception e) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {}", e.getMessage(), e);
            throw new RuntimeException("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: " + e.getMessage(), e);
        }
    }
    
    /**
     * –ò–∑–º–µ–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
     */
    private BufferedImage resizeImage(BufferedImage original, int maxWidth, int maxHeight) {
        int originalWidth = original.getWidth();
        int originalHeight = original.getHeight();
        
        // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
        double widthRatio = (double) maxWidth / originalWidth;
        double heightRatio = (double) maxHeight / originalHeight;
        double ratio = Math.min(widthRatio, heightRatio);
        
        int newWidth = (int) (originalWidth * ratio);
        int newHeight = (int) (originalHeight * ratio);
        
        BufferedImage resized = new BufferedImage(newWidth, newHeight, BufferedImage.TYPE_INT_RGB);
        Graphics2D g2d = resized.createGraphics();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–µ—Å–∞–π–∑–∞
        g2d.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
        g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        
        g2d.drawImage(original, 0, 0, newWidth, newHeight, null);
        g2d.dispose();
        
        return resized;
    }
    
    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ JPEG —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º
     */
    private byte[] convertToJPEG(BufferedImage image, float quality) throws IOException {
        // –°–æ–∑–¥–∞–µ–º RGB –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (JPEG –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å)
        BufferedImage rgbImage = new BufferedImage(
            image.getWidth(), image.getHeight(), BufferedImage.TYPE_INT_RGB);
        
        Graphics2D g2d = rgbImage.createGraphics();
        g2d.setColor(Color.WHITE); // –ë–µ–ª—ã–π —Ñ–æ–Ω –≤–º–µ—Å—Ç–æ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
        g2d.fillRect(0, 0, image.getWidth(), image.getHeight());
        g2d.drawImage(image, 0, 0, null);
        g2d.dispose();
        
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        ImageIO.write(rgbImage, "jpg", baos);
        
        return baos.toByteArray();
    }
    
    /**
     * –ü—Ä–æ–≤–æ–¥–∏—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    public ImageValidationResult validateImage(byte[] imageBytes, String fileName) {
        try {
            if (imageBytes == null || imageBytes.length == 0) {
                return new ImageValidationResult(false, "–§–∞–π–ª –ø—É—Å—Ç–æ–π");
            }
            
            if (imageBytes.length > 20 * 1024 * 1024) { // 20MB –ª–∏–º–∏—Ç –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É
                return new ImageValidationResult(false, 
                    String.format("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: %.1f MB (–º–∞–∫—Å–∏–º—É–º 20 MB)", 
                        imageBytes.length / (1024.0 * 1024.0)));
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            BufferedImage image = ImageIO.read(new ByteArrayInputStream(imageBytes));
            if (image == null) {
                return new ImageValidationResult(false, "–§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º");
            }
            
            int width = image.getWidth();
            int height = image.getHeight();
            
            if (width < 100 || height < 100) {
                return new ImageValidationResult(false, 
                    String.format("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ: %dx%d (–º–∏–Ω–∏–º—É–º 100x100)", width, height));
            }
            
            if (width > 4096 || height > 4096) {
                logger.info("üìê –ë–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {}x{}, –±—É–¥–µ—Ç —Å–∂–∞—Ç–æ", width, height);
            }
            
            return new ImageValidationResult(true, "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
            
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {}", e.getMessage());
            return new ImageValidationResult(false, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞: " + e.getMessage());
        }
    }
    
    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∂–∞—Ç–∏—è
     */
    private double calculateCompressionRatio(long originalSize, long compressedSize) {
        if (originalSize == 0) return 0.0;
        return ((double) (originalSize - compressedSize) / originalSize) * 100.0;
    }
    
    /**
     * –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    public static class ProcessedImage {
        private final String base64Data;
        private final int width;
        private final int height;
        private final long fileSize;
        private final boolean wasResized;
        private final double compressionRatio;
        
        public ProcessedImage(String base64Data, int width, int height, long fileSize, 
                            boolean wasResized, double compressionRatio) {
            this.base64Data = base64Data;
            this.width = width;
            this.height = height;
            this.fileSize = fileSize;
            this.wasResized = wasResized;
            this.compressionRatio = compressionRatio;
        }
        
        // Getters
        public String getBase64Data() { return base64Data; }
        public int getWidth() { return width; }
        public int getHeight() { return height; }
        public long getFileSize() { return fileSize; }
        public boolean wasResized() { return wasResized; }
        public double getCompressionRatio() { return compressionRatio; }
    }
    
    /**
     * –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    public static class ImageValidationResult {
        private final boolean valid;
        private final String message;
        
        public ImageValidationResult(boolean valid, String message) {
            this.valid = valid;
            this.message = message;
        }
        
        public boolean isValid() { return valid; }
        public String getMessage() { return message; }
    }
} 