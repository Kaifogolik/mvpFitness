package com.fitcoach.infrastructure.telegram;

import com.fitcoach.domain.nutrition.FoodEntry;
import com.fitcoach.domain.nutrition.FoodEntryService;
import com.fitcoach.domain.user.User;
import com.fitcoach.domain.user.UserService;
import com.fitcoach.infrastructure.ai.NutritionAnalysis;
import com.fitcoach.infrastructure.ai.OpenAIService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;
import org.telegram.telegrambots.meta.api.objects.PhotoSize;
import org.telegram.telegrambots.meta.api.objects.Update;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Comparator;
import java.util.List;
import java.util.concurrent.CompletableFuture;

@Service
public class TelegramMessageHandler {
    
    private static final Logger logger = LoggerFactory.getLogger(TelegramMessageHandler.class);
    
    private final OpenAIService openAIService;
    private final FoodEntryService foodEntryService;
    private final UserService userService;
    private final TelegramFileHandler fileHandler;
    
    public TelegramMessageHandler(OpenAIService openAIService,
                                 FoodEntryService foodEntryService,
                                 UserService userService,
                                 TelegramFileHandler fileHandler) {
        this.openAIService = openAIService;
        this.foodEntryService = foodEntryService;
        this.userService = userService;
        this.fileHandler = fileHandler;
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ –µ–¥—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
     */
    public CompletableFuture<FoodAnalysisResult> handleFoodPhotoAnalysis(String chatId, Update update, User user) {
        return CompletableFuture.supplyAsync(() -> {
            try {
                // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
                PhotoSize photo = update.getMessage().getPhoto().stream()
                    .max(Comparator.comparing(PhotoSize::getFileSize))
                    .orElseThrow(() -> new RuntimeException("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ"));
                
                // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                MultipartFile photoFile = fileHandler.downloadTelegramPhoto(photo.getFileId());
                
                // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ OpenAI
                NutritionAnalysis analysis = openAIService.analyzeFoodPhoto(photoFile).get();
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                FoodEntry foodEntry = foodEntryService.createFromAnalysis(user, analysis, photoFile);
                
                // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                String formattedMessage = formatFoodAnalysisMessage(analysis, foodEntry);
                
                return new FoodAnalysisResult(foodEntry.getId(), formattedMessage, analysis);
                
            } catch (Exception e) {
                logger.error("Error processing food photo analysis", e);
                throw new RuntimeException("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ: " + e.getMessage());
            }
        });
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞–∫ –≤–æ–ø—Ä–æ—Å—ã –∫ –ò–ò
     */
    public CompletableFuture<String> handleAIChatMessage(String chatId, String message, User user) {
        return CompletableFuture.supplyAsync(() -> {
            try {
                // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏, —Ü–µ–ª–∏ –∏ —Ç.–¥.)
                String userContext = buildUserContext(user);
                
                // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ò–ò —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
                String aiPrompt = String.format(
                    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: %s\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n%s\n\n" +
                    "–î–∞–π –∫—Ä–∞—Ç–∫–∏–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ —Ñ–∏—Ç–Ω–µ—Å—É/–ø–∏—Ç–∞–Ω–∏—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:",
                    user.getFirstName(), message, userContext
                );
                
                // –ó–∞–ø—Ä–æ—Å –∫ OpenAI (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥)
                return generateAIResponse(aiPrompt);
                
            } catch (Exception e) {
                logger.error("Error processing AI chat message", e);
                return "–ò–∑–≤–∏–Ω–∏, –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é.";
            }
        });
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback query –æ—Ç inline –∫–Ω–æ–ø–æ–∫
     */
    public void handleCallbackQuery(String callbackData, String chatId, User user) {
        try {
            String[] parts = callbackData.split("_");
            String action = parts[0];
            
            switch (action) {
                case "stats" -> handleStatsCallback(parts[1], chatId, user);
                case "coach" -> handleCoachCallback(parts[1], chatId, user);
                case "become" -> handleBecomeCoachCallback(chatId, user);
                case "subscribe" -> handleSubscriptionCallback(chatId, user);
                case "correct" -> handleFoodCorrectionCallback(parts[1], chatId, user);
                default -> logger.warn("Unknown callback action: {}", action);
            }
        } catch (Exception e) {
            logger.error("Error handling callback query: {}", callbackData, e);
        }
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    public String formatUserProfile(User user) {
        StringBuilder profile = new StringBuilder();
        profile.append("üë§ **–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å**\n\n");
        profile.append("üìõ –ò–º—è: ").append(user.getFullName()).append("\n");
        profile.append("üéØ –†–æ–ª—å: ").append(user.getRole().getDisplayName()).append("\n");
        
        if (user.getAge() != null) {
            profile.append("üéÇ –í–æ–∑—Ä–∞—Å—Ç: ").append(user.getAge()).append(" –ª–µ—Ç\n");
        }
        
        if (user.getHeightCm() != null && user.getWeightKg() != null) {
            profile.append("üìè –†–æ—Å—Ç: ").append(user.getHeightCm()).append(" —Å–º\n");
            profile.append("‚öñÔ∏è –í–µ—Å: ").append(user.getWeightKg()).append(" –∫–≥\n");
            
            // –†–∞—Å—á–µ—Ç –ò–ú–¢
            double bmi = user.getWeightKg() / Math.pow(user.getHeightCm() / 100.0, 2);
            profile.append("üìä –ò–ú–¢: ").append(String.format("%.1f", bmi)).append("\n");
        }
        
        if (user.getFitnessGoal() != null) {
            profile.append("üéØ –¶–µ–ª—å: ").append(user.getFitnessGoal().getDisplayName()).append("\n");
        }
        
        if (user.getActivityLevel() != null) {
            profile.append("üí™ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ").append(user.getActivityLevel().getDisplayName()).append("\n");
        }
        
        profile.append("\nüíé –ü–æ–¥–ø–∏—Å–∫–∞: ").append(user.getSubscriptionType().getDisplayName());
        
        if (user.hasActiveSubscription()) {
            profile.append(" (–¥–æ ").append(user.getSubscriptionEndDate().format(DateTimeFormatter.ofPattern("dd.MM.yyyy"))).append(")");
        }
        
        return profile.toString();
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–µ–Ω–µ—Ä–∞
     */
    public String formatCoachStats(User coach) {
        // TODO: –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Å–µ—Ä–≤–∏—Å–æ–≤
        List<User> students = userService.getCoachStudents(coach.getId());
        long activeSubscriptions = students.stream()
            .filter(User::hasActiveSubscription)
            .count();
        
        StringBuilder stats = new StringBuilder();
        stats.append("üë• –£—á–µ–Ω–∏–∫–æ–≤: ").append(students.size()).append("\n");
        stats.append("üíé –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: ").append(activeSubscriptions).append("\n");
        stats.append("üí∞ –î–æ—Ö–æ–¥ –∑–∞ –º–µ—Å—è—Ü: ").append(calculateMonthlyEarnings(coach)).append("‚ÇΩ\n");
        stats.append("üìà –†–æ—Å—Ç –∑–∞ –Ω–µ–¥–µ–ª—é: +").append(calculateWeeklyGrowth(coach)).append(" —É—á–µ–Ω–∏–∫–æ–≤");
        
        return stats.toString();
    }
    
    // Private helper methods
    
    private String formatFoodAnalysisMessage(NutritionAnalysis analysis, FoodEntry foodEntry) {
        StringBuilder message = new StringBuilder();
        
        // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        message.append("üçΩ **–ê–Ω–∞–ª–∏–∑ –ø–∏—Ç–∞–Ω–∏—è**\n\n");
        
        if (analysis.getFoodItems() != null && !analysis.getFoodItems().isEmpty()) {
            message.append("üìã –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ: ").append(String.join(", ", analysis.getFoodItems())).append("\n\n");
        }
        
        // –ö–∞–ª–æ—Ä–∏–∏ –∏ –º–∞–∫—Ä–æ—Å—ã
        message.append("üî• –ö–∞–ª–æ—Ä–∏–∏: **").append(analysis.getTotalCalories()).append(" –∫–∫–∞–ª**\n");
        
        if (analysis.getProteins() != null) {
            message.append("ü•© –ë–µ–ª–∫–∏: ").append(String.format("%.1f", analysis.getProteins())).append("–≥ (")
                   .append(analysis.getProteinCalories()).append(" –∫–∫–∞–ª)\n");
        }
        
        if (analysis.getCarbs() != null) {
            message.append("üçû –£–≥–ª–µ–≤–æ–¥—ã: ").append(String.format("%.1f", analysis.getCarbs())).append("–≥ (")
                   .append(analysis.getCarbCalories()).append(" –∫–∫–∞–ª)\n");
        }
        
        if (analysis.getFats() != null) {
            message.append("ü•ë –ñ–∏—Ä—ã: ").append(String.format("%.1f", analysis.getFats())).append("–≥ (")
                   .append(analysis.getFatCalories()).append(" –∫–∫–∞–ª)\n");
        }
        
        // –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ë–ñ–£
        message.append("\nüìä ").append(analysis.getMacroBreakdown()).append("\n");
        
        // –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ò–ò
        if (analysis.getConfidence() != null) {
            int confidencePercent = (int) (analysis.getConfidence() * 100);
            String confidenceEmoji = confidencePercent >= 80 ? "‚úÖ" : confidencePercent >= 60 ? "‚ö†Ô∏è" : "‚ùì";
            message.append("\n").append(confidenceEmoji).append(" –¢–æ—á–Ω–æ—Å—Ç—å: ").append(confidencePercent).append("%");
            
            if (confidencePercent < 70) {
                message.append("\nüí° –†–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å");
            }
        }
        
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ò–ò
        if (analysis.getRecommendations() != null && !analysis.getRecommendations().isEmpty()) {
            message.append("\n\nüí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n");
            for (String recommendation : analysis.getRecommendations()) {
                message.append("‚Ä¢ ").append(recommendation).append("\n");
            }
        }
        
        // –í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        message.append("\nüïê –î–æ–±–∞–≤–ª–µ–Ω–æ: ").append(LocalDateTime.now().format(DateTimeFormatter.ofPattern("HH:mm")));
        
        return message.toString();
    }
    
    private String buildUserContext(User user) {
        StringBuilder context = new StringBuilder();
        
        context.append("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ").append(user.getFullName()).append("\n");
        
        if (user.getFitnessGoal() != null) {
            context.append("–¶–µ–ª—å: ").append(user.getFitnessGoal().getDisplayName()).append("\n");
        }
        
        if (user.getActivityLevel() != null) {
            context.append("–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ").append(user.getActivityLevel().getDisplayName()).append("\n");
        }
        
        // TODO: –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–∏–µ–º–∞—Ö –ø–∏—â–∏, –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∏ —Ç.–¥.
        
        return context.toString();
    }
    
    private String generateAIResponse(String prompt) {
        // TODO: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å OpenAI –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        return "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å! –§—É–Ω–∫—Ü–∏—è –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. " +
               "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∏—Ç–∞–Ω–∏—è –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.";
    }
    
    private void handleStatsCallback(String period, String chatId, User user) {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
        logger.info("Stats callback for period: {} from user: {}", period, user.getId());
    }
    
    private void handleCoachCallback(String action, String chatId, User user) {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–æ—É—á–∏–Ω–≥–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        logger.info("Coach callback action: {} from user: {}", action, user.getId());
    }
    
    private void handleBecomeCoachCallback(String chatId, User user) {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–æ–º
        logger.info("Become coach callback from user: {}", user.getId());
    }
    
    private void handleSubscriptionCallback(String chatId, User user) {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–ø–∏—Å–∫–∏
        logger.info("Subscription callback from user: {}", user.getId());
    }
    
    private void handleFoodCorrectionCallback(String foodEntryId, String chatId, User user) {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –æ –µ–¥–µ
        logger.info("Food correction callback for entry: {} from user: {}", foodEntryId, user.getId());
    }
    
    private int calculateMonthlyEarnings(User coach) {
        // TODO: –†–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–æ–≤
        return 15000; // –ó–∞–≥–ª—É—à–∫–∞
    }
    
    private int calculateWeeklyGrowth(User coach) {
        // TODO: –†–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ä–æ—Å—Ç–∞
        return 3; // –ó–∞–≥–ª—É—à–∫–∞
    }
    
    // Result class for food analysis
    public static class FoodAnalysisResult {
        private final Long foodEntryId;
        private final String formattedMessage;
        private final NutritionAnalysis analysis;
        
        public FoodAnalysisResult(Long foodEntryId, String formattedMessage, NutritionAnalysis analysis) {
            this.foodEntryId = foodEntryId;
            this.formattedMessage = formattedMessage;
            this.analysis = analysis;
        }
        
        public Long getFoodEntryId() { return foodEntryId; }
        public String getFormattedMessage() { return formattedMessage; }
        public NutritionAnalysis getAnalysis() { return analysis; }
    }
} 