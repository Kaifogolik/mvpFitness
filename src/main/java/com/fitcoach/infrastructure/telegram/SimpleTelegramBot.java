package com.fitcoach.infrastructure.telegram;

import com.fitcoach.infrastructure.ai.NutritionAnalysis;
import com.fitcoach.infrastructure.ai.OpenAIService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.GetFile;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.File;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.PhotoSize;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.ArrayList;
import java.util.Base64;
import java.util.Comparator;
import java.util.List;

@Component
public class SimpleTelegramBot extends TelegramLongPollingBot {
    
    private static final Logger logger = LoggerFactory.getLogger(SimpleTelegramBot.class);
    
    @Value("${telegram.bot.token}")
    private String botToken;
    
    @Value("${telegram.bot.username}")
    private String botUsername;
    
    @Value("${app.mini-app.url:http://localhost:8080}")
    private String miniAppUrl;
    
    @Autowired
    private OpenAIService openAIService;

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public String getBotToken() {
        return botToken;
    }

    @Override
    public void onUpdateReceived(Update update) {
        try {
            if (update.hasMessage()) {
                Message message = update.getMessage();
                long chatId = message.getChatId();
                String userName = message.getFrom().getFirstName();

                // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
                if (message.hasPhoto()) {
                    handlePhotoMessage(message);
                    return;
                }

                // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                if (message.hasText()) {
                    handleTextMessage(chatId, message.getText(), userName);
                }
            }
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {}", e.getMessage(), e);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–π - –∞–Ω–∞–ª–∏–∑ –µ–¥—ã —á–µ—Ä–µ–∑ OpenAI
     */
    private void handlePhotoMessage(Message message) {
        try {
            String firstName = message.getFrom().getFirstName();
            logger.info("–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", firstName);

            // –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ (–ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ)
            List<PhotoSize> photos = message.getPhoto();
            PhotoSize photo = photos.get(photos.size() - 1);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (—É–∂–µ—Å—Ç–æ—á–∏–ª–∏ –ª–∏–º–∏—Ç—ã)
            if (photo.getFileSize() != null && photo.getFileSize() > 500 * 1024) { // 500KB –≤–º–µ—Å—Ç–æ 1MB
                sendMessage(message.getChatId(), 
                    "‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ (" + (photo.getFileSize() / 1024) + " –ö–ë).\n\n" +
                    "üì∏ –î–ª—è —Ä–∞–±–æ—Ç—ã –ò–ò –Ω—É–∂–Ω—ã –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–æ 500 –ö–ë:\n" +
                    "‚Ä¢ –°–∂–∞—Ç—å —Ñ–æ—Ç–æ –≤ –≥–∞–ª–µ—Ä–µ–µ\n" +
                    "‚Ä¢ –£–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã\n" +
                    "‚Ä¢ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ–¥—É –±–µ–∑ —Ñ–æ–Ω–∞\n\n" +
                    "üí° –ü—Ä–æ—Å—Ç—ã–µ —Ñ–æ—Ç–æ —Ä–∞–±–æ—Ç–∞—é—Ç –ª—É—á—à–µ!");
                return;
            }

            String fileId = photo.getFileId();
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
            sendMessage(message.getChatId(), "üì∏ –û—Ç–ª–∏—á–Ω–æ! –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–µ —Ñ–æ—Ç–æ –µ–¥—ã...\n‚è≥ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤.");
            
            // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
            String imageBase64 = downloadAndConvertToBase64(fileId);
            
            if (imageBase64 != null) {
                // –°–£–ü–ï–† –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ base64
                if (imageBase64.length() > 200_000) { // ~150KB –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—ç–∫–æ–Ω–æ–º–∏—è 75% —Ç–æ–∫–µ–Ω–æ–≤!)
                    sendMessage(message.getChatId(), 
                        "‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ –µ—â–µ —Å–ª–∏—à–∫–æ–º –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤.\n\n" +
                        "üì∏ –ù—É–∂–Ω—ã –û–ß–ï–ù–¨ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–¥–æ 150KB):\n" +
                        "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ–µ —Ñ–æ—Ç–æ –±–ª—é–¥–∞\n" +
                        "‚Ä¢ –ë–µ–∑ —Ñ–æ–Ω–∞, —Ä—É–∫, —Å—Ç–æ–ª–æ–≤—ã—Ö –ø—Ä–∏–±–æ—Ä–æ–≤\n" +
                        "‚Ä¢ –ë–ª–∏–∑–∫–æ –∫ –µ–¥–µ, —á–µ—Ç–∫–∏–π —Ñ–æ–∫—É—Å\n" +
                        "‚Ä¢ –°–∂–∞—Ç–∏–µ JPEG –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ\n\n" +
                        "üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...");
                }
                
                // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Å fallback –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–æ–∫)
                NutritionAnalysis analysis = openAIService.analyzeFoodImage(imageBase64);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                String response = formatNutritionAnalysis(analysis, firstName);
                sendMessage(message.getChatId(), response);
            } else {
                sendMessage(message.getChatId(), "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
            }
            
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ", e);
            sendMessage(message.getChatId(), 
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–æ—Ç–æ.\n\n" +
                "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n" +
                "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ\n" +
                "‚Ä¢ –û–ø–∏—Å–∞—Ç—å –±–ª—é–¥–æ —Ç–µ–∫—Å—Ç–æ–º\n" +
                "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ AI —á–∞—Ç—É");
        }
        
        logger.info("–ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", message.getFrom().getFirstName());
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
     */
    private void handleTextMessage(long chatId, String messageText, String userName) {
        String responseText = "";

        switch (messageText) {
            case "üì∏ –ê–Ω–∞–ª–∏–∑ –µ–¥—ã":
                responseText = "üì∏ –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ –µ–¥—ã —Å –ò–ò!\n\n" +
                             "üçé –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–π –µ–¥—ã,\n" +
                             "–∏ —è –æ–ø—Ä–µ–¥–µ–ª—é:\n" +
                             "‚Ä¢ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ —Ñ–æ—Ç–æ\n" +
                             "‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏ –∏ –ë–ñ–£\n" +
                             "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é\n\n" +
                             "üì± –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä—è–º–æ –≤ —á–∞—Ç!";
                break;

            case "ü§ñ AI –ß–∞—Ç":
                responseText = "ü§ñ AI –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –ø–∏—Ç–∞–Ω–∏—é!\n\n" +
                             "–ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ:\n" +
                             "‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–∏—Ç–∞–Ω–∏–∏\n" +
                             "‚Ä¢ –ü–æ–¥—Å—á–µ—Ç–µ –∫–∞–ª–æ—Ä–∏–π\n" +
                             "‚Ä¢ –î–∏–µ—Ç–∞—Ö –∏ –∑–¥–æ—Ä–æ–≤—å–µ\n" +
                             "‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞—Ü–∏–æ–Ω–∞\n\n" +
                             "üí¨ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å!";
                break;

            case "üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ":
                responseText = "üì± FitCoach AI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!\n\n" +
                             "üåê –ê–¥—Ä–µ—Å: " + miniAppUrl + "\n\n" +
                             "üí° –í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤—ã –Ω–∞–π–¥–µ—Ç–µ:\n" +
                             "üìä –î–∞—à–±–æ—Ä–¥ —Å –≤–∞—à–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π\n" +
                             "üçé –¢—Ä–µ–∫–∏–Ω–≥ –ø–∏—Ç–∞–Ω–∏—è –∏ –∫–∞–ª–æ—Ä–∏–π\n" +
                             "üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n" +
                             "üë§ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å\n\n" +
                             "‚ö†Ô∏è –ü–æ–∫–∞ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ\n" +
                             "üöÄ –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –æ–Ω–ª–∞–π–Ω!";
                break;
                
            case "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
                responseText = "üìã –ü–æ–º–æ—â—å –ø–æ FitCoach AI:\n\n" +
                             "ü§ñ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:\n" +
                             "üì∏ –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ –µ–¥—ã —Å –ò–ò\n" +
                             "üí¨ AI –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –ø–∏—Ç–∞–Ω–∏—é\n" +
                             "üçé –ü–æ–¥—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π –∏ –ë–ñ–£\n" +
                             "üìà –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é\n\n" +
                             "–ö–æ–º–∞–Ω–¥—ã:\n" +
                             "üì∏ –ê–Ω–∞–ª–∏–∑ –µ–¥—ã - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ\n" +
                             "ü§ñ AI –ß–∞—Ç - –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å\n" +
                             "üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n" +
                             "üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã";
                break;
                
            case "üìä –°—Ç–∞—Ç—É—Å":
                boolean openAiHealthy = openAIService.isApiHealthy();
                responseText = "‚úÖ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã FitCoach AI:\n\n" +
                             "ü§ñ Telegram Bot: –ê–∫—Ç–∏–≤–µ–Ω\n" +
                             "üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: H2 (–≤ –ø–∞–º—è—Ç–∏)\n" +
                             "üîß Spring Boot: –ó–∞–ø—É—â–µ–Ω\n" +
                             "üì° API: –î–æ—Å—Ç—É–ø–µ–Ω\n" +
                             "üß† OpenAI API: " + (openAiHealthy ? "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω" : "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω") + "\n\n" +
                             "Swagger UI: " + miniAppUrl + "/swagger-ui.html";
                break;
                
            case "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ":
                responseText = "üöÄ FitCoach AI Platform\n\n" +
                             "–£–º–Ω–∞—è —Ñ–∏—Ç–Ω–µ—Å-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Å –ò–ò-–∞–Ω–∞–ª–∏–∑–æ–º –ø–∏—Ç–∞–Ω–∏—è\n" +
                             "–∏ —Å–∏—Å—Ç–µ–º–æ–π —Ç—Ä–µ–Ω–µ—Ä-—É—á–µ–Ω–∏–∫.\n\n" +
                             "üîß –í–µ—Ä—Å–∏—è: MVP 1.0 —Å AI\n" +
                             "üõ†Ô∏è –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: Spring Boot + OpenAI GPT-4V\n" +
                             "üì± –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: Telegram Mini App\n\n" +
                             "üåü –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n" +
                             "üì∏ –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ –µ–¥—ã —Å GPT-4V\n" +
                             "ü§ñ AI —á–∞—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç\n" +
                             "üìä –£–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n" +
                             "GitHub: https://github.com/Kaifogolik/mvpFitness";
                break;

            case "/start":
                responseText = "üéØ –ü—Ä–∏–≤–µ—Ç, " + userName + "!\n\n" +
                             "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FitCoach AI! ü§ñ\n\n" +
                             "üÜï –¢–µ–ø–µ—Ä—å —Å –ò–ò-–∞–Ω–∞–ª–∏–∑–æ–º –ø–∏—Ç–∞–Ω–∏—è!\n\n" +
                             "üåü –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n" +
                             "üì∏ –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ –µ–¥—ã —Å GPT-4V\n" +
                             "ü§ñ AI –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –ø–∏—Ç–∞–Ω–∏—é\n" +
                             "üìä –£–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n" +
                             "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ ‚¨áÔ∏è";
                sendMessageWithKeyboard(chatId, responseText);
                return;
                
            case "/food":
                responseText = "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–π –µ–¥—ã!\n\n" +
                             "üß† –ò–ò –æ–ø—Ä–µ–¥–µ–ª–∏—Ç:\n" +
                             "‚Ä¢ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ —Ñ–æ—Ç–æ\n" +
                             "‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏ –∏ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n" +
                             "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é\n\n" +
                             "üì± –ü—Ä–æ—Å—Ç–æ —Å–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ!";
                break;

            case "/chat":
                responseText = "ü§ñ –†–µ–∂–∏–º AI —á–∞—Ç–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n" +
                             "–ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ –ø–∏—Ç–∞–Ω–∏–∏, –¥–∏–µ—Ç–∞—Ö,\n" +
                             "–∫–∞–ª–æ—Ä–∏—è—Ö –∏–ª–∏ –∑–¥–æ—Ä–æ–≤–æ–º –æ–±—Ä–∞–∑–µ –∂–∏–∑–Ω–∏.\n\n" +
                             "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:";
                break;

            case "/help":
                responseText = "üìã –ö–æ–º–∞–Ω–¥—ã FitCoach AI:\n\n" +
                             "üÜï /food - –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ –µ–¥—ã\n" +
                             "ü§ñ /chat - AI –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç\n" +
                             "üì± /app - –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n" +
                             "üìä /status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n" +
                             "‚ÑπÔ∏è /about - –û –ø—Ä–æ–µ–∫—Ç–µ\n\n" +
                             "üì∏ –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã!";
                break;

            case "/app":
                responseText = "üì± FitCoach AI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!\n\n" +
                             "üåê –ê–¥—Ä–µ—Å: " + miniAppUrl + "\n\n" +
                             "üí° –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–µ–±-–≤–µ—Ä—Å–∏–∏:\n" +
                             "üìä –î–∞—à–±–æ—Ä–¥ —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π\n" +
                             "üçé –ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤ –ø–∏—Ç–∞–Ω–∏—è\n" +
                             "üìà –ì—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n" +
                             "üë§ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å\n\n" +
                             "‚ö†Ô∏è –ü–æ–∫–∞ localhost, —Å–∫–æ—Ä–æ –æ–Ω–ª–∞–π–Ω!";
                break;

            case "/about":
                responseText = "üöÄ FitCoach AI Platform\n\n" +
                             "MVP —Ñ–∏—Ç–Ω–µ—Å-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —Å –ò–ò –∞–Ω–∞–ª–∏–∑–æ–º.\n\n" +
                             "üîß –í–µ—Ä—Å–∏—è: 1.0 + OpenAI\n" +
                             "üõ†Ô∏è Stack: Spring Boot + GPT-4V\n" +
                             "üì± –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å: Telegram + Mini App\n\n" +
                             "GitHub: https://github.com/Kaifogolik/mvpFitness";
                break;

            case "/status":
                boolean apiHealthy = openAIService.isApiHealthy();
                responseText = "‚úÖ –°—Ç–∞—Ç—É—Å FitCoach AI:\n\n" +
                             "ü§ñ Bot: –ê–∫—Ç–∏–≤–µ–Ω\n" +
                             "üîß Backend: –ó–∞–ø—É—â–µ–Ω\n" +
                             "üß† OpenAI: " + (apiHealthy ? "‚úÖ OK" : "‚ùå –û—à–∏–±–∫–∞") + "\n" +
                             "üì° API: –î–æ—Å—Ç—É–ø–µ–Ω\n\n" +
                             "Docs: " + miniAppUrl + "/swagger-ui.html";
                break;

            default:
                // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞, –ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –≤–æ–ø—Ä–æ—Å –∫ AI
                if (!messageText.startsWith("/")) {
                    handleAiChatMessage(chatId, messageText, userName);
                    return;
                } else {
                    responseText = "ü§î –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: " + messageText + "\n\n" +
                                 "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n" +
                                 "/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n" +
                                 "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n" +
                                 "üì∏ –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã!";
                }
                break;
        }

        sendMessage(chatId, responseText);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è AI —á–∞—Ç–∞
     */
    private void handleAiChatMessage(long chatId, String messageText, String userName) {
        try {
            logger.info("AI —á–∞—Ç –∑–∞–ø—Ä–æ—Å –æ—Ç {}: {}", userName, messageText);
            
            sendMessage(chatId, "ü§ñ –î—É–º–∞—é –Ω–∞–¥ –≤–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–æ–º...");
            
            String userContext = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + userName + ", –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: Telegram";
            String aiResponse = openAIService.chatWithNutritionBot(messageText, userContext);
            
            String formattedResponse = "ü§ñ AI –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç:\n\n" + aiResponse + 
                                     "\n\nüí° –ï—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ!";
            
            sendMessage(chatId, formattedResponse);
            
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –≤ AI —á–∞—Ç–µ: {}", e.getMessage(), e);
            sendMessage(chatId, "ü§ñ –ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å —è –Ω–µ–º–Ω–æ–≥–æ –∑–∞–Ω—è—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI.");
        }
    }

    /**
     * –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–æ—Ç–æ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ base64
     */
    private String downloadAndConvertToBase64(String fileId) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            GetFile getFile = new GetFile();
            getFile.setFileId(fileId);
            File file = execute(getFile);
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            String fileUrl = "https://api.telegram.org/file/bot" + botToken + "/" + file.getFilePath();
            
            // –°–∫–∞—á–∏–≤–∞–µ–º –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
            try (InputStream inputStream = new URL(fileUrl).openStream()) {
                byte[] imageBytes = inputStream.readAllBytes();
                return Base64.getEncoder().encodeToString(imageBytes);
            }
            
        } catch (TelegramApiException | IOException e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–æ—Ç–æ: {}", e.getMessage(), e);
            return null;
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø–∏—Ç–∞–Ω–∏—è
     */
    private String formatNutritionAnalysis(NutritionAnalysis analysis, String userName) {
        StringBuilder result = new StringBuilder();
        
        result.append("üçΩÔ∏è –ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–π –µ–¥—ã, ").append(userName).append("!\n\n");
        
        // –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        result.append("üìä –û–±—â–∞—è –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:\n");
        result.append("üî• –ö–∞–ª–æ—Ä–∏–∏: ").append(String.format("%.0f", analysis.getTotalCalories())).append(" –∫–∫–∞–ª\n");
        result.append("ü•© –ë–µ–ª–∫–∏: ").append(String.format("%.1f", analysis.getTotalProteins())).append(" –≥\n");
        result.append("üßà –ñ–∏—Ä—ã: ").append(String.format("%.1f", analysis.getTotalFats())).append(" –≥\n");
        result.append("üçû –£–≥–ª–µ–≤–æ–¥—ã: ").append(String.format("%.1f", analysis.getTotalCarbs())).append(" –≥\n\n");
        
        // –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
        if (analysis.getDetectedFoods() != null && !analysis.getDetectedFoods().isEmpty()) {
            result.append("üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:\n");
            for (NutritionAnalysis.DetectedFood food : analysis.getDetectedFoods()) {
                result.append("‚Ä¢ ").append(food.getFoodName())
                      .append(" (").append(food.getQuantity()).append(") - ")
                      .append(String.format("%.0f", food.getCalories())).append(" –∫–∫–∞–ª\n");
            }
            result.append("\n");
        }
        
        // –£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        if (analysis.getConfidenceLevel() != null) {
            result.append("üéØ –¢–æ—á–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞: ")
                  .append(String.format("%.0f", analysis.getConfidenceLevel() * 100))
                  .append("%\n\n");
        }
        
        // –ó–∞–º–µ—Ç–∫–∏
        if (analysis.getAnalysisNotes() != null && !analysis.getAnalysisNotes().isEmpty()) {
            result.append("üìù –ó–∞–º–µ—Ç–∫–∏: ").append(analysis.getAnalysisNotes()).append("\n\n");
        }
        
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if (analysis.getHealthRecommendations() != null && !analysis.getHealthRecommendations().isEmpty()) {
            result.append("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n");
            for (String recommendation : analysis.getHealthRecommendations()) {
                if (recommendation != null && !recommendation.trim().isEmpty()) {
                    result.append("‚Ä¢ ").append(recommendation.trim()).append("\n");
                }
            }
            result.append("\n");
        }
        
        result.append("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–æ—Ç–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞!");
        
        return result.toString();
    }

    private void sendMessage(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {}", e.getMessage(), e);
        }
    }
    
    private void sendMessageWithKeyboard(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);
        message.setReplyMarkup(createMainKeyboard());

        try {
            execute(message);
        } catch (TelegramApiException e) {
            logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π: {}", e.getMessage(), e);
        }
    }
    
    private ReplyKeyboardMarkup createMainKeyboard() {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(false);

        List<KeyboardRow> keyboardRows = new ArrayList<>();

        // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - AI —Ñ—É–Ω–∫—Ü–∏–∏
        KeyboardRow row1 = new KeyboardRow();
        row1.add(new KeyboardButton("üì∏ –ê–Ω–∞–ª–∏–∑ –µ–¥—ã"));
        row1.add(new KeyboardButton("ü§ñ AI –ß–∞—Ç"));

        // –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ - –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–æ–º–æ—â—å
        KeyboardRow row2 = new KeyboardRow();
        row2.add(new KeyboardButton("üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"));
        row2.add(new KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å"));

        // –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞ - —Å—Ç–∞—Ç—É—Å –∏ –æ –ø—Ä–æ–µ–∫—Ç–µ
        KeyboardRow row3 = new KeyboardRow();
        row3.add(new KeyboardButton("üìä –°—Ç–∞—Ç—É—Å"));
        row3.add(new KeyboardButton("‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ"));

        keyboardRows.add(row1);
        keyboardRows.add(row2);
        keyboardRows.add(row3);
        keyboardMarkup.setKeyboard(keyboardRows);

        return keyboardMarkup;
    }
} 