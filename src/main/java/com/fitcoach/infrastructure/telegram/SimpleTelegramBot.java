package com.fitcoach.infrastructure.telegram;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
// import org.telegram.telegrambots.meta.api.objects.webapp.WebApp; // –ú–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.ArrayList;
import java.util.List;

@Component
public class SimpleTelegramBot extends TelegramLongPollingBot {
    
    @Value("${telegram.bot.token}")
    private String botToken;
    
    @Value("${telegram.bot.username}")
    private String botUsername;
    
    @Value("${app.mini-app.url:http://localhost:8080}")
    private String miniAppUrl;

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public String getBotToken() {
        return botToken;
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String messageText = update.getMessage().getText();
            long chatId = update.getMessage().getChatId();
            String userName = update.getMessage().getFrom().getFirstName();

            String responseText = "";

            switch (messageText) {
                case "üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ":
                    responseText = "üì± –û—Ç–∫—Ä—ã–≤–∞–µ–º FitCoach AI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!\n\n" +
                                 "üîó –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é\n\n" +
                                 "üí° –í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤—ã –Ω–∞–π–¥–µ—Ç–µ:\n" +
                                 "üìä –î–∞—à–±–æ—Ä–¥ —Å –≤–∞—à–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π\n" +
                                 "üçé –¢—Ä–µ–∫–∏–Ω–≥ –ø–∏—Ç–∞–Ω–∏—è –∏ –∫–∞–ª–æ—Ä–∏–π\n" +
                                 "üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n" +
                                 "üë§ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å";
                    sendMessageWithAppButton(chatId, responseText);
                    return;
                    
                case "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
                case "üìä –°—Ç–∞—Ç—É—Å":
                case "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ":
                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
                    if (messageText.equals("‚ÑπÔ∏è –ü–æ–º–æ—â—å")) messageText = "/help";
                    else if (messageText.equals("üìä –°—Ç–∞—Ç—É—Å")) messageText = "/status";
                    else if (messageText.equals("‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")) messageText = "/about";
                    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤ switch –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    break;
                case "/start":
                    responseText = "üéØ –ü—Ä–∏–≤–µ—Ç, " + userName + "!\n\n" +
                                 "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FitCoach AI! ü§ñ\n\n" +
                                 "üöÄ –í–∞—à —É–º–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-–ø–æ–º–æ—â–Ω–∏–∫ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n\n" +
                                 "üì± –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ,\n" +
                                 "–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n\n" +
                                 "/app - –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n" +
                                 "/help - –ü–æ–º–æ—â—å\n" +
                                 "/about - –û –ø—Ä–æ–µ–∫—Ç–µ\n" +
                                 "/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã";
                    sendMessageWithKeyboard(chatId, responseText);
                    return;
                    
                case "/app":
                    responseText = "üì± –û—Ç–∫—Ä—ã–≤–∞–µ–º FitCoach AI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!\n\n" +
                                 "üîó –°—Å—ã–ª–∫–∞: " + miniAppUrl + "\n\n" +
                                 "üí° –í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤—ã –Ω–∞–π–¥–µ—Ç–µ:\n" +
                                 "üìä –î–∞—à–±–æ—Ä–¥ —Å –≤–∞—à–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π\n" +
                                 "üçé –¢—Ä–µ–∫–∏–Ω–≥ –ø–∏—Ç–∞–Ω–∏—è –∏ –∫–∞–ª–æ—Ä–∏–π\n" +
                                 "üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n" +
                                 "üë§ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å";
                    sendMessageWithAppButton(chatId, responseText);
                    return;

                case "/help":
                    responseText = "üìã –ü–æ–º–æ—â—å –ø–æ FitCoach AI:\n\n" +
                                 "ü§ñ –≠—Ç–æ MVP –≤–µ—Ä—Å–∏—è —Ñ–∏—Ç–Ω–µ—Å-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã\n" +
                                 "üì∏ –ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è: –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ –µ–¥—ã\n" +
                                 "üë®‚Äçüè´ –ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è: —Å–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–Ω–µ—Ä-—É—á–µ–Ω–∏–∫\n" +
                                 "üí∞ –ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è: –ø–æ–¥–ø–∏—Å–∫–∏\n\n" +
                                 "–ö–æ–º–∞–Ω–¥—ã:\n" +
                                 "/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n" +
                                 "/about - –û –ø—Ä–æ–µ–∫—Ç–µ\n" +
                                 "/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å";
                    break;

                case "/about":
                    responseText = "üöÄ FitCoach AI Platform\n\n" +
                                 "–£–º–Ω–∞—è —Ñ–∏—Ç–Ω–µ—Å-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Å –ò–ò-–∞–Ω–∞–ª–∏–∑–æ–º –ø–∏—Ç–∞–Ω–∏—è\n" +
                                 "–∏ —Å–∏—Å—Ç–µ–º–æ–π —Ç—Ä–µ–Ω–µ—Ä-—É—á–µ–Ω–∏–∫.\n\n" +
                                 "üîß –í–µ—Ä—Å–∏—è: MVP 1.0\n" +
                                 "üõ†Ô∏è –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: Spring Boot + OpenAI\n" +
                                 "üì± –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: Telegram Mini App\n\n" +
                                 "GitHub: https://github.com/Kaifogolik/mvpFitness";
                    break;

                case "/status":
                    responseText = "‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!\n\n" +
                                 "ü§ñ Telegram Bot: –ê–∫—Ç–∏–≤–µ–Ω\n" +
                                 "üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: H2 (–≤ –ø–∞–º—è—Ç–∏)\n" +
                                 "üîß Spring Boot: –ó–∞–ø—É—â–µ–Ω\n" +
                                 "üì° API: –î–æ—Å—Ç—É–ø–µ–Ω\n\n" +
                                 "Swagger UI: http://localhost:8080/swagger-ui.html";
                    break;

                default:
                    responseText = "ü§î –ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É: " + messageText + "\n\n" +
                                 "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n" +
                                 "/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n" +
                                 "/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã";
                    break;
            }

            sendMessage(chatId, responseText);
        }
    }

    private void sendMessage(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            System.err.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: " + e.getMessage());
        }
    }
    
    private void sendMessageWithKeyboard(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);
        message.setReplyMarkup(createMainKeyboard());

        try {
            execute(message);
        } catch (TelegramApiException e) {
            System.err.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π: " + e.getMessage());
        }
    }
    
    private void sendMessageWithAppButton(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);
        message.setReplyMarkup(createAppInlineKeyboard());

        try {
            execute(message);
        } catch (TelegramApiException e) {
            System.err.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π: " + e.getMessage());
        }
    }
    
    private ReplyKeyboardMarkup createMainKeyboard() {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(false);

        List<KeyboardRow> keyboardRows = new ArrayList<>();

        // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –∫–æ–º–∞–Ω–¥—ã
        KeyboardRow row1 = new KeyboardRow();
        row1.add(new KeyboardButton("üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"));
        row1.add(new KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å"));

        // –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ - —Å—Ç–∞—Ç—É—Å –∏ –æ –ø—Ä–æ–µ–∫—Ç–µ
        KeyboardRow row2 = new KeyboardRow();
        row2.add(new KeyboardButton("üìä –°—Ç–∞—Ç—É—Å"));
        row2.add(new KeyboardButton("‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ"));

        keyboardRows.add(row1);
        keyboardRows.add(row2);
        keyboardMarkup.setKeyboard(keyboardRows);

        return keyboardMarkup;
    }
    
    private InlineKeyboardMarkup createAppInlineKeyboard() {
        InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();

        // –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        List<InlineKeyboardButton> rowInline1 = new ArrayList<>();
        InlineKeyboardButton appButton = new InlineKeyboardButton();
        appButton.setText("üöÄ –û—Ç–∫—Ä—ã—Ç—å FitCoach AI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ");
        appButton.setUrl(miniAppUrl);
        rowInline1.add(appButton);

        // –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è
        List<InlineKeyboardButton> rowInline2 = new ArrayList<>();
        InlineKeyboardButton shareButton = new InlineKeyboardButton();
        shareButton.setText("üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏");
        shareButton.setUrl("https://t.me/share/url?url=" + miniAppUrl + "&text=ü§ñ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ FitCoach AI - —É–º–Ω–æ–≥–æ —Ñ–∏—Ç–Ω–µ—Å-–ø–æ–º–æ—â–Ω–∏–∫–∞!");
        rowInline2.add(shareButton);

        rowsInline.add(rowInline1);
        rowsInline.add(rowInline2);
        markupInline.setKeyboard(rowsInline);

        return markupInline;
    }
} 