package com.fitcoach.infrastructure.telegram;

import com.fitcoach.domain.user.User;
import com.fitcoach.domain.user.UserService;
import com.fitcoach.infrastructure.ai.OpenAIService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.api.objects.webapp.WebApp;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Component
public class FitnessTelegramBot extends TelegramLongPollingBot {
    
    private static final Logger logger = LoggerFactory.getLogger(FitnessTelegramBot.class);
    
    private final UserService userService;
    private final OpenAIService openAIService;
    private final TelegramMessageHandler messageHandler;
    private final TelegramKeyboardFactory keyboardFactory;
    
    @Value("${telegram.bot.token}")
    private String botToken;
    
    @Value("${telegram.bot.username}")
    private String botUsername;
    
    @Value("${app.mini-app.url:https://t.me/fitcoach_bot/app}")
    private String miniAppUrl;
    
    public FitnessTelegramBot(UserService userService, 
                             OpenAIService openAIService,
                             TelegramMessageHandler messageHandler,
                             TelegramKeyboardFactory keyboardFactory) {
        this.userService = userService;
        this.openAIService = openAIService;
        this.messageHandler = messageHandler;
        this.keyboardFactory = keyboardFactory;
    }
    
    @Override
    public void onUpdateReceived(Update update) {
        try {
            if (update.hasMessage()) {
                handleMessage(update);
            } else if (update.hasCallbackQuery()) {
                handleCallbackQuery(update);
            }
        } catch (Exception e) {
            logger.error("Error processing update: {}", update, e);
            sendErrorMessage(getChatId(update), "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }
    
    private void handleMessage(Update update) {
        String chatId = update.getMessage().getChatId().toString();
        String messageText = update.getMessage().getText();
        String telegramId = update.getMessage().getFrom().getId().toString();
        
        logger.info("Received message from {}: {}", telegramId, messageText);
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        User user = getOrCreateUser(update.getMessage().getFrom());
        
        if (messageText != null) {
            handleTextMessage(chatId, messageText, user);
        } else if (update.getMessage().hasPhoto()) {
            handlePhotoMessage(chatId, update, user);
        }
    }
    
    private void handleTextMessage(String chatId, String messageText, User user) {
        try {
            switch (messageText) {
                case "/start" -> handleStartCommand(chatId, user);
                case "/profile" -> handleProfileCommand(chatId, user);
                case "/food" -> handleFoodCommand(chatId, user);
                case "/stats" -> handleStatsCommand(chatId, user);
                case "/coach" -> handleCoachCommand(chatId, user);
                case "/help" -> handleHelpCommand(chatId);
                default -> handleDefaultMessage(chatId, messageText, user);
            }
        } catch (Exception e) {
            logger.error("Error handling text message", e);
            sendErrorMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É.");
        }
    }
    
    private void handleStartCommand(String chatId, User user) {
        String welcomeMessage = String.format(
            "–ü—Ä–∏–≤–µ—Ç, %s! üëã\n\n" +
            "–Ø —Ç–≤–æ–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ñ–∏—Ç–Ω–µ—Å—É –∏ –ø–∏—Ç–∞–Ω–∏—é! ü§ñ\n\n" +
            "–ß—Ç–æ —è —É–º–µ—é:\n" +
            "üì∏ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ –µ–¥—ã –∏ —Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏\n" +
            "üìä –í–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∏—Ç–∞–Ω–∏—è –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n" +
            "üí™ –î–∞–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n" +
            "üë®‚Äçüè´ –ü–æ–º–æ–≥–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞–º —Ä–∞–±–æ—Ç–∞—Ç—å —Å —É—á–µ–Ω–∏–∫–∞–º–∏\n\n" +
            "–î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ —Å–≤–æ–µ–π –µ–¥—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã –Ω–∏–∂–µ:",
            user.getFirstName()
        );
        
        SendMessage message = SendMessage.builder()
            .chatId(chatId)
            .text(welcomeMessage)
            .replyMarkup(keyboardFactory.createMainMenuKeyboard())
            .build();
            
        executeMessage(message);
        
        // –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –µ–≥–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å
        if (user.getAge() == null || user.getHeightCm() == null) {
            sendProfileSetupPrompt(chatId);
        }
    }
    
    private void handleProfileCommand(String chatId, User user) {
        InlineKeyboardMarkup keyboard = InlineKeyboardMarkup.builder()
            .keyboardRow(List.of(
                InlineKeyboardButton.builder()
                    .text("üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
                    .webApp(WebApp.builder().url(miniAppUrl + "?page=profile").build())
                    .build()
            ))
            .build();
            
        String profileText = messageHandler.formatUserProfile(user);
        
        SendMessage message = SendMessage.builder()
            .chatId(chatId)
            .text(profileText)
            .replyMarkup(keyboard)
            .build();
            
        executeMessage(message);
    }
    
    private void handleFoodCommand(String chatId, User user) {
        String message = "üì∏ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ —Å–≤–æ–µ–π –µ–¥—ã, –∏ —è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –µ—ë –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å!\n\n" +
                        "–Ø —Å–º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å:\n" +
                        "‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏\n" +
                        "‚Ä¢ –ë–µ–ª–∫–∏, –∂–∏—Ä—ã, —É–≥–ª–µ–≤–æ–¥—ã\n" +
                        "‚Ä¢ –†–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏\n" +
                        "‚Ä¢ –î–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n" +
                        "–ü—Ä–æ—Å—Ç–æ —Å–¥–µ–ª–∞–π —Ñ–æ—Ç–æ –∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ! üì±";
                        
        SendMessage sendMessage = SendMessage.builder()
            .chatId(chatId)
            .text(message)
            .build();
            
        executeMessage(sendMessage);
    }
    
    private void handleStatsCommand(String chatId, User user) {
        InlineKeyboardMarkup keyboard = InlineKeyboardMarkup.builder()
            .keyboardRow(List.of(
                InlineKeyboardButton.builder()
                    .text("üìä –û—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
                    .webApp(WebApp.builder().url(miniAppUrl + "?page=stats").build())
                    .build()
            ))
            .keyboardRow(List.of(
                InlineKeyboardButton.builder()
                    .text("üìà –°–µ–≥–æ–¥–Ω—è")
                    .callbackData("stats_today")
                    .build(),
                InlineKeyboardButton.builder()
                    .text("üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é")
                    .callbackData("stats_week")
                    .build()
            ))
            .build();
            
        SendMessage message = SendMessage.builder()
            .chatId(chatId)
            .text("üìä –í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:")
            .replyMarkup(keyboard)
            .build();
            
        executeMessage(message);
    }
    
    private void handleCoachCommand(String chatId, User user) {
        if (user.isCoach()) {
            handleCoachDashboard(chatId, user);
        } else {
            handleBecomeCoachPrompt(chatId, user);
        }
    }
    
    private void handleCoachDashboard(String chatId, User user) {
        InlineKeyboardMarkup keyboard = InlineKeyboardMarkup.builder()
            .keyboardRow(List.of(
                InlineKeyboardButton.builder()
                    .text("üë• –ú–æ–∏ —É—á–µ–Ω–∏–∫–∏")
                    .webApp(WebApp.builder().url(miniAppUrl + "?page=students").build())
                    .build()
            ))
            .keyboardRow(List.of(
                InlineKeyboardButton.builder()
                    .text("üí∞ –î–æ—Ö–æ–¥—ã")
                    .callbackData("coach_earnings")
                    .build(),
                InlineKeyboardButton.builder()
                    .text("üîó –†–µ—Ñ. —Å—Å—ã–ª–∫–∞")
                    .callbackData("coach_referral")
                    .build()
            ))
            .build();
            
        String coachStats = messageHandler.formatCoachStats(user);
        
        SendMessage message = SendMessage.builder()
            .chatId(chatId)
            .text("üë®‚Äçüè´ –ü–∞–Ω–µ–ª—å —Ç—Ä–µ–Ω–µ—Ä–∞\n\n" + coachStats)
            .replyMarkup(keyboard)
            .build();
            
        executeMessage(message);
    }
    
    private void handleBecomeCoachPrompt(String chatId, User user) {
        InlineKeyboardMarkup keyboard = InlineKeyboardMarkup.builder()
            .keyboardRow(List.of(
                InlineKeyboardButton.builder()
                    .text("üí™ –°—Ç–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä–æ–º")
                    .callbackData("become_coach")
                    .build()
            ))
            .keyboardRow(List.of(
                InlineKeyboardButton.builder()
                    .text("üîç –ù–∞–π—Ç–∏ —Ç—Ä–µ–Ω–µ—Ä–∞")
                    .callbackData("find_coach")
                    .build()
            ))
            .build();
            
        String message = "üë®‚Äçüè´ –•–æ—á–µ—à—å —Å—Ç–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä–æ–º?\n\n" +
                        "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n" +
                        "üí∞ –ü–æ–ª—É—á–∞–π 30% —Å –∫–∞–∂–¥–æ–≥–æ —É—á–µ–Ω–∏–∫–∞\n" +
                        "üìà –£–≤–µ–ª–∏—á–∏–≤–∞–π –¥–æ—Ö–æ–¥ –ø—Ä–∏–≤–ª–µ–∫–∞—è –Ω–æ–≤—ã—Ö\n" +
                        "üéØ –ü–æ–º–æ–≥–∞–π –ª—é–¥—è–º –¥–æ—Å—Ç–∏–≥–∞—Ç—å —Ü–µ–ª–µ–π\n" +
                        "üìä –£–¥–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏\n\n" +
                        "–ò–ª–∏ –Ω–∞–π–¥–∏ —Ç—Ä–µ–Ω–µ—Ä–∞ –¥–ª—è —Å–µ–±—è!";
                        
        SendMessage sendMessage = SendMessage.builder()
            .chatId(chatId)
            .text(message)
            .replyMarkup(keyboard)
            .build();
            
        executeMessage(sendMessage);
    }
    
    private void handleHelpCommand(String chatId) {
        String helpText = """
            ü§ñ FitCoach AI - —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ñ–∏—Ç–Ω–µ—Å—É
            
            üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
            /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            /profile - –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å  
            /food - –ê–Ω–∞–ª–∏–∑ –ø–∏—Ç–∞–Ω–∏—è
            /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            /coach - –¢—Ä–µ–Ω–µ—Ä—Å–∫–∞—è –ø–∞–Ω–µ–ª—å
            /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
            
            üì∏ –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –µ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–ª–æ—Ä–∏–π!
            
            üí¨ –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –æ –ø–∏—Ç–∞–Ω–∏–∏ –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö - —è –æ—Ç–≤–µ—á—É!
            """;
            
        SendMessage message = SendMessage.builder()
            .chatId(chatId)
            .text(helpText)
            .replyMarkup(keyboardFactory.createMainMenuKeyboard())
            .build();
            
        executeMessage(message);
    }
    
    private void handlePhotoMessage(String chatId, Update update, User user) {
        if (!user.canAnalyzeFood()) {
            sendSubscriptionPrompt(chatId);
            return;
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
        SendMessage analyzing = SendMessage.builder()
            .chatId(chatId)
            .text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
            .build();
            
        executeMessage(analyzing);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        messageHandler.handleFoodPhotoAnalysis(chatId, update, user)
            .thenAccept(result -> {
                InlineKeyboardMarkup keyboard = InlineKeyboardMarkup.builder()
                    .keyboardRow(List.of(
                        InlineKeyboardButton.builder()
                            .text("üìä –ü–æ–¥—Ä–æ–±–Ω–µ–µ")
                            .webApp(WebApp.builder()
                                .url(miniAppUrl + "?page=food&id=" + result.getFoodEntryId())
                                .build())
                            .build()
                    ))
                    .keyboardRow(List.of(
                        InlineKeyboardButton.builder()
                            .text("‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å")
                            .callbackData("correct_" + result.getFoodEntryId())
                            .build(),
                        InlineKeyboardButton.builder()
                            .text("üì∏ –ï—â–µ —Ñ–æ—Ç–æ")
                            .callbackData("add_photo")
                            .build()
                    ))
                    .build();
                    
                SendMessage resultMessage = SendMessage.builder()
                    .chatId(chatId)
                    .text(result.getFormattedMessage())
                    .replyMarkup(keyboard)
                    .build();
                    
                executeMessage(resultMessage);
            })
            .exceptionally(throwable -> {
                logger.error("Error analyzing food photo", throwable);
                sendErrorMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.");
                return null;
            });
    }
    
    private void handleDefaultMessage(String chatId, String messageText, User user) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –≤–æ–ø—Ä–æ—Å –∫ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É
        messageHandler.handleAIChatMessage(chatId, messageText, user)
            .thenAccept(response -> {
                SendMessage message = SendMessage.builder()
                    .chatId(chatId)
                    .text(response)
                    .build();
                    
                executeMessage(message);
            })
            .exceptionally(throwable -> {
                logger.error("Error processing AI chat message", throwable);
                sendErrorMessage(chatId, "–ù–µ –ø–æ–Ω—è–ª –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é.");
                return null;
            });
    }
    
    private void handleCallbackQuery(Update update) {
        String callbackData = update.getCallbackQuery().getData();
        String chatId = update.getCallbackQuery().getMessage().getChatId().toString();
        String telegramId = update.getCallbackQuery().getFrom().getId().toString();
        
        User user = userService.findByTelegramId(telegramId).orElse(null);
        if (user == null) {
            sendErrorMessage(chatId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start");
            return;
        }
        
        messageHandler.handleCallbackQuery(callbackData, chatId, user);
    }
    
    private User getOrCreateUser(org.telegram.telegrambots.meta.api.objects.User telegramUser) {
        return userService.findByTelegramId(telegramUser.getId().toString())
            .orElseGet(() -> userService.createFromTelegram(telegramUser));
    }
    
    private void sendProfileSetupPrompt(String chatId) {
        InlineKeyboardMarkup keyboard = InlineKeyboardMarkup.builder()
            .keyboardRow(List.of(
                InlineKeyboardButton.builder()
                    .text("‚úèÔ∏è –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
                    .webApp(WebApp.builder().url(miniAppUrl + "?page=setup").build())
                    .build()
            ))
            .build();
            
        SendMessage message = SendMessage.builder()
            .chatId(chatId)
            .text("üë§ –î–ª—è —Ç–æ—á–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∑–∞–ø–æ–ª–Ω–∏ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å - —ç—Ç–æ –∑–∞–π–º–µ—Ç 2 –º–∏–Ω—É—Ç—ã!")
            .replyMarkup(keyboard)
            .build();
            
        executeMessage(message);
    }
    
    private void sendSubscriptionPrompt(String chatId) {
        InlineKeyboardMarkup keyboard = InlineKeyboardMarkup.builder()
            .keyboardRow(List.of(
                InlineKeyboardButton.builder()
                    .text("‚≠ê –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
                    .callbackData("subscribe")
                    .build()
            ))
            .build();
            
        SendMessage message = SendMessage.builder()
            .chatId(chatId)
            .text("üîí –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ –µ–¥—ã –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π.\n\n" +
                  "üíé –ü–æ–¥–ø–∏—Å–∫–∞ –≤–∫–ª—é—á–∞–µ—Ç:\n" +
                  "‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ\n" +
                  "‚Ä¢ –ü–æ–¥—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π –∏ –ë–ñ–£\n" +
                  "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n" +
                  "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n\n" +
                  "üí∞ –í—Å–µ–≥–æ 490‚ÇΩ/–º–µ—Å—è—Ü")
            .replyMarkup(keyboard)
            .build();
            
        executeMessage(message);
    }
    
    private void sendErrorMessage(String chatId, String errorText) {
        SendMessage message = SendMessage.builder()
            .chatId(chatId)
            .text("‚ùå " + errorText)
            .build();
            
        executeMessage(message);
    }
    
    private void executeMessage(SendMessage message) {
        try {
            execute(message);
        } catch (TelegramApiException e) {
            logger.error("Error sending message", e);
        }
    }
    
    private String getChatId(Update update) {
        if (update.hasMessage()) {
            return update.getMessage().getChatId().toString();
        } else if (update.hasCallbackQuery()) {
            return update.getCallbackQuery().getMessage().getChatId().toString();
        }
        return null;
    }
    
    @Override
    public String getBotUsername() {
        return botUsername;
    }
    
    @Override
    public String getBotToken() {
        return botToken;
    }
} 