package com.fitcoach.api;

import com.fitcoach.model.NutritionEntry;
import com.fitcoach.model.User;
import com.fitcoach.service.NutritionService;
import com.fitcoach.service.UserService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDate;
import java.util.*;
import java.util.stream.Collectors;

/**
 * REST API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∏—Ç–∞–Ω–∏–µ–º –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
 */
@RestController
@RequestMapping("/api/nutrition")
@CrossOrigin(origins = "*")
public class NutritionController {
    
    private static final Logger logger = LoggerFactory.getLogger(NutritionController.class);
    
    /**
     * Mock –≤–µ—Ä—Å–∏—è –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ Mini App
     */
    @GetMapping("/{telegramId}/daily")
    public ResponseEntity<Map<String, Object>> getDailyStatsMock(@PathVariable String telegramId) {
        Map<String, Object> response = new HashMap<>();
        
        // –°–æ–∑–¥–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        response.put("success", true);
        response.put("date", java.time.LocalDate.now().toString());
        response.put("total_calories", 1250.5);
        response.put("total_protein", 85.2);
        response.put("total_carbs", 140.8);
        response.put("total_fat", 45.3);
        response.put("entries_count", 4);
        response.put("goal_calories", 2000);
        response.put("remaining_calories", 749.5);
        
        // Mock –∑–∞–ø–∏—Å–∏ –æ –ø–∏—Ç–∞–Ω–∏–∏
        List<Map<String, Object>> entries = new ArrayList<>();
        
        Map<String, Object> entry1 = new HashMap<>();
        entry1.put("id", 1);
        entry1.put("foodName", "–û–≤—Å—è–Ω–∫–∞ —Å —è–≥–æ–¥–∞–º–∏");
        entry1.put("calories", 320.0);
        entry1.put("proteins", 12.5);
        entry1.put("carbs", 58.0);
        entry1.put("fats", 6.2);
        entry1.put("mealType", "BREAKFAST");
        entry1.put("timestamp", "2025-07-25T08:30:00");
        entries.add(entry1);
        
        Map<String, Object> entry2 = new HashMap<>();
        entry2.put("id", 2);
        entry2.put("foodName", "–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ —Å —Ä–∏—Å–æ–º");
        entry2.put("calories", 450.0);
        entry2.put("proteins", 35.2);
        entry2.put("carbs", 42.8);
        entry2.put("fats", 12.1);
        entry2.put("mealType", "LUNCH");
        entry2.put("timestamp", "2025-07-25T13:15:00");
        entries.add(entry2);
        
        Map<String, Object> entry3 = new HashMap<>();
        entry3.put("id", 3);
        entry3.put("foodName", "–ì—Ä–µ—á–µ—Å–∫–∏–π —Å–∞–ª–∞—Ç");
        entry3.put("calories", 280.5);
        entry3.put("proteins", 15.5);
        entry3.put("carbs", 15.0);
        entry3.put("fats", 18.0);
        entry3.put("mealType", "DINNER");
        entry3.put("timestamp", "2025-07-25T19:45:00");
        entries.add(entry3);
        
        response.put("entries", entries);
        response.put("message", "Mock –¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞");
        
        logger.info("üìä Mock –¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è telegramId: {}", telegramId);
        
        return ResponseEntity.ok(response);
    }
    
    /**
     * Mock –≤–µ—Ä—Å–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ Mini App
     */
    @GetMapping("/{telegramId}/weekly")
    public ResponseEntity<Map<String, Object>> getWeeklyStatsMock(@PathVariable String telegramId) {
        Map<String, Object> response = new HashMap<>();
        
        response.put("success", true);
        response.put("average_daily_calories", 1450.2);
        response.put("total_entries", 28);
        response.put("days_tracked", 7);
        response.put("goal_achievement_rate", 0.72);
        
        // Mock —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º
        List<Map<String, Object>> dailyStats = new ArrayList<>();
        for (int i = 6; i >= 0; i--) {
            Map<String, Object> dayStats = new HashMap<>();
            dayStats.put("date", java.time.LocalDate.now().minusDays(i).toString());
            dayStats.put("calories", 1200 + Math.random() * 400);
            dayStats.put("entries_count", (int)(Math.random() * 5) + 2);
            dailyStats.add(dayStats);
        }
        
        response.put("daily_stats", dailyStats);
        response.put("message", "Mock –Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞");
        
        logger.info("üìà Mock –Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è telegramId: {}", telegramId);
        
        return ResponseEntity.ok(response);
    }
    
    /**
     * Mock –≤–µ—Ä—Å–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ Mini App
     */
    @GetMapping("/{telegramId}/recommendations")
    public ResponseEntity<Map<String, Object>> getRecommendationsMock(@PathVariable String telegramId) {
        Map<String, Object> response = new HashMap<>();
        
        response.put("success", true);
        
        List<String> recommendations = Arrays.asList(
            "ü•ó –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –æ–≤–æ—â–µ–π –≤ —Ä–∞—Ü–∏–æ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–µ—Ç—á–∞—Ç–∫–∏",
            "üí™ –£–≤–µ–ª–∏—á—å—Ç–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –±–µ–ª–∫–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã",
            "üíß –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø–∏—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–¥—ã - –º–∏–Ω–∏–º—É–º 2 –ª–∏—Ç—Ä–∞ –≤ –¥–µ–Ω—å",
            "üïê –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –µ—Å—Ç—å –≤ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –≤—Ä–µ–º—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å",
            "üèÉ‚Äç‚ôÇÔ∏è –°–æ—á–µ—Ç–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ —Å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏"
        );
        
        response.put("recommendations", recommendations);
        response.put("message", "Mock –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏");
        
        logger.info("üí° Mock —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–ª—è telegramId: {}", telegramId);
        
        return ResponseEntity.ok(response);
    }
    
    @Autowired
    private NutritionService nutritionService;
    
    @Autowired
    private UserService userService;
    
    // –£–î–ê–õ–ï–ù –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π getDailyStats –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –º–∞–ø–ø–∏–Ω–≥–∞ —Å Mock –≤–µ—Ä—Å–∏–µ–π
    
    // –£–î–ê–õ–ï–ù –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π getWeeklyStats –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –º–∞–ø–ø–∏–Ω–≥–∞ —Å Mock –≤–µ—Ä—Å–∏–µ–π
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∫ —Ü–µ–ª—è–º
     */
    @GetMapping("/{telegramId}/progress")
    public ResponseEntity<Map<String, Object>> getProgressReport(
            @PathVariable String telegramId,
            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate date) {
        
        Map<String, Object> response = new HashMap<>();
        
        try {
            Optional<User> userOpt = userService.findByTelegramId(telegramId);
            if (userOpt.isEmpty()) {
                response.put("success", false);
                response.put("message", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return ResponseEntity.notFound().build();
            }
            
            User user = userOpt.get();
            LocalDate targetDate = date != null ? date : LocalDate.now();
            
            NutritionService.ProgressReport report = nutritionService.getProgressReport(user, targetDate);
            
            Map<String, Object> progressData = new HashMap<>();
            progressData.put("date", targetDate);
            progressData.put("onTrack", report.isOnTrack());
            progressData.put("feedback", report.getFeedback());
            
            // –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            NutritionService.DailyNutritionStats todayStats = report.getTodayStats();
            Map<String, Object> todayData = new HashMap<>();
            todayData.put("totalCalories", todayStats.getTotalCalories());
            todayData.put("totalProteins", todayStats.getTotalProteins());
            todayData.put("totalFats", todayStats.getTotalFats());
            todayData.put("totalCarbs", todayStats.getTotalCarbs());
            
            if (todayStats.getProfile() != null) {
                todayData.put("caloriesProgress", todayStats.getCaloriesProgress());
                todayData.put("proteinsProgress", todayStats.getProteinsProgress());
                todayData.put("fatsProgress", todayStats.getFatsProgress());
                todayData.put("carbsProgress", todayStats.getCarbsProgress());
            }
            
            progressData.put("todayStats", todayData);
            
            // –ü—Ä–æ—Ñ–∏–ª—å —Å —Ü–µ–ª—è–º–∏
            if (report.getProfile() != null) {
                Map<String, Object> profileData = new HashMap<>();
                profileData.put("fitnessGoal", report.getProfile().getFitnessGoal());
                profileData.put("dailyCaloriesGoal", report.getProfile().getDailyCaloriesGoal());
                profileData.put("dailyProteinsGoal", report.getProfile().getDailyProteinsGoal());
                profileData.put("dailyFatsGoal", report.getProfile().getDailyFatsGoal());
                profileData.put("dailyCarbsGoal", report.getProfile().getDailyCarbsGoal());
                
                progressData.put("profile", profileData);
            }
            
            response.put("success", true);
            response.put("progressReport", progressData);
            
            return ResponseEntity.ok(response);
            
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –¥–ª—è {}: {}", telegramId, e.getMessage());
            response.put("success", false);
            response.put("message", "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
            return ResponseEntity.internalServerError().body(response);
        }
    }
    
    // –£–î–ê–õ–ï–ù –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π getNutritionRecommendations –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –º–∞–ø–ø–∏–Ω–≥–∞ —Å Mock –≤–µ—Ä—Å–∏–µ–π
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ª—é–±–∏–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @GetMapping("/{telegramId}/favorites")
    public ResponseEntity<Map<String, Object>> getFavoriteProducts(@PathVariable String telegramId) {
        Map<String, Object> response = new HashMap<>();
        
        try {
            Optional<User> userOpt = userService.findByTelegramId(telegramId);
            if (userOpt.isEmpty()) {
                response.put("success", false);
                response.put("message", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return ResponseEntity.notFound().build();
            }
            
            User user = userOpt.get();
            List<NutritionService.FavoriteFood> favorites = nutritionService.getFavoriteProducts(user);
            
            List<Map<String, Object>> favoritesData = favorites.stream()
                    .map(fav -> {
                        Map<String, Object> favData = new HashMap<>();
                        favData.put("foodName", fav.getFoodName());
                        favData.put("count", fav.getCount());
                        favData.put("averageCalories", fav.getAverageCalories());
                        return favData;
                    })
                    .collect(Collectors.toList());
            
            response.put("success", true);
            response.put("favorites", favoritesData);
            response.put("count", favoritesData.size());
            
            return ResponseEntity.ok(response);
            
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª—é–±–∏–º—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è {}: {}", telegramId, e.getMessage());
            response.put("success", false);
            response.put("message", "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
            return ResponseEntity.internalServerError().body(response);
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –ø–∏—Ç–∞–Ω–∏–∏
     */
    @GetMapping("/{telegramId}/recent")
    public ResponseEntity<Map<String, Object>> getRecentEntries(
            @PathVariable String telegramId,
            @RequestParam(defaultValue = "10") int limit) {
        
        Map<String, Object> response = new HashMap<>();
        
        try {
            Optional<User> userOpt = userService.findByTelegramId(telegramId);
            if (userOpt.isEmpty()) {
                response.put("success", false);
                response.put("message", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return ResponseEntity.notFound().build();
            }
            
            User user = userOpt.get();
            List<NutritionEntry> recentEntries = nutritionService.getRecentEntries(user, Math.min(limit, 50));
            
            List<Map<String, Object>> entriesData = recentEntries.stream()
                    .map(this::entryToMap)
                    .collect(Collectors.toList());
            
            response.put("success", true);
            response.put("entries", entriesData);
            response.put("count", entriesData.size());
            
            return ResponseEntity.ok(response);
            
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è {}: {}", telegramId, e.getMessage());
            response.put("success", false);
            response.put("message", "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
            return ResponseEntity.internalServerError().body(response);
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
     */
    @GetMapping("/{telegramId}/meal-types")
    public ResponseEntity<Map<String, Object>> getMealTypeStatistics(
            @PathVariable String telegramId,
            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate startDate,
            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate endDate) {
        
        Map<String, Object> response = new HashMap<>();
        
        try {
            Optional<User> userOpt = userService.findByTelegramId(telegramId);
            if (userOpt.isEmpty()) {
                response.put("success", false);
                response.put("message", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return ResponseEntity.notFound().build();
            }
            
            User user = userOpt.get();
            LocalDate start = startDate != null ? startDate : LocalDate.now().minusDays(7);
            LocalDate end = endDate != null ? endDate : LocalDate.now();
            
            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
            // –≠—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ç–æ–¥–∞ –≤ NutritionService, –ø–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            Map<String, Object> mealTypeStats = new HashMap<>();
            mealTypeStats.put("period", Map.of("startDate", start, "endDate", end));
            mealTypeStats.put("message", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏");
            
            response.put("success", true);
            response.put("mealTypeStats", mealTypeStats);
            
            return ResponseEntity.ok(response);
            
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–∏–ø–∞–º –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏ –¥–ª—è {}: {}", telegramId, e.getMessage());
            response.put("success", false);
            response.put("message", "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
            return ResponseEntity.internalServerError().body(response);
        }
    }
    
    /**
     * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å NutritionEntry –≤ Map –¥–ª—è JSON –æ—Ç–≤–µ—Ç–∞
     */
    private Map<String, Object> entryToMap(NutritionEntry entry) {
        Map<String, Object> entryData = new HashMap<>();
        entryData.put("id", entry.getId());
        entryData.put("date", entry.getDate());
        entryData.put("timestamp", entry.getTimestamp());
        entryData.put("foodName", entry.getFoodName());
        entryData.put("quantity", entry.getQuantity());
        entryData.put("calories", entry.getCalories());
        entryData.put("proteins", entry.getProteins());
        entryData.put("fats", entry.getFats());
        entryData.put("carbs", entry.getCarbs());
        entryData.put("confidence", entry.getConfidence());
        entryData.put("mealType", entry.getMealType());
        entryData.put("notes", entry.getNotes());
        entryData.put("dataSource", entry.getDataSource());
        
        return entryData;
    }
} 