package com.fitcoach.api;

import com.fitcoach.model.User;
import com.fitcoach.model.UserProfile;
import com.fitcoach.service.UserService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

/**
 * REST –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
 */
@RestController
@RequestMapping("/api/users")
@CrossOrigin(origins = "*")
public class UserController {
    
    private static final Logger logger = LoggerFactory.getLogger(UserController.class);
    
    @Autowired
    private UserService userService;
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @GetMapping("/{telegramId}/profile")
    public ResponseEntity<Map<String, Object>> getUserProfile(@PathVariable String telegramId) {
        try {
            logger.info("üì± –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è telegramId: {}", telegramId);
        
            Optional<UserService.UserWithProfile> userWithProfileOpt = userService.getUserWithProfile(telegramId);
            
            if (userWithProfileOpt.isEmpty()) {
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
                logger.info("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ: {}", telegramId);
                User newUser = userService.findOrCreateUser(telegramId, "user_" + telegramId, "–ù–æ–≤—ã–π", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å");
                
                Map<String, Object> response = new HashMap<>();
                response.put("success", true);
                response.put("user", createUserResponse(newUser));
                response.put("profile", null);
                response.put("message", "–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å!");
                response.put("isNewUser", true);
                
                return ResponseEntity.ok(response);
            }
            
            UserService.UserWithProfile userWithProfile = userWithProfileOpt.get();
            User user = userWithProfile.getUser();
            UserProfile profile = userWithProfile.getProfile();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            userService.updateLastActiveTime(telegramId);
            
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("user", createUserResponse(user));
            response.put("profile", profile != null ? createProfileResponse(profile) : null);
            response.put("message", profile != null ? "–ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω" : "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π");
            response.put("isNewUser", false);
            
            logger.info("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", user.getUsername());
            return ResponseEntity.ok(response);
            
        } catch (Exception e) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è {}: {}", telegramId, e.getMessage(), e);
            return ResponseEntity.status(500).body(Map.of(
                "success", false,
                "message", "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: " + e.getMessage(),
                "error", "INTERNAL_ERROR"
            ));
        }
    }
    
    /**
     * –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @PostMapping("/{telegramId}")
    public ResponseEntity<Map<String, Object>> createOrUpdateUser(
            @PathVariable String telegramId, 
            @RequestBody Map<String, Object> userData) {
        
        try {
            logger.info("üë§ –°–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", telegramId);
            
            String username = (String) userData.getOrDefault("username", "user_" + telegramId);
            String firstName = (String) userData.get("firstName");
            String lastName = (String) userData.get("lastName");
            
            User user = userService.findOrCreateUser(telegramId, username, firstName, lastName);
            
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("user", createUserResponse(user));
            response.put("message", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω");
            
            return ResponseEntity.ok(response);
            
        } catch (Exception e) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", telegramId, e.getMessage(), e);
            return ResponseEntity.status(500).body(Map.of(
                "success", false,
                "message", "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: " + e.getMessage(),
                "error", "INTERNAL_ERROR"
            ));
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @GetMapping("/{telegramId}/exists")
    public ResponseEntity<Map<String, Object>> checkUserExists(@PathVariable String telegramId) {
        try {
            boolean exists = userService.userExists(telegramId);
            boolean hasProfile = exists ? userService.hasProfile(telegramId) : false;
            
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("exists", exists);
            response.put("hasProfile", hasProfile);
            response.put("message", exists ? "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω" : "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
            
            return ResponseEntity.ok(response);
            
        } catch (Exception e) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", telegramId, e.getMessage(), e);
            return ResponseEntity.status(500).body(Map.of(
                "success", false,
                "message", "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: " + e.getMessage(),
                "error", "INTERNAL_ERROR"
            ));
        }
    }
    
    /**
     * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –∞–¥–º–∏–Ω–∫–∏)
     */
    @GetMapping("/statistics")
    public ResponseEntity<Map<String, Object>> getUserStatistics() {
        try {
            UserService.UserStatistics stats = userService.getUserStatistics();
            
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("statistics", Map.of(
                "totalUsers", stats.getTotalUsers(),
                "activeUsers7Days", stats.getActiveUsers7Days(),
                "activeUsers30Days", stats.getActiveUsers30Days(),
                "newUsers7Days", stats.getNewUsers7Days(),
                "newUsers30Days", stats.getNewUsers30Days()
            ));
            response.put("message", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞");
            
            return ResponseEntity.ok(response);
            
        } catch (Exception e) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {}", e.getMessage(), e);
            return ResponseEntity.status(500).body(Map.of(
                "success", false,
                "message", "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: " + e.getMessage(),
                "error", "INTERNAL_ERROR"
            ));
        }
    }
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    
    private Map<String, Object> createUserResponse(User user) {
        Map<String, Object> userResponse = new HashMap<>();
        userResponse.put("id", user.getId());
        userResponse.put("telegramId", user.getTelegramId());
        userResponse.put("username", user.getUsername());
        userResponse.put("firstName", user.getFirstName());
        userResponse.put("lastName", user.getLastName());
        userResponse.put("registrationDate", user.getCreatedAt().format(DateTimeFormatter.ISO_LOCAL_DATE));
        userResponse.put("lastActiveAt", user.getLastActiveAt() != null ? 
            user.getLastActiveAt().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME) : null);
        return userResponse;
    }
    
    private Map<String, Object> createProfileResponse(UserProfile profile) {
        Map<String, Object> profileResponse = new HashMap<>();
        profileResponse.put("id", profile.getId());
        profileResponse.put("age", profile.getAge());
        profileResponse.put("gender", profile.getGender() != null ? profile.getGender().toString() : null);
        profileResponse.put("height", profile.getHeight());
        profileResponse.put("currentWeight", profile.getWeight());
        // targetWeight –ø–æ–ª–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –º–æ–¥–µ–ª–∏, —É–±–∏—Ä–∞–µ–º
        profileResponse.put("activityLevel", profile.getActivityLevel() != null ? profile.getActivityLevel().toString() : null);
        profileResponse.put("goal", profile.getFitnessGoal() != null ? profile.getFitnessGoal().toString() : null);
        profileResponse.put("dailyCalorieGoal", profile.getDailyCaloriesGoal());
        profileResponse.put("dailyProteinsGoal", profile.getDailyProteinsGoal());
        profileResponse.put("dailyFatsGoal", profile.getDailyFatsGoal());
        profileResponse.put("dailyCarbsGoal", profile.getDailyCarbsGoal());
        profileResponse.put("createdAt", profile.getCreatedAt() != null ? 
            profile.getCreatedAt().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME) : null);
        profileResponse.put("updatedAt", profile.getUpdatedAt() != null ? 
            profile.getUpdatedAt().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME) : null);
        return profileResponse;
    }
} 