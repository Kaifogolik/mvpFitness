package com.fitcoach.api;

import com.fitcoach.infrastructure.vision.FoodDetectionResult;
import com.fitcoach.infrastructure.vision.FoodVisionService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.util.Map;

/**
 * API –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Computer Vision —Å–µ—Ä–≤–∏—Å–∞
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —ç–∫–æ–Ω–æ–º–∏—é $1,200/–º–µ—Å—è—Ü —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 */
@RestController
@RequestMapping("/api/v2/vision")
public class VisionApiController {
    
    private static final Logger log = LoggerFactory.getLogger(VisionApiController.class);
    
    private final FoodVisionService foodVisionService;
    
    public VisionApiController(FoodVisionService foodVisionService) {
        this.foodVisionService = foodVisionService;
    }
    
    /**
     * –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –µ–¥—ã
     * 
     * @param image –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
     * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
     * @return —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    @PostMapping("/analyze-image")
    public ResponseEntity<Map<String, Object>> analyzeImage(
            @RequestParam("image") MultipartFile image,
            @RequestParam(value = "userId", required = false) String userId) {
        
        try {
            log.info("üì∏ API: –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} ({}KB)", 
                    userId != null ? userId : "anonymous", 
                    image.getSize() / 1024);
            
            FoodDetectionResult result = foodVisionService.analyzeImage(image);
            
            if (!result.isValid()) {
                return ResponseEntity.badRequest().body(Map.of(
                        "success", false,
                        "error", "INVALID_RESULT",
                        "message", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                        "suggestion", "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ–¥—ã"
                ));
            }
            
            return ResponseEntity.ok(Map.of(
                    "success", true,
                    "detection", createDetectionResponse(result),
                    "confidence", result.isHighConfidence() ? "high" : "medium",
                    "message", "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ"
            ));
            
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {}", e.getMessage());
            return ResponseEntity.internalServerError().body(Map.of(
                    "success", false,
                    "error", "VISION_ERROR",
                    "message", "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: " + e.getMessage()
            ));
        }
    }
    
    /**
     * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è
     */
    @GetMapping("/model-info")
    public ResponseEntity<Map<String, Object>> getModelInfo() {
        try {
            Map<String, Object> modelInfo = foodVisionService.getModelInfo();
            
            return ResponseEntity.ok(Map.of(
                    "success", true,
                    "model", modelInfo,
                    "capabilities", Map.of(
                            "maxImageSize", "10MB",
                            "supportedFormats", new String[]{"JPEG", "PNG", "GIF", "BMP", "WEBP"},
                            "minResolution", "224x224",
                            "processingTime", "~50-200ms –ª–æ–∫–∞–ª—å–Ω–æ",
                            "accuracy", "~79% –Ω–∞ Food-101 dataset"
                    ),
                    "economics", Map.of(
                            "costPerRequest", "$0 (–ª–æ–∫–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞)",
                            "monthlySavings", "$1,200 vs GPT-4V Vision API",
                            "yearlyProjection", "$14,400 —ç–∫–æ–Ω–æ–º–∏–∏"
                    )
            ));
            
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏: {}", e.getMessage());
            return ResponseEntity.internalServerError().body(Map.of(
                    "success", false,
                    "error", "MODEL_INFO_ERROR",
                    "message", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏"
            ));
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Vision —Å–µ—Ä–≤–∏—Å–∞
     */
    @GetMapping("/health")
    public ResponseEntity<Map<String, Object>> healthCheck() {
        try {
            boolean available = foodVisionService.isAvailable();
            
            return ResponseEntity.ok(Map.of(
                    "success", true,
                    "healthy", available,
                    "status", available ? "READY" : "UNAVAILABLE",
                    "message", available ? 
                              "Vision —Å–µ—Ä–≤–∏—Å –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ" : 
                              "Vision —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                    "service", "FoodVisionService",
                    "timestamp", java.time.LocalDateTime.now().toString()
            ));
            
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è Vision —Å–µ—Ä–≤–∏—Å–∞: {}", e.getMessage());
            return ResponseEntity.internalServerError().body(Map.of(
                    "success", false,
                    "healthy", false,
                    "status", "ERROR",
                    "message", "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Vision —Å–µ—Ä–≤–∏—Å–∞"
            ));
        }
    }
    
    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞
     */
    @PostMapping("/validate-image")
    public ResponseEntity<Map<String, Object>> validateImage(
            @RequestParam("image") MultipartFile image) {
        
        try {
            log.info("üîç API: –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ({}KB)", image.getSize() / 1024);
            
            // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
            if (image.isEmpty()) {
                return ResponseEntity.badRequest().body(Map.of(
                        "success", false,
                        "valid", false,
                        "error", "EMPTY_IMAGE",
                        "message", "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ"
                ));
            }
            
            if (image.getSize() > 10_000_000) {
                return ResponseEntity.badRequest().body(Map.of(
                        "success", false,
                        "valid", false,
                        "error", "IMAGE_TOO_LARGE",
                        "message", "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ (–º–∞–∫—Å 10MB)"
                ));
            }
            
            String contentType = image.getContentType();
            if (contentType == null || !contentType.startsWith("image/")) {
                return ResponseEntity.badRequest().body(Map.of(
                        "success", false,
                        "valid", false,
                        "error", "INVALID_FORMAT",
                        "message", "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞"
                ));
            }
            
            return ResponseEntity.ok(Map.of(
                    "success", true,
                    "valid", true,
                    "fileInfo", Map.of(
                            "filename", image.getOriginalFilename(),
                            "size", image.getSize(),
                            "sizeFormatted", formatFileSize(image.getSize()),
                            "contentType", contentType
                    ),
                    "message", "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é"
            ));
            
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {}", e.getMessage());
            return ResponseEntity.internalServerError().body(Map.of(
                    "success", false,
                    "valid", false,
                    "error", "VALIDATION_ERROR",
                    "message", "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
            ));
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ JSON –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏
     */
    private Map<String, Object> createDetectionResponse(FoodDetectionResult result) {
        Map<String, Object> response = Map.of(
                "foodName", result.getFoodName(),
                "confidence", result.getConfidence(),
                "confidencePercent", Math.round(result.getConfidence() * 100),
                "estimatedWeight", result.getEstimatedWeight(),
                "category", result.getCategory() != null ? result.getCategory() : "unknown",
                "summary", result.getSummary()
        );
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å
        if (result.getAlternativeDetections() != null && !result.getAlternativeDetections().isEmpty()) {
            response = new java.util.HashMap<>(response);
            response.put("alternatives", result.getAlternativeDetections().stream()
                    .map(alt -> Map.of(
                            "name", alt.getName(),
                            "confidence", alt.getConfidence(),
                            "category", alt.getCategory()
                    )).toList());
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ bounding box –µ—Å–ª–∏ –µ—Å—Ç—å
        if (result.getBoundingBox() != null) {
            response = new java.util.HashMap<>(response);
            FoodDetectionResult.BoundingBox bbox = result.getBoundingBox();
            response.put("boundingBox", Map.of(
                    "x", bbox.getX(),
                    "y", bbox.getY(),
                    "width", bbox.getWidth(),
                    "height", bbox.getHeight(),
                    "area", bbox.getArea()
            ));
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if (result.getImageMetadata() != null) {
            response = new java.util.HashMap<>(response);
            FoodDetectionResult.ImageMetadata metadata = result.getImageMetadata();
            response.put("imageMetadata", Map.of(
                    "width", metadata.getWidth(),
                    "height", metadata.getHeight(),
                    "format", metadata.getFormat(),
                    "fileSizeBytes", metadata.getFileSizeBytes(),
                    "colorSpace", metadata.getColorSpace() != null ? metadata.getColorSpace() : "unknown",
                    "brightness", metadata.getBrightness() != null ? 
                                 Math.round(metadata.getBrightness() * 100) / 100.0 : null,
                    "contrast", metadata.getContrast() != null ? 
                               Math.round(metadata.getContrast() * 100) / 100.0 : null,
                    "goodQuality", metadata.isGoodQuality()
            ));
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞
        response = new java.util.HashMap<>(response);
        response.put("analysisMetadata", Map.of(
                "modelVersion", result.getModelVersion(),
                "analyzedAt", result.getAnalyzedAt().toString(),
                "processingType", "local",
                "costUsd", 0.0
        ));
        
        return response;
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    private String formatFileSize(long bytes) {
        if (bytes < 1024) {
            return bytes + " B";
        } else if (bytes < 1024 * 1024) {
            return Math.round(bytes / 1024.0) + " KB";
        } else {
            return Math.round(bytes / 1024.0 / 1024.0 * 10) / 10.0 + " MB";
        }
    }
} 